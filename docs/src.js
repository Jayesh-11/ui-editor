(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,,function(e,t,n){"use strict";var o=n(40);e.exports={readData:o.readData,writeData:o.writeData,readComponent:o.readComponent,writeComponent:o.writeComponent,popHistory:o.popHistory}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.saveComponentsToWindow=function(e){e.forEach(function(e){!function(e){(0,r.hasAssets)(e.state)&&(e.state=JSON.parse((0,r.nameToURL)(JSON.stringify(e.state))));(function(e,t){window.assets&&(e=(0,r.nameToURL)(e));[].concat(i(document.querySelectorAll("[data-component-name='"+t+"']"))).forEach(function(e){e.remove()});var n=document.createElement("style");n.setAttribute("data-component-name",t),n.type="text/css",n.innerHTML=e,document.body.appendChild(n)})(e.style,e.name),window[e.name]=(0,o.createComponent)(e)}(JSON.parse(JSON.stringify(e)))})},t.getChildren=function(e){var t=(0,a.readData)("ui-editor");if(s(e.markup)){return t.filter(function(t){return e.markup.includes(t.name)}).map(function(e){return e.name})}return[]},t.getNestedComponents=function e(t){var n=(0,a.readData)("ui-editor");var o=[t];if(s(t.markup)){var r=n.filter(function(e){return t.markup.includes(e.name)}),l=r.map(e).flat(3);o.push.apply(o,i(l))}return o.filter(function(e){return e&&e.markup})};var o=n(39),a=n(3),r=n(42);function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function s(e){return(0,a.readData)("ui-editor").filter(function(t){return e.includes(t.name)}).length>0}window.saveVariant=function(e,t){var n=(0,a.readData)("ui-editor"),o=n.find(function(t){return t.name.includes(e)}),i=JSON.parse(o.state);void 0!==i.variant&&void 0!==t.variant||console.error("Add a variant property with a text value"),0===o.variants.length&&(o.variants=[{name:i.variant,state:(0,r.urlToName)(JSON.stringify(i))}]),o.variants.find(function(e){return e.name===t.variant})||o.variants.push({name:t.variant,state:(0,r.urlToName)(JSON.stringify(t))}),(0,a.writeData)("ui-editor",n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o},s=(n(38),n(4));n(43);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"dragOverHandler",value:function(e){e.currentTarget.querySelector(".content")||e.target.classList.add("hintNoDrop"),e.target.classList.contains("content")&&(e.target.classList.add("hintDragOver"),e.target.children.length>1&&console.log("YES")),e.stopPropagation(),e.preventDefault()}},{key:"dropComponent",value:function(e){var t=e.dataTransfer.getData("component-name"),n=this.state.component,o="<"+t+"></"+t+">";n.markup=n.markup.replace('content">','content">'+o),this.props.onSave(n)}},{key:"render",value:function(){if(void 0===this.state.component.name)return i.default.createElement("p",null,"No component selected.");var e=(0,s.getNestedComponents)(this.state.component);return e.length>0&&(0,s.saveComponentsToWindow)(e),window[this.state.component.name]?i.default.createElement("div",{onDragOver:this.dragOverHandler.bind(this),onDrop:this.dropComponent.bind(this)},i.default.createElement(window[this.state.component.name])):i.default.createElement("div",null)}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReact=function(e){e.events.forEach(function(e){e.id=e.id.replace("-","")});var t=function(e){return e.markup.replace(">"," {...this.props}>{this.props.children}")}(e),n=function(t){var n=JSON.parse(e.config);return Object.keys(n).forEach(function(e){if(n[e].override){var o="<"+e+"></"+e+">",a="{state."+e+".map((item,i)=>"+("<"+e+" state={item} key={~~(Math.random()*10000)}></"+e+">")+")}";t=t.replace(o,a)}}),t}(t),o=function(e,t){return t.forEach(function(t){var n='id="'+t.id+'"';e=e.includes(n)?e.replace(n,n+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}"):e.replace("<"+t.id,"<"+t.id+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}")}),e.split("state.").join("this.state.")}(n,e.events),a=function(){if(window.__editor)return'window.saveVariant("'+e.name+'",state)'}();return"(\nclass "+e.name+" extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.props.state || "+e.state+";\n\n        // Generate css as a separate file on download\n    }\n\n    "+e.events.map(function(e){return e.publishable?"\n            \n    "+(e.id+e.name)+" (e) {\n        var state = JSON.parse(JSON.stringify(this.state))\n        "+e.reducer+"\n        this.setState(state);\n        e.state = state;\n        this.props."+e.publishName+"? this.props."+e.publishName+"(e):null;\n    }":"\n    "+(e.id+e.name)+" (e) {\n        var state = JSON.parse(JSON.stringify(this.state))\n        "+e.reducer+"\n        "+a+"\n        this.setState(state);\n    }\n"}).join("\n")+"\n\n    render() {\n        return ("+o+")\n    }\n})\n"}},,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.findParent=function e(t,n){var a=n.contents;for(var i=0;i<a.length;i++){var s=a[i];t===s&&(r=n),"object"===(void 0===s?"undefined":o(s))&&e(t,s)}return r},t.findParentFolder=function e(t,n){var a=n.contents;for(var r=0;r<a.length;r++){var s=a[r];"object"===(void 0===s?"undefined":o(s))&&(s.name===t&&(i=n),e(t,s))}return i},t.findFolder=function e(t,n){if("string"==typeof n)return!1;if("object"===(void 0===n?"undefined":o(n))){n.name===t&&(a=n);for(var r=n.contents,i=0;i<r.length;i++){var s=r[i];e(t,s)}}return a};var a="",r="",i=""},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.findParent=function e(t,n){var a=n.contents;for(var i=0;i<a.length;i++){var s=a[i];t===s&&(r=n),"object"===(void 0===s?"undefined":o(s))&&e(t,s)}return r},t.findParentFolder=function e(t,n){var a=n.contents;for(var r=0;r<a.length;r++){var s=a[r];"object"===(void 0===s?"undefined":o(s))&&(s.name===t&&(i=n),e(t,s))}return i},t.findFolder=function e(t,n){if("string"==typeof n)return!1;if("object"===(void 0===n?"undefined":o(n))){n.name===t&&(a=n);for(var r=n.contents,i=0;i<r.length;i++){var s=r[i];e(t,s)}}return a};var a="",r="",i=""},,,,,,function(e,t,n){var o=n(18);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,'body {\n    position:relative;\n    color: #d9d9d9;\n    font-family: "Nunito Sans",-apple-system,".SFNSText-Regular","San Francisco",BlinkMacSystemFont,"Segoe UI","Helvetica Neue",Helvetica,Arial,sans-serif;\n    margin: 0px;\n}\n\nli , label, p, .rules , input, textarea{\n    font-size: 9px;\n}\n\ninput, textarea { \n    background: #2b2b2b;\n    color: #d9d9d9;\n    opacity: 0.75;\n    vertical-align: bottom;\n}\n\ninput[type="text"] {\n    -webkit-appearance: textarea;\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\nul label input {\n    width: 10px;\n}\n\nul, li {\n    padding-left: 5px;\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\nbutton {\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 5px;\n    background-color: #343a40;\n    margin-left: 4px;\n}\n\nbutton i{\n    padding-right:4px;\n}\n\nbutton:hover {\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\nul,li, ul label {\n    color: rgba(255,255,255,0.5);\n}\n\nul label:hover, li:hover, .content:hover{\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\n#index{\n    margin:-4px;\n}\n\n.CodeMirror {\n    border: 1px solid black;\n    margin-top:5px;\n}',""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=s(a);n(21);var i=s(n(23));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders,showControls:n.props.showControls},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"addFolder",value:function(){var e=Array.from(this.state.folders);e.unshift({type:"NewFolder",name:"",contents:[],status:"closed"}),this.setState({folders:e})}},{key:"addComponent",value:function(){this.props.onOpenEditor()}},{key:"render",value:function(){var e=this.props,t=this.state;return r.default.createElement("div",{className:"container elements-tab"},r.default.createElement("div",{className:"title"},"Components"),r.default.createElement("div",{className:"Controls"},r.default.createElement("button",{onClick:this.addComponent.bind(this)},r.default.createElement("i",{className:"fa fa-edit"}),e.selectedComponent?"Edit":"Add"),r.default.createElement("button",{onClick:this.addFolder.bind(this)},r.default.createElement("i",{className:"fa fa-folder"}),"Folder")),r.default.createElement("div",{className:"folders"},r.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),components:t.components,folders:t.folders,selectedComponent:e.selectedComponent,onFoldersUpdate:e.onFoldersUpdate,onSelection:e.onSelection})))}}]),t}();t.default=l},function(e,t,n){var o=n(22);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".override {\n    line-height: 0%;\n}\n\ntextarea {\n    height: 70px;\n    width: 450px;\n}\n\n.title{\n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    background: rgb(64, 64, 64);\n    padding: 5px;\n    font-size: 12px;\n}\n\n.elements-tab {\n    left:0px;\n    height: 100vh;\n    width:190px;;\n}\n\n.folders{\n    overflow: scroll;  \n    height:85vh;\n}\n\n.Controls{\n    display: inline-block;\n    opacity: 1;\n    transition: opacity .2s ease-in;\n}\n\n.hideControls{\n    opacity: 0;\n    transition: opacity .5s ease-in-out;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=((o=i)&&o.__esModule,n(9));n(24);var l=n(26);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),r(t,[{key:"removeFolderFromParent",value:function(e,t,n){var o=(0,s.findFolder)(t,e[0]),r=o.contents.findIndex(function(e){return"object"===(void 0===e?"undefined":a(e))&&e.name===n});r>-1&&o.contents.splice(r,1)}},{key:"removeContentFromParent",value:function(e,t,n){var o=(0,s.findFolder)(t,e[0]),a=o.contents.findIndex(function(e){return e===n});-1!==a&&o.contents.splice(a,1)}},{key:"onFolderUpdate",value:function(e,t,n,o){var a=Array.from(this.state.folders),r=e.name,i=(0,s.findFolder)(r,a[0]);if("NEWFOLDER"==t){var l=a.findIndex(function(e){return"NewFolder"===e.type});-1!==l&&a.splice(l,1),a[0].contents.unshift(e)}"COMPONENT"==t?(i.contents=e.contents,this.removeContentFromParent(a,n,o)):"FOLDER"==t&&(i.contents=e.contents,this.removeFolderFromParent(a,n,o,r)),this.props.onFoldersUpdate(a)}},{key:"onFolderStatusChanged",value:function(e){(0,s.findFolder)(e.name,this.state.folders[0]).status=e.status,this.props.onFoldersUpdate(this.state.folders)}},{key:"render",value:function(){return(0,l.folderStructure)(this.props,this.onFolderUpdate.bind(this),this.onFolderStatusChanged.bind(this))}}]),t}();t.default=u},function(e,t,n){var o=n(25);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.folderStructure=function(e,t,n){var o=e.folders;return p(e,t,n),o.map(f)};var o=r(n(27)),a=r(n(35));function r(e){return e&&e.__esModule?e:{default:e}}var i=void 0,s=void 0,l=void 0,u=void 0,c=void 0,d=void 0;function p(e,t,n){c=e.folders,i=e.selectedComponent,s=e.onSelection,u=e.components,l=t,d=n}function f(e,t){var n=e.contents;return React.createElement(o.default,{key:t,folder:e,folders:c,contents:n.map(m),onFolderStatusChanged:d,onFolderUpdate:l})}function m(e,t){if("string"==typeof e)return React.createElement(a.default,{key:t,component:u.find(function(t){return t.name===e}),selectedComponent:i,onSelectionChange:s});var n=e;return React.createElement(o.default,{key:t,folder:n,folders:c,contents:n.contents.map(m),onFolderStatusChanged:d,onFolderUpdate:l})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=u(a);n(28);var i=u(n(30)),s=n(33),l=n(34);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={iconStatus:"fa fa-folder",folderClass:"newFolder",name:n.props.folder.name,contents:n.props.folder.contents,type:n.props.folder.type,status:n.props.folder.status},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"newFolder",value:function(e){this.props.onFolderUpdate(e,"NEWFOLDER")}},{key:"render",value:function(){var e=this.props.folder,t=this.props.contents,n="open"===this.state.status?"fa fa-folder-open":"fa fa-folder";return"NewFolder"==e.type?r.default.createElement(i.default,{onNewFolder:this.newFolder.bind(this)}):"folder"==e.type?r.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},r.default.createElement("i",{className:n,onClick:s.toggleFolder.bind(this)}),r.default.createElement("input",{type:"text",className:"folder",placeholder:"Enter folder name",readOnly:!0,value:this.state.name}),"open"===this.state.status?t:null):"noFolder"==e.type?r.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},t):void 0}}]),t}();t.default=c},function(e,t,n){var o=n(29);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"input.folder{\n    border:none;\n    background:none;\n    padding-bottom: 13px;\n    width: 155px;\n}\n\n.newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(31);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:"fa fa-folder",newFolderClass:"newFolder",folderName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"folderNameChanged",value:function(e){this.setState({folderName:e.currentTarget.value})}},{key:"saveFolderNameOnEnter",value:function(e){"Enter"===e.key&&this.props.onNewFolder({name:this.state.folderName,contents:[],type:"folder",status:"closed"})}},{key:"render",value:function(){return i.default.createElement("div",{className:this.state.newFolderClass},i.default.createElement("i",{className:this.state.status}),i.default.createElement("input",{type:"text",className:"folder",autoFocus:!0,placeholder:"Enter folder name",value:this.state.folderName,onChange:this.folderNameChanged.bind(this),onKeyPress:this.saveFolderNameOnEnter.bind(this)}))}}]),t}();t.default=s},function(e,t,n){var o=n(32);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: green;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleFolder=function(){"closed"===this.state.status?function(){var e=JSON.parse(JSON.stringify(this.state));e.status="open",this.props.onFolderStatusChanged(e)}.call(this):function(){var e=JSON.parse(JSON.stringify(this.state));e.status="closed",this.props.onFolderStatusChanged(e)}.call(this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){e.preventDefault();var t=e.dataTransfer.getData("component-name"),n=e.dataTransfer.getData("folder-name"),a=e.dataTransfer.getData("parent-folder-name"),r=this.state.name;if(a===r)return void this.setState({folderClass:"newFolder",status:"closed"});if(""===t){if("null"==n||""==n)return void console.error("Folder cannot be empty");(function(e,t){var n=Array.from(this.state.contents),a=(0,o.findFolder)(e,this.props.folders[0]);n.push(a),e&&e!==this.state.name&&this.props.onFolderUpdate({name:this.state.name,contents:n,type:"folder",status:"open"},"FOLDER",t,e)}).call(this,n,a)}else(function(e,t){var n=Array.from(this.state.contents);n.push(e),this.props.onFolderUpdate({name:this.state.name,contents:n,type:"folder",status:"open"},"COMPONENT",t,e)}).call(this,t,a);console.log("Drop from folder"),e.stopPropagation()},t.dragOverHandler=function(e){e.preventDefault(),this.setState({folderClass:"newFolder dragOver",status:"open"})},t.dragLeaveHandler=function(e){this.setState({folderClass:"newFolder",status:"closed"})},t.folderStartDrag=function(e){var t=event.target.getAttribute("data-folder-name"),n=event.target.parentElement.getAttribute("data-folder-name");e.dataTransfer.setData("folder-name",t),e.dataTransfer.setData("parent-folder-name",n),console.log("Folder "+t+" draged with parent "+n)};var o=n(9)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=l(a),i=n(36),s=l(n(37));function l(e){return e&&e.__esModule?e:{default:e}}n(47);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selectedComponent:n.props.selectedComponent},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"addComponentDetails",value:function(e){var t=event.target.getAttribute("data-name");e.target.querySelector(".thumbnail").classList.remove("hidden"),e.target.querySelector(".componentName").classList.add("hidden"),console.log("SETTING DATA"),e.dataTransfer.setData("component-name",t),e.dataTransfer.setData("parent-folder-name",e.currentTarget.parentElement.getAttribute("data-folder-name")),console.log(e.dataTransfer.getData("component-name")),e.stopPropagation()}},{key:"render",value:function(){var e=this.props,t=e.selectedComponent,n=e.component;return r.default.createElement("li",{className:t&&e.component.name===t.name?"selected component background":"component background",onClick:i.selectionChanged.bind(this,n.name),onContextMenu:i.selectionChanged.bind(this,n.name),index:e.index,draggable:"true","data-name":n.name,onDragStart:this.addComponentDetails.bind(this)},r.default.createElement("span",{className:"componentName "},n.name),r.default.createElement("span",{className:"hidden thumbnail"},r.default.createElement(s.default,{component:n})))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectionChanged=function(e,t){this.props.onSelectionChange(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=s(a),i=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}n(45);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.name||"",state:n.props.state},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=JSON.parse(JSON.stringify(this.props.component));return""==e.name?r.default.createElement("div",null):r.default.createElement("div",{className:"thumbnailView"},r.default.createElement(i.default,{component:e}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.insertDirection=function(e,t){o=o||e,a=a||t,++i===r&&(console.log(o,e),i=0,a=t,o=e)};var o=void 0,a=void 0,r=50,i=0},function(module,exports,__webpack_require__){"use strict";var _React=__webpack_require__(6);function createComponent(component){var componentString=(0,_React.convertToReact)(component);return eval(Babel.transform(componentString,{presets:["react"],plugins:["transform-es2015-classes"]}).code)}module.exports={createComponent:createComponent}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readData=a,t.writeData=r,t.readComponent=function(e){var t=a("ui-editor");if(!t)return;return t.find(function(t){return t.name===e})},t.writeComponent=function(e){if(!Array.isArray(e)&&e.name){var t=a("ui-editor"),n=t.findIndex(function(t){return t.name===e.name});t[n]=e,r("ui-editor",t)}},t.popHistory=function(){var e=a("ui-editor-history");if(!e)return;var t=e.pop();if(!e)return;r("ui-editor-history",e,!0),r("ui-editor",t,!0)};var o=n(41);function a(e){if("ui-editor"===e)return window.components||(window.components=JSON.parse(localStorage.getItem(e))||o.sample),JSON.parse(JSON.stringify(window.components));if("ui-editor-history"===e){var t=localStorage.getItem(e);if(t)return JSON.parse(t)}if("folders"===e){var n=JSON.parse(localStorage.getItem(e));return null===n?[{type:"noFolder",contents:[{name:"Templates",contents:["Page"],type:"folder",status:"closed"},{name:"Components",contents:["Modal","ResetPasswordModal","ForgotPassword","Carousal","Product","Carousal_Single","Carousal_Double"],type:"folder",status:"open"},{name:"Elements",contents:["EmailInput","TermsAndService","SubmitButton","CancelButton","PrivacyAndPolicy","ResetPasswordForm","Form"],type:"folder",status:"closed"}],name:"noFolder",status:"open"}]:n}return[]}function r(e,t,n){"folders"==e&&localStorage.setItem(e,JSON.stringify(t)),"ui-editor"==e&&(console.log("WRITE"),window.components=t,localStorage.setItem(e,JSON.stringify(t)),n||function(e){window.editorHistory=a("ui-editor-history"),editorHistory.push(e),localStorage.setItem("ui-editor-history",JSON.stringify(editorHistory))}(t))}},function(e,t,n){"use strict";e.exports={sample:[{name:"ForgotPassword",markup:'<div className="vsButton"><button id="f123">{state.buttonText}</button></div>',events:[{name:"onClick",reducer:"state.show",publishable:!0,publishName:"onPasswordForgotten",id:"f123"}],state:'{"buttonText":"Forgot Password"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"Modal",markup:'<div class="modal">\n<header>\n  <h3>Forgot Password</h3>\n    <button className="closeButton" id="x">x</button>\n</header>\n<section class="content">\n</section>\n<footer>footer</footer>\n</div>',events:[{name:"onClick",reducer:'state.name="";',publishable:!0,publishName:"onCloseModal",id:"x"}],state:'{"variant":"initial"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}",variants:[]},{name:"CancelButton",markup:'<div className="vsButton"><button>{state.cancelButton}</button></div>',events:[],state:'{"cancelButton":"Cancel"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"SubmitButton",markup:'<div className="vsButton"><button>{state.submitButton}</button></div>',events:[],state:'{"submitButton":"Submit"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"PrivacyAndPolicy",markup:'<div class="privacyPolicy">\n\t{state.content}\n</div>',events:[],state:'{\n\t"content":"Please enter the email address you used to create your account and we will send you a link to reset your password. See Privacy Policy"\n}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}",variants:[]},{name:"TermsAndService",markup:'<div class="privacyPolicy">\n{state.variant}\n</div>',events:[],state:'{"variant":"This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply."}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}",variants:[]},{name:"Form",markup:'<form className="vsfrm">\n</form>',events:[],state:"{}",style:".vsfrm{\nheight:400px;\nwidth:400px;\n}",config:"{}",variants:[]},{name:"EmailInput",markup:'<span className={state.variant+" emailInput"}>\n\t\n    <input id="input" className="email" type="email" \tvalue={state.email} />SOME\n\t\n    <label>{state.placeholder}</label>\n    \n</span>',events:[{name:"onChange",reducer:"state.email = e.target.value",publishable:"",publishName:"",id:"input"},{name:"onFocus",reducer:'state.variant = "focussed"',index:1,publishable:"",publishName:"",id:"input"},{name:"onBlur",reducer:'if(state.email.length==0){\n    state.placeholder ="Please enter an Email Address"\n    state.variant = "prompt_input"\n}\nelse if(!state.email.includes("@")){\n    state.placeholder ="Please correct the Email Address"\n\tstate.variant = "prompt_correct_input";\n}\nelse{\n\tstate.placeholder = "Email Address";\n    state.variant = "valid_input"\n}\n',index:2,publishable:"",publishName:"",id:"input"}],state:'{\n\t"email":"",\n    "variant":"initial",\n    "placeholder":"Email Address"\n}',style:".emailInput{\n\tfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\n\tposition:relative;\n}\n\n.emailInput .email{\n\tpadding: 17px;\n\tpadding-top: 25px;\n\tborder: 1px solid #e1e1e1;\n    font-size: 16px;\n    width: 100%;\n}\n\n.emailInput label{\n    font-size: 14px;\n    position:absolute;\n    left: 15px;\n    top: -18px;\n}\n\n.prompt_input.emailInput label{\n\tfont-size: 11px;\n   \tleft: 15px;\n    top: -18px;\n    color: #d91560;\n}\n\n.prompt_input .email{\n    color: #d91560;\n    border-color: #ef5f96;\n}\n\n.prompt_correct_input label{\n    color: #d91560;\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.prompt_correct_input .email{\n   color: #d91560;\n    border-color: #ef5f96;\n}\n\n.focussed.emailInput label{\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.valid_input label{\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.emailInput label {\n\ttransition: top .3s;\n}",config:"{}",variants:[{name:"focussed",state:{email:"",variant:"focussed",placeholder:"Email Address"}},{name:"prompt_input",state:{email:"",variant:"prompt_input",placeholder:"Please enter an Email Address"}},{name:"prompt_correct_input",state:{email:"a",variant:"prompt_correct_input",placeholder:"Please correct the Email Address"}},{name:"valid_input",state:{email:"a@",variant:"valid_input",placeholder:"Email Address"}}]},{name:"ResetPasswordForm",markup:"<form><TermsAndService></TermsAndService><EmailInput></EmailInput><SubmitButton></SubmitButton><CancelButton></CancelButton><TermsAndService><PrivacyAndPolicy></PrivacyAndPolicy></TermsAndService>\n</form>",events:[],state:'{"variant":"text"}',style:"form{\nheight:400px;}",config:"{}",variants:[]},{name:"Page",markup:'<div className="page">\n\t<ForgotPassword></ForgotPassword>\n    <ResetPasswordModal></ResetPasswordModal>\n</div>',events:[{name:"onPasswordForgotten",reducer:'state.ResetPasswordModal = [\n\t{\n    \ttitle: "Forgot Password",\n        footer: "Copyrigts",\n        show: "sd"\n    }\n];\n\nstate.variant = "modal_opened";',index:0,publishable:"",publishName:"",id:"ForgotPassword"},{name:"onClose",reducer:'state.ResetPasswordModal = [];\nstate.variant = "modal_closed";',index:0,publishable:"",publishName:"",id:"ResetPasswordModal"}],state:'{\n\t"showModal": false,\n    "list": [1,2,3,4,5],\n    "ResetPasswordModal": [],\n    "variant": "initial"\n}',style:".page{\n\theight: 700px;\n\twidth: 500px;\n}",config:'{"VariantModal":{"showHideProp":"showModal","override":false},"ForgotPasswordButton":{"showHideProp":"","override":false},"ForgotPassword":{"showHideProp":"","override":false,"renderListProp":""},"ResetPasswordModal":{"showHideProp":"showModal","override":true,"renderListProp":""}}',variants:[{name:"modal_opened",state:{showModal:!1,list:[1,2,3,4,5],ResetPasswordModal:[{title:"Forgot Password",footer:"Copyrigts",show:"sd"}],variant:"modal_opened"}},{name:"modal_closed",state:{showModal:!1,list:[1,2,3,4,5],ResetPasswordModal:[],variant:"modal_closed"}}]},{name:"ResetPasswordModal",markup:'<div class="modal">\n<header>\n  <h3>{state.title}</h3>\n    <button id="close" className="closeButton">x</button>\n</header>\n<section class="content"><ResetPasswordForm></ResetPasswordForm>\n</section>\n<footer>{state.footer}</footer>\n</div>',events:[{name:"onClick",reducer:'state.show = "sd";',publishable:!0,publishName:"onClose",id:"close"}],state:'{"title":"Forgot Password","footer":"Copyrigts"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}",variants:[]},{name:"Carousal",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    <div className="window">\n    \t<div className="content">\n          {<div>{state.items[state.current]}</div>}\n\t    </div>\n    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}",index:1,publishable:"",publishName:"",id:"previous"}],state:'{"variant":"initial layoutComponent","items":[1,2,3,4,5,6],"current":0}',style:".layoutComponent button{\n\tcolor:red;\n    height:100%;\n    width: 40px;\n}\n\n.layoutComponent {\n\twidth:100%;\n    height:220px;\n    position:relative;\n}\n\n.layoutComponent *{\n  \tbox-sizing: border-box;\n}\n\n.layoutComponent .window {\n\twidth: 50%;\n    height:220px;\n    position: relative;\n    margin:auto;\n\toverflow:hidden;\n}\n\n.layoutComponent .content{\n\theight:220px;\n}\n\n.layoutComponent .content > div{\n\tdisplay:inline-block;\n    height:200px;\n    width:220px;\n    background-color:green;\n    margin:7px;\n}\n\n.layoutComponent .left{\n\tposition:absolute;\n    left:0px;\n    top:0px;\n}\n\n.layoutComponent .right{\n\tposition:absolute;\n    right:0px;\n    top:0px;\n}",children:[],id:314,config:'{"ProductComponent":{"override":false}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}}],trueName:"Carousal"},{name:"Product",markup:'<div className={state.variant} style={state.style} id="product">\n\t{state.name}\n</div>\n',events:[{name:"onMouseEnter",reducer:'state.variant = "item on_hover";\nstate.name = "Buy now";',index:0,publishable:"",publishName:"",id:"product"},{name:"onMouseLeave",reducer:'state.variant = "item initial";\nstate.name = "Product one";',publishable:"",publishName:"",id:"product"}],state:'{\n\t"name" : "Product one",\n    "variant" : "item initial",\n    "style" : {\n       \t"backgroundImage": "$assets[\'1.jpeg\']"\n    }\n}',style:".item.initial {\n\tbackground-color:darkcyan;\n    background-size:contain;\n}\n\n.item.on_hover {\n\tbackground-color:teal;\n    background-size:auto;\n}\n\n.item{\n\theight:200px;\n    width:200px;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n}",children:[],id:949,config:"{}",variants:[{name:"on_hover",state:{name:"Buy now",variant:"on_hover"}},{name:"items on_hover",state:{name:"Buy now",variant:"items on_hover"}},{name:"item on_hover",state:{name:"Buy now",variant:"item on_hover"}},{name:"item initial",state:{name:"",variant:"item initial"}}],trueName:"Product"},{name:"Carousal_Single",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    <div className="content"><Product></Product>\n    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}\n\nstate.Product = [state.items[state.current]]\n",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}\n\nstate.Product = [state.items[state.current]]\n",index:1,publishable:"",publishName:"",id:"previous"}],state:'{\n    "variant":"initial Carousal_Single",\n    "items":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}\n    ],\n    "current":0,\n    "Product":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}}\n    ]\n}',style:".Carousal_Single button{\n\tcolor:red;\n    height:220px;\n    width: 40px;\n    display:inline-block;\n}\n\n.Carousal_Single {\n    height:220px;\n}\n\n.Carousal_Single *{\n  \tbox-sizing: border-box;\n}\n\n.Carousal_Single .content{\n\theight:200px;\n    min-width:200px;\n    display:inline-block;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n}\n",children:[],id:314,config:'{"ProductComponent":{"override":false},"Product":{"override":true}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}},{name:"initial Carousal_Single",state:'{"variant":"initial Carousal_Single","items":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}],"current":1,"Product":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}}]}'}],trueName:"Carousal_Single"},{name:"Carousal_Double",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    \t<div className="content"><Product></Product>\n\t    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}\n\nif(state.current === state.items.length-1){\n\tstate.Product = [\n    \tstate.items[state.current],\n        state.items[0]\n    ]\n}\nelse{\n\tstate.Product = [\n    \tstate.items[state.current],\n        state.items[state.current+1]\n    ]\n}\n\n",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}\n\nif(state.current === 0){\n\tstate.Product = [\n    \tstate.items[state.items.length-1],\n        state.items[state.current]\n    ]\n}\nelse{\n\tstate.Product = [\n    \tstate.items[state.current-1],\n        state.items[state.current]\n    ]\n}",index:1,publishable:"",publishName:"",id:"previous"}],state:'{\n    "variant":"initial Carousal_Double",\n    "items":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}\n    ],\n    "current":0,\n    "Product":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},\n        {"name":"Product two","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}}\n    ]\n}',style:".Carousal_Double button{\n\tcolor:red;\n    height:220px;\n    width: 40px;\n    display:inline-block;\n}\n\n.Carousal_Double {\n    height:220px;\n}\n\n.Carousal_Double *{\n  \tbox-sizing: border-box;\n}\n\n.Carousal_Double .content{\n\theight:200px;\n    min-width:400px;\n    display:inline-block;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n}\n\n.Carousal_Double .content > div{\n\tdisplay: inline-block;\n}\n\n\n",children:[],id:314,config:'{"ProductComponent":{"override":false},"Product":{"override":true}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}},{name:"initial Carousal_Double",state:'{"variant":"initial Carousal_Double","items":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}],"current":5,"Product":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}]}'}],trueName:"Carousal_Double"},{name:"Carousal_Multi",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    \t<div  style={state.contentStyle} className="content">\n        \t<Product></Product>\n\t    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:'if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}\n\nstate.contentStyle.left = -(state.current*200) + "px"',index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:'if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}\n\nstate.contentStyle.left = -(state.current*200) + "px"',index:1,publishable:"",publishName:"",id:"previous"}],state:'{\n    "variant":"initial Carousal_Double",\n    "items":[\n        \n    ],\n    "current":0,\n    "Product":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}],\n        "contentStyle" : {\n        \t"left": "0px"\n        }\n}',style:".Carousal_Double button{\n\tcolor:red;\n    height:220px;\n    width: 40px;\n    display:inline-block;\n}\n\n.Carousal_Double {\n    height:220px;\n    position: relative;\n}\n\n.Carousal_Double *{\n  \tbox-sizing: border-box;\n}\n\n.Carousal_Double .content{\n\theight:200px;\n    width: 1200px;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n    position: absolute;\n}\n\n.Carousal_Double .content > div{\n\tdisplay: inline-block;\n}\n\n.Carousal_Double #previous {\n\tposition: absolute;\n    left: 0px;\n    top:0px;\n    z-index: 1;\n}\n\n.Carousal_Double #next {\n\tposition: absolute;\n    right: 0px;\n    top:0px;\n}\n\n",children:[],id:314,config:'{"ProductComponent":{"override":false},"Product":{"override":true}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}},{name:"initial Carousal_Double",state:'{"variant":"initial Carousal_Double","items":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}],"current":5,"Product":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}]}'}],trueName:"Carousal_Multi"},{name:"Carousal_Circleback",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    \t<div style={state.contentStyle} className="content"><Product></Product>\n\t    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"\nstate.Product.push(state.Product.shift())\n",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"\nstate.Product.unshift(state.Product.pop())\n",index:1,publishable:"",publishName:"",id:"previous"}],state:'{\n    "variant":"initial Carousal_Double",\n    "items":[\n        \n    ],\n    "current":0,\n    "Product":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}],\n        "contentStyle" : {\n        \t"left": "0px"\n        }\n}',style:".Carousal_Double button{\n\tcolor:red;\n    height:220px;\n    width: 40px;\n    display:inline-block;\n}\n\n.Carousal_Double {\n    height:220px;\n    position: relative;\n}\n\n.Carousal_Double *{\n  \tbox-sizing: border-box;\n}\n\n.Carousal_Double .content{\n\theight:200px;\n    width: 1200px;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n    position: absolute;\n}\n\n.Carousal_Double .content > div{\n\tdisplay: inline-block;\n}\n\n.Carousal_Double #previous {\n\tposition: absolute;\n    left: 0px;\n    top:0px;\n    z-index: 1;\n}\n\n.Carousal_Double #next {\n\tposition: absolute;\n    right: 0px;\n    top:0px;\n}\n\n",children:[],id:314,config:'{"ProductComponent":{"override":false},"Product":{"override":true}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}},{name:"initial Carousal_Double",state:'{"variant":"initial Carousal_Double","items":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}],"current":5,"Product":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}]}'}],trueName:"Carousal_Circleback"}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nameToURL=function(e){"string"!=typeof e&&console.error("state should be a string");if(window.assets&&window.assets.length>0)for(var t=function(){var t=e.split("['")[1].split("]")[0].split("");t.pop(),t=t.join("");var n=window.assets.find(function(e){return e.name===t});e=e.replace("$assets['"+t+"']","url("+getURL(n.blob,t)+")")};e.includes("$assets");)t();return e},t.urlToName=function(e){var t=function(){var t=e.split("url(")[1].split(")")[0],n=window.assets.find(function(e){return e.url===t});n&&(e=e.replace("url("+n.url+")","$assets['"+n.name+"']"))};for(;e.includes(window.location.host);)t();return e},t.hasAssets=function(e){return e.includes("$assets")}},function(e,t,n){var o=n(44);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".hint{\n    height:100px;\n    width:100%;\n    border: 1px dashed green;\n}\n\n.hintDragOver{\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n    from {\n        border: 1px dashed green;\n    }\n  \n    to {\n        border: 2px dashed green;\n    }\n  }\n\n.hintNoDrop{\n    animation: blinkRed 1s infinite;\n}\n\n@keyframes blinkRed {\n    from {\n        border: 1px dashed red;\n    }\n  \n    to {\n        border: 2px dashed red;\n    }\n  }",""])},function(e,t,n){var o=n(46);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".thumbnailView {\n    zoom: 0.7;\n}\n\n.thumbnailView > div {\n    pointer-events: none;\n}",""])},function(e,t,n){var o=n(48);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"/* Show green when component is selected*/\n\n.selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n/* Show dark background to components */\n\n.background {\n    background: rgb(64, 64, 64);\n    border: 1px solid #333333;\n}\n\n/* Show some spacing before the component name */\n\n.component .componentName{\n    padding:7px;\n}\n\n.component {\n    display:flex;\n}\n\n/* Show comopnent preview onDrag*/\n\n.dragStarted span:not(.componentName){\n    display:none;\n}\n\n.hidden{\n    display: none;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(50);var s=n(3),l=n(10);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,s.readComponent)(n.props.name);return n.state={trueName:o?o.name:"",name:o?o.name:"",markup:o?o.markup:"",state:o?o.state:"",style:o?o.style:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"saveElement",value:function(){this.props.onSave({trueName:this.state.trueName,name:this.state.name,markup:this.state.markup,style:this.state.style,state:this.state.state})}},{key:"saveName",value:function(e){this.setState({name:e.currentTarget.value})}},{key:"render",value:function(){var e=this,t=(this.state.name,this.state.markup),n=this.state.style,o=this.state.state;return i.default.createElement("div",{className:"container editor-tab"},i.default.createElement("button",{onClick:this.saveElement.bind(this),id:"save"},i.default.createElement("i",{className:"fas fa-save"}),"Save & close"),i.default.createElement("div",null,i.default.createElement("div",{className:"editor name"},i.default.createElement("div",{className:"title"},"Component Name"),i.default.createElement("input",{type:"text",placeholder:"Enter element name",value:this.state.name,onChange:this.saveName.bind(this),id:"elementName"})),i.default.createElement("div",{className:"editor markup"},i.default.createElement("div",{className:"title"},"Component Markup"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:t,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({markup:o})}})),i.default.createElement("div",{className:"editor css"},i.default.createElement("div",{className:"title"},"Component CSS"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:n,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({style:o})}})),i.default.createElement("div",{className:"editor state"},i.default.createElement("div",{className:"title"},"Component State"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:o,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({state:o})}}))))}}]),t}();t.default=u},function(e,t,n){var o=n(51);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".editor-tab {\n    width: 100vw;\n    animation: slide-up 0.2s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\ninput.folder:read-only {\n    pointer-events: none;\n}\n\n\n.editor-tab button {\n    position: absolute;\n    top: -5%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}\n\n.showEditor{\n    margin-bottom:30px;\n}\n\n.editor.name{\n    width:10%;\n}\n\n.editor{\n    width: 29%;\n    display: inline-block;\n    margin: 5px;\n    margin-top: 2px;\n}\n",""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=p(a),i=p(n(54)),s=p(n(57)),l=p(n(58));n(63);var u=n(65),c=n(66),d=n(3);function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state=Object.assign({},n.props),n.state.selectedTag=n.props.selectedTag,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.component;if(0==this.state.components.length)return r.default.createElement("ul",{className:"container events-tab"},r.default.createElement("div",{className:"title"},"Events"),r.default.createElement("p",null,'Looks like you do not have any Web component created. Type some "html" on the right "Editor" tab'));if(void 0===t.name&&0!=this.state.components.length)return r.default.createElement("ul",{className:"container events-tab"},r.default.createElement("div",{className:"title"},"Events"),r.default.createElement("p",null,"Looks like you have not selected any component. Click on any of the component in the left pane."));var n=(0,c.getNodeTree)(t,t.markup,t.style,JSON.parse(t.state),t.events);if(void 0!==n.error)return n.error;if(void 0===n.result&&0!=this.state.components.length)return r.default.createElement("ul",{className:"container events-tab"},r.default.createElement("div",{className:"title"},"Events"));var o=this.state.selectedTag||"",a=void 0,p=void 0,f=[];if(o.includes("child-component-")){var m=(0,d.readData)("ui-editor"),h=o.split("child-component-")[1],v=m.find(function(e){return e.name===h});f=v.events.filter(function(e){return!0===e.publishable}).map(function(e){return e.publishName});var b=t.events.filter(function(e){return f.find(function(t){return t===e.name&&e.id===v.name})});b=b.map(function(t,n){return r.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:f,onSave:u.updateEvent.bind(e),deleteEvent:u.deleteEvent.bind(e)})}),a=o?b:null,p=r.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),onChange:u.updateConfiguration.bind(this),childName:h,parent:t})}else{var y=t.events.map(function(t,n){return r.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:f,onSave:u.updateEvent.bind(e),deleteEvent:u.deleteEvent.bind(e)})});a=o?y.filter(function(e){return o.includes(e.props.event.id)}):null}return r.default.createElement("ul",{className:"container events-tab"},r.default.createElement("div",{className:"tags"},r.default.createElement(s.default,{node:n.result,onSelectedTagChanged:u.selectedTagChanged.bind(this)})),p,a&&a.length>0?r.default.createElement("div",null,r.default.createElement("div",{className:"title"},"Existing Events"),a):null,o?r.default.createElement("div",null,r.default.createElement("div",{className:"title"},"Add Event"),r.default.createElement(l.default,{key:t.events.length,eventNames:f,selectedTagID:o,onSave:u.updateEvent.bind(this)})):null)}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(55);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=JSON.parse(n.props.parent.config)[n.props.childName]||{override:!1};return n.state={override:o.override},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"toggelOverride",value:function(){this.setState({override:!this.state.override}),this.props.onChange({config:{override:!this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"saveConfig",value:function(){this.props.onChange({config:{override:this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("div",{className:"title"},"Child Configurations"),i.default.createElement("div",{className:"spacing"},i.default.createElement("label",null,"Override state"),i.default.createElement("input",{type:"checkbox",onChange:this.toggelOverride.bind(this),checked:this.state.override?"checked":""})))}}]),t}();t.default=s},function(e,t,n){var o=n(56);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.configurator {\n    background: rgb(64, 64, 64);\n    margin-top: 10px;\n    padding: 5px;\n}\n\n.spacing{\n    margin: 10px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=(o=i)&&o.__esModule?o:{default:o};var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),r(t,[{key:"render",value:function(){var e=this,n=this.props.node;if(!n)return s.default.createElement("span",null,"null");if("string"==typeof n)return s.default.createElement("li",null,n);var o=n.props.id?"-"+n.props.id:"";if(n.props&&Array.isArray(n.props.children)){var r=n.props.children.map(function(n,o){return s.default.createElement(t,{key:o,node:n,onSelectedTagChanged:e.props.onSelectedTagChanged})});return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:n.type+o}),n.type+o),r)}if("object"===a(n.props.children)){var i=n.props.children;return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:(n.type.name||n.type)+o}),n.type.name||n.type),s.default.createElement(t,{key:index,node:i,onSelectedTagChanged:this.props.onSelectedTagChanged}))}return"function"==typeof n.type?s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:"child-component-"+n.type.name,onChange:this.props.onSelectedTagChanged}),n.type.name)):s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:n.type+o,onChange:this.props.onSelectedTagChanged}),n.type+o))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(59);var s=n(10),l=n(61),u=n(62);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.event?n.props.event.name:"",reducer:n.props.event?n.props.event.reducer:"",publishable:n.props.event?n.props.event.publishable:"",publishName:n.props.event?n.props.event.publishName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"render",value:function(){var e=this;if(void 0===this.props.selectedTagID)return"Select ID";var t=this.state.publishable?i.default.createElement("input",{type:"text",onChange:l.updatePublishName.bind(this),value:this.state.publishName,placeholder:"Enter event publish name for other components to subscribe to"}):null,n=this.props.eventNames.map(function(e){return i.default.createElement("option",{value:e})});return i.default.createElement("div",{className:"event"},i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Event name"),i.default.createElement("input",{list:"events",type:"text",onChange:l.updateEventName.bind(this),value:this.state.name,title:"Event Name"}),i.default.createElement("datalist",{id:"events"},n)),i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Publishable"),i.default.createElement("input",{type:"checkbox",onChange:l.updateEventType.bind(this),checked:this.state.publishable?"checked":""}),t),i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Event reducer"),i.default.createElement(s.UnControlled,{value:this.state.reducer,autoCursor:!1,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0},onChange:function(t,n,o){e.setState({reducer:o})}})),i.default.createElement("div",null,i.default.createElement("button",{onClick:u.publishEvent.bind(this),id:"saveEvent"},i.default.createElement("i",{className:"fas fa-save"}),"Save"),i.default.createElement("button",{onClick:u.deleteEvent.bind(this),id:"deleteEvent"},i.default.createElement("i",{className:"fas fa-trash"}),"Delete")))}}]),t}();t.default=c},function(e,t,n){var o=n(60);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.event input {\n    margin-left:5px;\n    width:150px;\n}\n\n.event textarea {\n    margin-top: 8px;\n    width: 300px;\n}\n\n.input {\n    padding: 5px;\n}",""])},function(e,t,n){"use strict";function o(e){this.setState({publishable:e.currentTarget.checked})}var a,r,i;e.exports=(i=o,(r="updateEventType")in(a={updateEventName:function(e){this.setState({name:e.target.value})},updateEventType:o,updatePublishName:function(e){this.setState({publishName:e.target.value})}})?Object.defineProperty(a,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):a[r]=i,a)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.publishEvent=function(){this.props.onSave({name:this.state.name,reducer:this.state.reducer,index:this.props.index,publishable:this.state.publishable,publishName:this.state.publishName})},t.deleteEvent=function(){this.props.deleteEvent(this.props.index)}},function(e,t,n){var o=n(64);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".events {\n    border:1px solid black;\n    padding: 5px;\n}\n\n.error {\n    color: red;\n}\n\n.tags.tags ul {\n    border: 0px;\n    margin-left: 30px;\n    padding:5px;\n}\n\n.tags ul:first-child {\n    margin-left: -2px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));this.state.selectedTag.includes("child-component-")?e.id=this.state.selectedTag.split("child-component-")[1]:e.id=this.state.selectedTag.split("-")[1];if(void 0===e.index)t.events.push(e);else{var n=t.events.findIndex(function(t){return t.id===e.id});-1==n&&console.error("Changing event name will not help. Create a new event"),t.events[n]=e}this.props.onEventsUpdate(t.events)},t.selectedTagChanged=function(e){this.setState({selectedTag:e.currentTarget.value})},t.deleteEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));t.events=t.events.splice(e,1),this.props.onEventsUpdate(t.events)},t.updateConfiguration=function(e){this.props.onConfigUpdate(e)}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNodeTree=getNodeTree;var _react=__webpack_require__(0),_react2=_interopRequireDefault(_react),_Runtime=__webpack_require__(4);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function getNodeTree(element,jsx,style,state,events){var result=void 0,error=void 0;try{var nestedComponents=(0,_Runtime.getNestedComponents)(element);nestedComponents.length>0&&(0,_Runtime.saveComponentsToWindow)(nestedComponents),result=eval(Babel.transform(jsx,{presets:["react"]}).code)}catch(e){error=e}finally{return _defineProperty({error:error,result:result},"result",result)}}window.React=_react2.default,window.Component=_react2.default.Component},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=l(a);n(68);var i=l(n(5)),s=n(3);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component,display:"mobile"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"refresh",value:function(){this.setState({component:(0,s.readComponent)(this.state.component.name)})}},{key:"switchTablet",value:function(){this.setState({display:"tablet"})}},{key:"switchMobile",value:function(){this.setState({display:"mobile"})}},{key:"switchDesktop",value:function(){this.setState({display:"desktop"})}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random());return r.default.createElement("div",{className:"container preview "+this.state.display},r.default.createElement("div",{className:"title"},"Preview",r.default.createElement("div",{className:"Controls"},r.default.createElement("button",{onClick:this.switchTablet.bind(this)},r.default.createElement("i",{className:"fa fa-tablet-alt"})),r.default.createElement("button",{onClick:this.switchMobile.bind(this)},r.default.createElement("i",{className:"fa fa-mobile-alt"})),r.default.createElement("button",{onClick:this.switchDesktop.bind(this)},r.default.createElement("i",{className:"fa fa-desktop"})))),r.default.createElement("div",{className:"dynamicComponent"},r.default.createElement(i.default,{onSave:this.props.onSave,key:e,component:this.state.component})))}}]),t}();t.default=u},function(e,t,n){var o=n(69);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".container{\n    padding: 5px;\n    background: #2C3134;\n}\n\n/* Center align the title */\n\n.preview .title{\n    text-align: center;\n}\n\n/* Fix the height and width of the preview - default*/\n\n.preview .dynamicComponent {\n    width:30vw;\n    height: 600px;\n    overflow:scroll;\n}\n\n/* Fix the height and width of preview - mobile display */\n\n.preview.mobile .dynamicComponent {\n    width:479px;\n    transition: width .2s;\n}\n\n/* Fix the height and width of preview - tablet display */\n\n.preview.tablet .dynamicComponent{\n    width:767px;\n    transition: width .2s;\n}\n\n/* Fix the height and width of preview - desktop display */\n\n.preview.desktop .dynamicComponent {\n    width:991px;\n    transition: width .2s;\n}\n\n/** Highlight mobile when display mode is mobile */\n\n.preview.mobile .fa-mobile-alt {\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n}\n\n/** Highlight tablet when display mode is tablet */\n\n.preview.tablet .fa-tablet-alt {\n\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n}\n\n/** Highlight desktop when display mode is desktop */\n\n.preview.desktop .fa-desktop {\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=u(a);n(71);var i=u(n(73)),s=n(76),l=n(77);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={class:"drop_zone",imageURL:"",assets:[],selectedAsset:""},n.writeToDB=l.writeToDB.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"appendToBody",value:function(e){var t=this.result,n=document.createElement("div");n.innerHTML="Loaded : "+e.name+" size "+e.size+" B",document.body.appendChild(n);var o=document.createElement("img");o.file=e,o.src=t,n.appendChild(o)}},{key:"updatedSelected",value:function(e){var t=e.target.getAttribute("data-name");this.setState({selectedAsset:t})}},{key:"render",value:function(){var e=this,t=this.state.assets.map(function(t){return r.default.createElement(i.default,{asset:t,selected:e.state.selectedAsset,onSelected:e.updatedSelected.bind(e)})});return r.default.createElement("ul",{className:"assets"},r.default.createElement("button",{onClick:l.fetchFromDB.bind(this)},"Load Assets"),r.default.createElement("div",{className:this.state.class,onDrop:s.dropHandler.bind(this),onDragOver:s.dragOverHandler.bind(this),onDragLeave:s.dragLeaveHandler.bind(this)},r.default.createElement("p",null,"Drag one or more files to this Drop Zone ...")),r.default.createElement("div",null,this.state.selectedAsset.name),t)}}]),t}();t.default=c},function(e,t,n){var o=n(72);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n/* Show dashed outline for the drop zone.*/\n\n.drop_zone {\n  border: 1px lightgray dashed;\n  width:  200px;\n  height: 100px;\n}\n\n/* Show dashed outline during drag over. */\n\n.drag_over {\n  border: 2px lightgray dashed;\n  width:  200px;\n  height: 100px;\n}\n\n/* Give some spacing around asset name. */\n\n.assets p{\n  padding:15px; \n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(74);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("p",{"data-name":this.props.asset.name,onClick:this.props.onSelected},this.props.asset.name))}}]),t}();t.default=s},function(e,t,n){var o=n(75);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n/* Show selected asset with a light dashed outline */\n\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){var t=this;e.preventDefault(),[].forEach.call(e.dataTransfer.files,function(e){var n=new FileReader;n.readAsDataURL(e),n.onloadend=function(t,n){this.appendToBody(e),this.writeToDB(t.target.result,e.name)}.bind(t)}),this.setState({class:"drop_zone"})},t.dragOverHandler=function(e){console.log("File(s) in drop zone"),this.setState({class:"drag_over"}),e.preventDefault()},t.dragLeaveHandler=function(e){this.setState({class:"drop_zone"})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.writeToDB=function(e,t){var n=this;window.iDB.get(t).then(function(e){document.createElement("img").href=e.result,n.setState({imageURL:e.result})}),window.iDB.put({name:t,result:e})},t.fetchFromDB=function(){var e=this;window.iDB.getAll().then(function(t){window.assets=t.map(function(e){return{name:e.name,blob:e.result,url:getURL(e.result)}}),e.setState({assets:window.assets})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o},s=n(79);n(85);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={exportType:"SIMPLE"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"onExportTypeChanged",value:function(e){this.setState({exportType:e.target.value})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"logCode",checked:"logCode"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS - logs output to your console.")),".",i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"STORYBOOK",checked:"STORYBOOK"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS with Storybook - Codebase"))),i.default.createElement("button",{onClick:s.onExport.bind(null,this.state.exportType,this.props.component.name)},i.default.createElement("i",{className:"fas fa-file-export"}),"Export"))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onExport=function(e,t){switch(e){case"SIMPLE":(0,a.logCode)(t);break;case"STORYBOOK":(0,o.exportSeparateFile)(t);break;default:(0,a.logCode)(t)}};var o=n(80),a=n(84)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportSeparateFile=function(e){var t=(0,i.readData)("ui-editor").find(function(t){return t.name.includes(e)}),n=u((0,r.getNestedComponents)(t)),p=(n=function(e){return e.forEach(function(e){0===e.variants.length&&e.variants.push({name:"initial",state:JSON.parse(e.state)})}),e}(n)).map(function(e){var t=(0,r.getChildren)(e).map(function(e){return"import "+e+' from "./'+e+'";'}).join("\n");return{name:e.name+".js",content:d+"\n"+t+"\n "+c((0,a.convertToReact)(e))+" \nexport default "+e.name+";"}}),f=n.map(function(e){return{name:e.name+".stories.js",content:(0,o.convertToReactStories)(e)}});(0,s.zipFiles)([].concat(l(p),l(f)))};var o=n(81),a=n(6),r=n(4),i=n(3),s=n(82);function l(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function u(e){return[].concat(l(new Set(e.map(function(e){return e.name})))).map(function(e){return components.find(function(t){return t.name===e})})}var c=function(e){return e.replace("(","").replace("})","}")},d=" /* eslint-disable */\nimport React, {Component} from 'react';\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReactStories=function(e){return"import React from 'react';\n\n    import "+e.name+' from "./'+e.name+"\";\n    \n    export default {\n        title: '"+e.name+"',\n        component: "+e.name+"\n    }\n    \n    "+e.variants.map(function(t){return"export const "+t.name+" = () => <"+e.name+" state={"+JSON.stringify(t.state)+"}></"+e.name+">;"}).join("\n\n")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.zipFiles=function(e){var t=new JSZip,n=t.folder("src");e.forEach(function(e){n.file(e.name,e.content)}),t.generateAsync({type:"blob"}).then(function(e){(0,o.download)(e,"archive.zip")})};var o=n(83)},function(e,t,n){"use strict";function o(e,t){var n=document.createElement("a");n.download=t,n.href=window.URL.createObjectURL(e),n.onclick=function(e){var t=this;setTimeout(function(){window.URL.revokeObjectURL(t.href)},1500)},n.click(),n.remove()}Object.defineProperty(t,"__esModule",{value:!0}),t.downloadFile=function(e,t,n){n=n||"text/plain",o(new Blob([t],{type:n}),e)},t.download=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logCode=function(e){var t=(0,r.readData)("ui-editor"),n=t.find(function(t){return t.name.includes(e)}),i=(0,o.getNestedComponents)(n),s=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(i.map(function(e){return e.name})))).map(function(e){return t.find(function(t){return t.name===e})}),l=s.map(a.convertToReact).map(function(e){return e.replace("(","").replace("})","}")}).reverse().join("");console.log(l)};var o=n(4),a=n(6),r=n(3)},function(e,t,n){var o=n(86);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o},s=n(3);n(88);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"refreshToPrevious",value:function(){(0,s.popHistory)()}},{key:"render",value:function(){return i.default.createElement("ul",null,i.default.createElement("button",{onClick:this.refreshToPrevious.bind(this)},"Go back"))}}]),t}();t.default=l},function(e,t,n){var o=n(89);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=s(a),i=s(n(91));function s(e){return e&&e.__esModule?e:{default:e}}n(94);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=n.props.component;return n.state={variants:o.variants,component:o},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"deleteVariant",value:function(e){var t=Array.from(this.state.variants),n=t.findIndex(function(t){return t.name.includes(e.name)});-1!==n&&t.splice(n,1);var o=JSON.parse(JSON.stringify(this.state.component));o.variants=t,this.props.onUpdate(o)}},{key:"render",value:function(){var e=this,t=this.state.component,n=this.state.variants;return""==t.name?r.default.createElement("div",{className:"container variants"},r.default.createElement("div",{className:"title"},"Variants"),r.default.createElement("p",null,"No component selected")):t.variants?(n=n.map(function(n,o){return r.default.createElement(i.default,{index:o,state:n.state,name:n.name,component:t,deleteVariant:e.deleteVariant.bind(e)})}),r.default.createElement("div",{className:"container variants"},r.default.createElement("div",{className:"title"},"Variants"),r.default.createElement("div",{className:"variantsList"},n))):r.default.createElement("div",{className:"container variants"},r.default.createElement("div",{className:"title"},"Variants"),r.default.createElement("p",null,"No variants found."))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=s(a),i=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}n(92);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.name||"",state:n.props.state},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"deleteVariant",value:function(){var e=this.state;this.props.deleteVariant(e)}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random()),t=JSON.parse(JSON.stringify(this.props.component));return""==t.name?r.default.createElement("div",null):(t.state=this.props.state,console.log(t.state),r.default.createElement("div",{className:"variant"},r.default.createElement("div",{className:"variant-controls"},r.default.createElement("input",{type:"text",value:this.state.name,disabled:!0}),r.default.createElement("button",{onClick:this.deleteVariant.bind(this)},r.default.createElement("i",{className:"fas fa-trash"}),"Delete")),r.default.createElement("div",{className:"view"},r.default.createElement(i.default,{key:e,component:t}))))}}]),t}();t.default=l},function(e,t,n){var o=n(93);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".variant {\n    border: 1px dotted black;\n    padding:10px;\n    margin-bottom: 10px;\n}\n\n.variant .view > div{\n    pointer-events: none;\n    zoom: .3;\n}\n\n\n.variant-controls input {\n    width: 80px;\n}",""])},function(e,t,n){var o=n(95);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".variantsList{\n    overflow: scroll;\n    max-height: 86%;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(97);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"center"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(98);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".center{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(100);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"Bottom"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(101);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".bottom{\n    position: absolute;\n    bottom:0px;\n    width: 100vw;\n    animation: slide-up 0.4s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(103);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"leftItem"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(104);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".leftItem{\n    position: absolute;\n    left:0px;\n    animation: slide-to-screen 0.7s ease;\n}\n\n@keyframes slide-to-screen {\n    0% {\n        left:-300px;\n    }\n    100% {\n        left: 0px;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(106);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selected:n.props.selected},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"updateSelectedTab",value:function(e){this.setState({selected:e.target.innerText})}},{key:"render",value:function(){var e=this;return this.state.selected,this.props.selected,i.default.createElement("div",{className:"RightItem container"},this.props.children.map(function(t){return i.default.createElement("div",{className:t.props.title===e.state.selected?"tabs title":"tabs",onClick:e.updateSelectedTab.bind(e)},t.props.title)}),i.default.createElement("div",{className:"tab-content"},this.props.children.filter(function(t){return t.props.title===e.state.selected})))}}]),t}();t.default=s},function(e,t,n){var o=n(107);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".RightItem{\n    position: absolute;\n    right:0px;\n    animation: slide-right 0.2s ease;\n    height: 100%;\n    overflow: scroll;\n    width:400px;\n}\n\n@keyframes slide-right {\n    0% {\n        opacity: 0;\n        right:-100px;\n    }\n    100% {\n        opacity: 1;\n        right: 0px;\n    }\n}\n\n.tab-content{\n    height:91%;\n    border: 1px #404040 solid;\n}\n\n.tab-content ul {\n    padding: 12px;\n}\n\n.tabs {\n    display: inline-block;\n    cursor: default;\n    \n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    padding: 5px;\n    font-size: 12px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=(o=r)&&o.__esModule?o:{default:o};n(109);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),a(t,[{key:"closeContextMenu",value:function(){this.props.onMessage("HIDE")}},{key:"render",value:function(){return i.default.createElement("div",{className:"ContextMenu",style:this.props.position},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(110);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,a);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".ContextMenu{\n    position: absolute;\n    background-color: rgb(64, 64, 64);\n    box-shadow: 0px 0px 30px black;\n    border-radius: 5px;\n    padding:0px;\n}\n.contextMenuOptions li {\n    padding: 15px;\n    user-select: none;\n}\n\n.contextMenuOptions{\n    padding-left:0px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=this,n=Object.assign({},this.state).components;n.find(function(e){return e.name===t.state.selectedComponent.name}).events=e,this.setState({elements:n}),(0,o.writeData)("ui-editor",n)},t.updateConfig=function(e){var t=Object.assign({},this.state).components,n=t.find(function(t){return t.name===e.parentName}),a=t.find(function(t){return t.name===e.childName});n.state=JSON.parse(n.state),void 0===n.config?n.config={}:n.config=JSON.parse(n.config);n.config[a.name]=e.config,n.config[a.name].override?n.state[a.name]=[JSON.parse(a.state)]:delete n.state[a.name];n.state=JSON.stringify(n.state),n.config=JSON.stringify(n.config),this.setState({elements:t}),(0,o.writeData)("ui-editor",t)},t.saveElement=function(e){var t=this,n=Array.from(this.state.components),r=void 0,i=n.find(function(t){return t.name===e.name})||n.find(function(t){return t.name===e.trueName}),s=n.find(function(e){return e.name===t.state.selectedComponent.name}),l=n.findIndex(function(e){return e.name===t.state.selectedComponent.name});if(i){var u=s;u=Object.assign(u,e),n[l]=u}else r={name:e.name,markup:e.markup,events:[],state:e.state||"{}",style:e.style,children:[],id:Math.ceil(1e3*Math.random()),config:"{}",variants:[]},n.push(r),l=n.length-1,this.state.folders[0].contents.push(e.name);if(e.trueName!==e.name){var c=(0,a.findParent)(e.trueName,this.state.folders[0]),d=c.contents.findIndex(function(t){return t===e.trueName});c.contents.splice(d,1,e.name)}this.setState({elements:n,element:{name:e.name,markup:e.markup,style:e.style,state:e.state,events:e.events||[]},showEditor:!1,folders:this.state.folders}),(0,o.writeData)("folders",this.state.folders),(0,o.writeData)("ui-editor",n)},t.updateSelectedComponent=function(e,t){var n=this.state.components.find(function(t){return t.name===e});this.setState({selectedComponent:n})};var o=n(3),a=n(11)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.onDeleteComponent=function(e){var t=this.state.selectedComponent.name,n=(0,r.findParent)(t,this.state.folders[0]),o=n.contents.findIndex(function(e){return e===t});n.contents.splice(o,1);var i=Array.from(this.state.components),s=i.findIndex(function(e){return e.name===t});i.splice(s,1),this.setState({components:i,folders:this.state.folders}),(0,a.writeData)("ui-editor",i),(0,a.writeData)("folders",this.state.folders)},t.onExtendComponent=function(){var e=JSON.parse(JSON.stringify(this.state.selectedComponent)),t=(0,r.findParent)(e.name,this.state.folders[0]);e.name=e.name+"_copy",t.contents.push(e.name),components.push(e),this.setState({components:components,folders:this.state.folders}),(0,a.writeData)("ui-editor",components),(0,a.writeData)("folders",this.state.folders)},t.onDeleteFolder=function(e,t){var n,a=Array.from(this.state.folders),i=a[0],s=(0,r.findParentFolder)(t,a[0]),l=(0,r.findFolder)(t,a[0]);switch(e){case"FOLDER_RETAIN_CONTENTS":(n=i.contents).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(l.contents));var u=s.contents.findIndex(function(e){return"object"===(void 0===e?"undefined":o(e))&&e.name===t});s.contents.splice(u,1),this.updateFolders(a)}};var a=n(3),r=n(11)},function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),r=E(a),i=E(n(13));n(17);var s=E(n(20)),l=E(n(49)),u=E(n(53)),c=E(n(67)),d=E(n(70)),p=E(n(78)),f=E(n(87)),m=E(n(90)),h=E(n(96)),v=E(n(99)),b=E(n(102)),y=E(n(105)),g=E(n(108)),w=n(111),_=n(3),x=n(112);function E(e){return e&&e.__esModule?e:{default:e}}var C=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,_.readData)("ui-editor");return n.state={components:o,selectedTag:"",component:{name:"",markup:"",style:"",state:"{ }",events:[]},selectedComponent:"",folders:(0,_.readData)("folders"),showEditor:!1,selectedTab:"Events"},n.updateConfig=w.updateConfig.bind(n),n.updateEvent=w.updateEvent.bind(n),n.saveElement=w.saveElement.bind(n),n.updateSelectedComponent=w.updateSelectedComponent.bind(n),document.onkeydown=function(e){e.altKey&&69==e.keyCode&&this.setState({showEditor:!this.state.showEditor}),e.altKey&&82==e.keyCode&&this.setState({openRight:!this.state.openRight,selectedTab:"Events"}),e.altKey&&86==e.keyCode&&this.setState({openRight:!this.state.openRight,selectedTab:"Variants"})}.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"updatePreview",value:function(e){this.setState({previewComponent:e})}},{key:"updateFolders",value:function(e){this.setState({folders:e}),(0,_.writeData)("folders",e)}},{key:"openEditor",value:function(){this.setState({showEditor:!0})}},{key:"openExportTab",value:function(e){this.setState({selectedTab:"Export"})}},{key:"onShowContextMenu",value:function(e){if(e.target.classList.contains("component")||e.target.classList.contains("componentName"))this.state.contextMenuChildren=r.default.createElement("ul",{className:"contextMenuOptions"},r.default.createElement("li",{onClick:x.onDeleteComponent.bind(this)},"Delete Component"),r.default.createElement("li",{onClick:this.openExportTab.bind(this)},"Export Component"),r.default.createElement("li",{onClick:x.onExtendComponent.bind(this)},"Extend Component"));else if(e.target.classList.contains("fa-folder-open")||e.target.classList.contains("fa-folder")){var t=e.target.parentElement.getAttribute("data-folder-name");this.state.contextMenuChildren=r.default.createElement("ul",{className:"contextMenuOptions"},r.default.createElement("li",{onClick:x.onDeleteFolder.bind(this,"FOLDER_RETAIN_CONTENTS",t)},"Delete folder and retain contents"),r.default.createElement("li",{onClick:x.onDeleteFolder.bind(this,"RETAIN_FOLDER_DELETE_CONTENTS",t)},"Keep Folder and delete contents"),r.default.createElement("li",{onClick:x.onDeleteFolder.bind(this,"ENTIRE_FOLDER",t)},"Delete Folder and contents"),r.default.createElement("li",{onClick:this.openExportTab.bind(this)},"Export Folder"))}this.setState({showContextMenu:!0,contextMenuPosition:{top:e.clientY+"px",left:e.clientX+"px"}}),e.preventDefault()}},{key:"hideContextMenu",value:function(){this.state.showContextMenu&&this.setState({showContextMenu:!1})}},{key:"onContextMenuMessage",value:function(e){switch(e){case"HIDE":this.setState({showContextMenu:!1})}}},{key:"render",value:function(){var e=this,t=this.state.selectedComponent||this.state.component;return r.default.createElement("div",{onContextMenu:this.onShowContextMenu.bind(this),onClick:this.hideContextMenu.bind(this)},r.default.createElement(b.default,null,r.default.createElement(s.default,{components:this.state.components,folders:this.state.folders,selectedComponent:this.state.selectedComponent,title:"Components",showControls:!0,key:Math.ceil(1e3*Math.random()),onOpenEditor:this.openEditor.bind(this),onSelection:this.updateSelectedComponent,onFoldersUpdate:this.updateFolders.bind(this)})),r.default.createElement(h.default,null,r.default.createElement(c.default,{key:Math.ceil(1e3*Math.random()),component:t,title:"Preview",onSave:this.saveElement})),this.state.selectedComponent&&this.state.openRight?r.default.createElement(y.default,{selected:this.state.selectedTab},r.default.createElement(u.default,{key:Math.ceil(1e3*Math.random()),component:t,selectedTag:this.state.selectedTag,components:this.state.components,onEventsUpdate:this.updateEvent,onConfigUpdate:this.updateConfig,title:"Events"}),r.default.createElement(f.default,{title:"History"}),r.default.createElement(d.default,{title:"Assets"}),r.default.createElement(p.default,{title:"Export",component:t}),r.default.createElement(m.default,{title:"Variants",key:Math.ceil(1e3*Math.random()),component:t,onUpdate:w.saveElement.bind(this)})):null,this.state.showEditor?r.default.createElement(v.default,null,r.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),element:t,name:t.name,markup:t.markup,style:t.style,state:t.state,title:"Editor",onSave:this.saveElement})):this.state.selectedComponent?r.default.createElement(v.default,null,r.default.createElement(h.default,null,r.default.createElement("button",{class:"showEditor",onClick:function(){return e.setState({showEditor:!0})}},"Open Editor"))):null,this.state.showContextMenu?r.default.createElement(g.default,{children:this.state.contextMenuChildren,position:this.state.contextMenuPosition,onMessage:this.onContextMenuMessage.bind(this)}):null)}}]),t}();console.log("Source code https://github.com/imvetri/ui-editor"),i.default.render(r.default.createElement(C,null),document.getElementById("index"))}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1N0b3JhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9SdW50aW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db2RlR2VuZXJhdG9yL1JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL2ZpbmRGb2xkZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL2ZpbmRGb2xkZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9JbmRleC9pbmRleC5jc3M/ZDBkNyIsIndlYnBhY2s6Ly8vLi9zcmMvSW5kZXgvaW5kZXguY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1N0eWxlLmNzcz8zNmRmIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9TdHlsZS5jc3M/ODQ2NSIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvcHJvY2Vzc0ZvbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9Gb2xkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvRm9sZGVyL1N0eWxlLmNzcz9hOWJlIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvTmV3Rm9sZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL05ld0ZvbGRlci9TdHlsZS5jc3M/ZTNiZiIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9OZXdGb2xkZXIvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9SZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L0V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L1RodW1ibmFpbFZpZXcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ByZXZpZXcvRHluYW1pY0NvbXBvbmVudC9VdGlsaXR5LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvY3JlYXRlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1N0b3JhZ2UvbG9jYWxTdG9yYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvU3RvcmFnZS9sb2NhbFN0b3JhZ2UvU2FtcGxlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvUnVudGltZS9hc3NldFV0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnQvc3R5bGUuY3NzPzUyNWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ByZXZpZXcvRHluYW1pY0NvbXBvbmVudC9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9UaHVtYm5haWxWaWV3L3N0eWxlLmNzcz9hNmJiIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0NvbXBvbmVudHQvVGh1bWJuYWlsVmlldy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9TdHlsZS5jc3M/OGYwNyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRWRpdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9FZGl0b3IvU3R5bGUuY3NzPzFiZmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VkaXRvci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9TdHlsZS5jc3M/ZWUyOCIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db21wb25lbnRzL05vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9FdmVudHMvRXZlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9FdmVudC9TdHlsZS5jc3M/YmE5NCIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9FdmVudC9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9TdHlsZS5jc3M/Nzk3MSIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9nZXQtbm9kZS10cmVlLmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L3N0eWxlLmNzcz82ZDQ4Iiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvU3R5bGUuY3NzPzllYWEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9Bc3NldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL0Fzc2V0L1N0eWxlLmNzcz81OGU2Iiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvQXNzZXQvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvUmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL2RiLmpzIiwid2VicGFjazovLy8uL3NyYy9FeHBvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9FeHBvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9FeHBvcnQvRXhwb3J0U2VwYXJhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db2RlR2VuZXJhdG9yL1JlYWN0U3Rvcmllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0xpYnJhcmllcy96aXBGaWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0xpYnJhcmllcy9kb3dubG9hZEZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9FeHBvcnQvbG9nQ29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXhwb3J0L1N0eWxlLmNzcz84YmY1Iiwid2VicGFjazovLy8uL3NyYy9FeHBvcnQvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9IaXN0b3J5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9IaXN0b3J5L1N0eWxlLmNzcz9hNzRhIiwid2VicGFjazovLy8uL3NyYy9IaXN0b3J5L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFyaWFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhcmlhbnRzL1ZhcmlhbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhcmlhbnRzL1ZhcmlhbnQvc3R5bGUuY3NzPzAwN2MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhcmlhbnRzL1ZhcmlhbnQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9WYXJpYW50cy9zdHlsZS5jc3M/YmFlNiIsIndlYnBhY2s6Ly8vLi9zcmMvVmFyaWFudHMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9DZW50ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0NlbnRlci9zdHlsZS5jc3M/YjRlNyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvQ2VudGVyL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvQm90dG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Cb3R0b20vc3R5bGUuY3NzP2MyOGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0JvdHRvbS9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnQvc3R5bGUuY3NzP2E3MTciLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9SaWdodC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvUmlnaHQvc3R5bGUuY3NzPzhlMzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL1JpZ2h0L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0NvbXBvbmVudHMvQ29udGV4dE1lbnUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db21wb25lbnRzL0NvbnRleHRNZW51L3N0eWxlLmNzcz80ZjM1Iiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9Db250ZXh0TWVudS9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0luZGV4L1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfbG9jYWxTdG9yYWdlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkRGF0YSIsIndyaXRlRGF0YSIsInJlYWRDb21wb25lbnQiLCJ3cml0ZUNvbXBvbmVudCIsInBvcEhpc3RvcnkiLCJzYXZlQ29tcG9uZW50c1RvV2luZG93IiwibmVzdGVkQ29tcG9uZW50cyIsImZvckVhY2giLCJjb21wb25lbnQiLCJfYXNzZXRVdGlscyIsImhhc0Fzc2V0cyIsInN0YXRlIiwiSlNPTiIsInBhcnNlIiwibmFtZVRvVVJMIiwic3RyaW5naWZ5Iiwic3R5bGUiLCJuYW1lIiwid2luZG93IiwiYXNzZXRzIiwidG9EZWxldGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwicmVtb3ZlIiwiZHluYW1pY1N0eWxlIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInR5cGUiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVTdHlsZXNoZWV0IiwiX2NyZWF0ZUNvbXBvbmVudCIsImNyZWF0ZUNvbXBvbmVudCIsInNhdmVUb1dpbmRvdyIsImdldENoaWxkcmVuIiwicGFyZW50IiwiY29tcG9uZW50cyIsIl9TdG9yYWdlIiwiY2hlY2tOZXN0ZWRDb21wb25lbnRzIiwibWFya3VwIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJtYXAiLCJnZXROZXN0ZWRDb21wb25lbnRzIiwiY2hpbGRyZW4iLCJncmFuZEtpZHMiLCJmbGF0IiwicHVzaCIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibGVuZ3RoIiwic2F2ZVZhcmlhbnQiLCJjb21wb25lbnROYW1lIiwiZmluZCIsImNvbXBvbmVudFN0YXRlIiwidW5kZWZpbmVkIiwidmFyaWFudCIsImNvbnNvbGUiLCJlcnJvciIsInZhcmlhbnRzIiwidXJsVG9OYW1lIiwiX3JlYWN0IiwiX1J1bnRpbWUiLCJEeW5hbWljQ29tcG9uZW50IiwicHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2FsbCIsIkNvbXBvbmVudCIsImUiLCJjdXJyZW50VGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsInRhcmdldCIsImNsYXNzTGlzdCIsImFkZCIsImNvbnRhaW5zIiwibG9nIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwicGFyZW50Q29tcG9uZW50IiwiY29tcG9uZW50VGFnIiwicmVwbGFjZSIsIm9uU2F2ZSIsIl9yZWFjdDIiLCJkZWZhdWx0Iiwib25EcmFnT3ZlciIsImRyYWdPdmVySGFuZGxlciIsImJpbmQiLCJvbkRyb3AiLCJkcm9wQ29tcG9uZW50IiwiUmVhY3QiLCJjb252ZXJ0VG9SZWFjdCIsImV2ZW50cyIsImV2ZW50IiwiaWQiLCJwcm9wc0luTWFya3VwIiwiYWRkUHJvcHMiLCJzdGF0ZU92ZXJpZGVNYXJrdXAiLCJjb25maWciLCJrZXlzIiwiY2hpbGROYW1lIiwib3ZlcnJpZGUiLCJjaGlsZE1hcmt1cCIsInJlbmRlckxpc3RNYXJrdXAiLCJjaGlsZE1hcmt1cFdpdGhQcm9wcyIsImdldFN0YXRlZE1hcmt1cCIsImNvbXBvbmVudEV2ZW50ZWRNYXJrdXAiLCJzcGxpdCIsImpvaW4iLCJnZXRDb21wb25lbnRFdmVudGVkTWFya3VwIiwiX19lZGl0b3IiLCJnZXRTYXZlVmFyaWFudCIsIlJlYWN0Q29tcG9uZW50IiwicHVibGlzaGFibGUiLCJyZWR1Y2VyIiwicHVibGlzaE5hbWUiLCJmaW5kUGFyZW50IiwiZm9sZGVyIiwiY29udGVudHMiLCJpIiwiY29udGVudCIsInBhcmVudEZvbGRlciIsIl90eXBlb2YiLCJmaW5kUGFyZW50Rm9sZGVyIiwiZm9sZGVyTmFtZSIsImZvbGRlclBhcmVudEZvbGRlciIsImZpbmRGb2xkZXIiLCJmb2xkZXJGb3VuZCIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwiQ29tcG9uZW50cyIsImZvbGRlcnMiLCJzaG93Q29udHJvbHMiLCJBcnJheSIsImZyb20iLCJ1bnNoaWZ0Iiwic3RhdHVzIiwic2V0U3RhdGUiLCJvbk9wZW5FZGl0b3IiLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwiYWRkQ29tcG9uZW50Iiwic2VsZWN0ZWRDb21wb25lbnQiLCJhZGRGb2xkZXIiLCJfRm9sZGVyczIiLCJrZXkiLCJNYXRoIiwiY2VpbCIsInJhbmRvbSIsIm9uRm9sZGVyc1VwZGF0ZSIsIm9uU2VsZWN0aW9uIiwiX2ZpbmRGb2xkZXJzIiwiX3Byb2Nlc3NGb2xkZXIiLCJGb2xkZXJzIiwib2xkUGFyZW50IiwiY29udGVudE5hbWUiLCJvbGRQYXJlbnRGb2xkZXIiLCJkZWxldGVJbmRleCIsImZpbmRJbmRleCIsInNwbGljZSIsInJlbW92ZUluZGV4IiwiZGF0YSIsIm5ld1BhcmVudCIsImVtcHR5Rm9sZGVySW5kZXgiLCJyZW1vdmVDb250ZW50RnJvbVBhcmVudCIsInJlbW92ZUZvbGRlckZyb21QYXJlbnQiLCJmb2xkZXJTdHJ1Y3R1cmUiLCJvbkZvbGRlclVwZGF0ZSIsIm9uRm9sZGVyU3RhdHVzQ2hhbmdlZCIsImluaXRpYWxpc2VQcm9wcyIsInByb2Nlc3NGb2xkZXIiLCJjaGVja0ZvbGRlciIsIngiLCJfRm9sZGVyMiIsInByb2Nlc3NDb250ZW50IiwiX0NvbXBvbmVudHQyIiwib25TZWxlY3Rpb25DaGFuZ2UiLCJfUmVkdWNlciIsIl9FdmVudHMiLCJGb2xkZXIiLCJpY29uU3RhdHVzIiwiZm9sZGVyQ2xhc3MiLCJfTmV3Rm9sZGVyMiIsIm9uTmV3Rm9sZGVyIiwibmV3Rm9sZGVyIiwiZGF0YS1mb2xkZXItbmFtZSIsImRyYWdnYWJsZSIsImRyb3BIYW5kbGVyIiwib25EcmFnTGVhdmUiLCJkcmFnTGVhdmVIYW5kbGVyIiwib25EcmFnU3RhcnQiLCJmb2xkZXJTdGFydERyYWciLCJ0b2dnbGVGb2xkZXIiLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5IiwidmFsdWUiLCJOZXdGb2xkZXIiLCJuZXdGb2xkZXJDbGFzcyIsImF1dG9Gb2N1cyIsIm9uQ2hhbmdlIiwiZm9sZGVyTmFtZUNoYW5nZWQiLCJvbktleVByZXNzIiwic2F2ZUZvbGRlck5hbWVPbkVudGVyIiwiZXYiLCJkcm9wcGVkRm9sZGVyIiwiZ2V0QXR0cmlidXRlIiwicGFyZW50RWxlbWVudCIsInNldERhdGEiLCJDb21wb25lbnR0Iiwic2VsZWN0aW9uQ2hhbmdlZCIsIm9uQ29udGV4dE1lbnUiLCJpbmRleCIsImRhdGEtbmFtZSIsImFkZENvbXBvbmVudERldGFpbHMiLCJfVGh1bWJuYWlsVmlldzIiLCJUaHVtYm5haWxWaWV3IiwiX0R5bmFtaWNDb21wb25lbnQyIiwiaW5zZXJ0RGlyZWN0aW9uIiwiUGFnZVgiLCJQYWdlWSIsInByZXZQYWdlWCIsInByZXZQYWdlWSIsImNvdW50IiwibWF4Q291bnQiLCJfUmVhY3QiLCJjb21wb25lbnRTdHJpbmciLCJldmFsIiwiQmFiZWwiLCJwcmVzZXRzIiwicGx1Z2lucyIsImNvZGUiLCJpc0FycmF5IiwiY29tcCIsImVkaXRvckhpc3RvcnkiLCJsYXN0SXRlbSIsInBvcCIsIl9TYW1wbGUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2FtcGxlIiwiaGlzdG9yeSIsIm5vUHVzaCIsInNldEl0ZW0iLCJwdXNoSGlzdG9yeSIsImVtYWlsIiwic2hvd01vZGFsIiwibGlzdCIsIlJlc2V0UGFzc3dvcmRNb2RhbCIsInRpdGxlIiwiZm9vdGVyIiwic2hvdyIsIml0ZW1zIiwiY3VycmVudCIsInRydWVOYW1lIiwiX2xvb3AiLCJhc3NldE5hbWUiLCJhc3NldCIsImdldFVSTCIsImJsb2IiLCJfbG9vcDIiLCJ1cmwiLCJsb2NhdGlvbiIsImhvc3QiLCJfcmVhY3RDb2RlbWlycm9yIiwiRWRpdG9yIiwiX3RoaXMyIiwic2F2ZUVsZW1lbnQiLCJzYXZlTmFtZSIsIlVuQ29udHJvbGxlZCIsImF1dG9DdXJzb3IiLCJsaW5lTnVtYmVycyIsIm1vZGUiLCJ0aGVtZSIsImluZGVudFdpdGhUYWJzIiwic21hcnRJbmRlbnQiLCJsaW5lV3JhcHBpbmciLCJlZGl0b3IiLCJfZ2V0Tm9kZVRyZWUiLCJFdmVudHMiLCJhc3NpZ24iLCJzZWxlY3RlZFRhZyIsIm5vZGVUcmVlIiwiZ2V0Tm9kZVRyZWUiLCJyZXN1bHQiLCJldmVudHNPZlNlbGVjdGVkVGFnIiwiY29uZmlndXJhdG9yIiwiZXZlbnROYW1lcyIsImNoaWxkQ29tcG9uZW50TmFtZSIsImNoaWxkQ29tcG9uZW50IiwicHVibGlzaGFibGVFdmVudCIsImV2ZW50TmFtZSIsIl9FdmVudDIiLCJzZWxlY3RlZFRhZ0lEIiwidXBkYXRlRXZlbnQiLCJkZWxldGVFdmVudCIsIl9Db25maWd1cmF0b3IyIiwidXBkYXRlQ29uZmlndXJhdGlvbiIsIl9Ob2RlczIiLCJub2RlIiwib25TZWxlY3RlZFRhZ0NoYW5nZWQiLCJzZWxlY3RlZFRhZ0NoYW5nZWQiLCJDb25maWd1cmF0b3IiLCJwYXJlbnROYW1lIiwidG9nZ2VsT3ZlcnJpZGUiLCJjaGVja2VkIiwiTm9kZXMiLCJjaGlsZCIsIkV2ZW50IiwidXBkYXRlUHVibGlzaE5hbWUiLCJjbGFzcyIsInVwZGF0ZUV2ZW50TmFtZSIsInVwZGF0ZUV2ZW50VHlwZSIsInB1Ymxpc2hFdmVudCIsImVsZW1lbnQiLCJjaGFuZ2VkRXZlbnRJbmRleCIsIm9uRXZlbnRzVXBkYXRlIiwib25Db25maWdVcGRhdGUiLCJqc3giLCJfZGVmaW5lUHJvcGVydHkiLCJQcmV2aWV3IiwiZGlzcGxheSIsInJhbmRvbUtleSIsInN3aXRjaFRhYmxldCIsInN3aXRjaE1vYmlsZSIsInN3aXRjaERlc2t0b3AiLCJfZGIiLCJBc3NldHMiLCJpbWFnZVVSTCIsInNlbGVjdGVkQXNzZXQiLCJ3cml0ZVRvREIiLCJmaWxlIiwiYmluIiwibmV3RmlsZSIsInNpemUiLCJpbWciLCJzcmMiLCJfQXNzZXQyIiwic2VsZWN0ZWQiLCJvblNlbGVjdGVkIiwidXBkYXRlZFNlbGVjdGVkIiwiZmV0Y2hGcm9tREIiLCJBc3NldCIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWRlbmQiLCJiIiwiYXBwZW5kVG9Cb2R5IiwiaURCIiwiZ2V0IiwidGhlbiIsImhyZWYiLCJwdXQiLCJnZXRBbGwiLCJpbWFnZSIsIl9pbmRleCIsIkV4cG9ydCIsImV4cG9ydFR5cGUiLCJvbkV4cG9ydFR5cGVDaGFuZ2VkIiwib25FeHBvcnQiLCJFWFBPUlRfVFlQRSIsIl9sb2dDb2RlIiwibG9nQ29kZSIsIl9FeHBvcnRTZXBhcmF0ZSIsImV4cG9ydFNlcGFyYXRlRmlsZSIsInVuaXF1ZUNvbXBvbmVudHMiLCJnZXRVbmlxdWVDb21wb25lbnRzIiwiaW5kaXZpZHVhbENvbXBvbmVudHMiLCJ1cGRhdGVWYXJpYW50cyIsImNoaWxkcmVuSW1wb3J0cyIsImhlYWRlckltcG9ydHMiLCJyZW1vdmVQYXJhbnRoZXNpcyIsImluZGl2aWR1YWxTdG9yaWVzIiwiX1JlYWN0U3RvcmllcyIsImNvbnZlcnRUb1JlYWN0U3RvcmllcyIsIl96aXBGaWxlcyIsInppcEZpbGVzIiwiY29uY2F0IiwiU2V0IiwiY29tIiwiUmVhY3RTdG9yaWVzIiwiYXJyYXkiLCJ6aXAiLCJKU1ppcCIsImdlbmVyYXRlQXN5bmMiLCJfZG93bmxvYWRGaWxlIiwiZG93bmxvYWQiLCJkbGluayIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm9uY2xpY2siLCJ0aGF0Iiwic2V0VGltZW91dCIsInJldm9rZU9iamVjdFVSTCIsImNsaWNrIiwiZG93bmxvYWRGaWxlIiwibWltZV90eXBlIiwiQmxvYiIsInJldmVyc2UiLCJIaXN0b3J5IiwicmVmcmVzaFRvUHJldmlvdXMiLCJWYXJpYW50cyIsInZhcmlhbnRUb0RlbGV0ZSIsIm9uVXBkYXRlIiwiX1ZhcmlhbnQyIiwiZGVsZXRlVmFyaWFudCIsIlZhcmlhbnQiLCJkaXNhYmxlZCIsIkNlbnRlciIsIkJvdHRvbSIsIkxlZnQiLCJSaWdodCIsImlubmVyVGV4dCIsInVwZGF0ZVNlbGVjdGVkVGFiIiwiQ29udGV4dE1lbnUiLCJvbk1lc3NhZ2UiLCJwb3NpdGlvbiIsIm5ld0VsZW1lbnRzIiwiZWxlbWVudHMiLCJ1cGRhdGVDb25maWciLCJuZXdFbGVtZW50IiwiZWxlbWVudEV4aXN0Iiwic2VsZWN0ZWRJbmRleCIsImVsZW1lbnRVbmRlckVkaXQiLCJzaG93RWRpdG9yIiwidXBkYXRlU2VsZWN0ZWRDb21wb25lbnQiLCJvbkRlbGV0ZUNvbXBvbmVudCIsImNvbnRlbnRJbmRleCIsIm9uRXh0ZW5kQ29tcG9uZW50Iiwib25EZWxldGVGb2xkZXIiLCJUWVBFIiwiX25vRm9sZGVyJGNvbnRlbnRzIiwibm9Gb2xkZXIiLCJmb2xkZXJUb0RlbGV0ZSIsInVwZGF0ZUZvbGRlcnMiLCJfRXZlbnRzMyIsIkluZGV4Iiwic2VsZWN0ZWRUYWIiLCJvbmtleWRvd24iLCJhbHRLZXkiLCJrZXlDb2RlIiwib3BlblJpZ2h0IiwicHJldmlld0NvbXBvbmVudCIsImNvbnRleHRNZW51Q2hpbGRyZW4iLCJvcGVuRXhwb3J0VGFiIiwic2hvd0NvbnRleHRNZW51IiwiY29udGV4dE1lbnVQb3NpdGlvbiIsInRvcCIsImNsaWVudFkiLCJsZWZ0IiwiY2xpZW50WCIsIm1lc3NhZ2UiLCJvblNob3dDb250ZXh0TWVudSIsImhpZGVDb250ZXh0TWVudSIsIl9MZWZ0MiIsIl9Db21wb25lbnRzMiIsIm9wZW5FZGl0b3IiLCJfQ2VudGVyMiIsIl9QcmV2aWV3MiIsIl9SaWdodDIiLCJfRXZlbnRzMiIsIl9IaXN0b3J5MiIsIl9Bc3NldHMyIiwiX0V4cG9ydDIiLCJfVmFyaWFudHMyIiwiX0JvdHRvbTIiLCJfRWRpdG9yMiIsIl9Db250ZXh0TWVudTIiLCJvbkNvbnRleHRNZW51TWVzc2FnZSIsIlJlYWN0RE9NIiwicmVuZGVyIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJ5RkFBQSxJQUFBQSxFQUFBQyxFQUFBLElBRUFDLEVBQU9DLFFBQVUsQ0FDYkMsU0FBVUEsV0FDVkMsVUFBV0EsWUFDWEMsY0FBZUEsZ0JBQ2ZDLGVBQWdCQSxpQkFDaEJDLFdBQVlBLGUsZ0ZDcUVBQyx1QkFBVCxTQUFnQ0MsR0FFbkNBLEVBQWlCQyxRQUFRLFNBQVVDLElBbEJ2QyxTQUFzQkEsSUFDZCxFQUFBQyxFQUFBQyxXQUFVRixFQUFVRyxTQUNwQkgsRUFBVUcsTUFBUUMsS0FBS0MsT0FBTSxFQUFBSixFQUFBSyxXQUFVRixLQUFLRyxVQUFVUCxFQUFVRyxXQXJCeEUsU0FBMEJLLEVBQU9DLEdBR3pCQyxPQUFPQyxTQUNQSCxHQUFRLEVBQUFQLEVBQUFLLFdBQVVFLElBR1BJLEdBQVhBLFNBQWVDLFNBQVNDLGlCQUFULHlCQUFtREwsRUFBbkQs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IHdyaXRlRGF0YSwgd3JpdGVDb21wb25lbnQsIHJlYWRDb21wb25lbnQsIHBvcEhpc3RvcnkgfSBmcm9tIFwiLi9sb2NhbFN0b3JhZ2VcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVhZERhdGE6IHJlYWREYXRhLFxuICAgIHdyaXRlRGF0YTogd3JpdGVEYXRhLFxuICAgIHJlYWRDb21wb25lbnQ6IHJlYWRDb21wb25lbnQsXG4gICAgd3JpdGVDb21wb25lbnQ6IHdyaXRlQ29tcG9uZW50LFxuICAgIHBvcEhpc3Rvcnk6IHBvcEhpc3Rvcnlcbn0iLCIvLyBEZXBlbmRlbmNpZXMuXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gXCIuLi9jcmVhdGUtY29tcG9uZW50XCI7XG5pbXBvcnQgeyByZWFkRGF0YSwgd3JpdGVEYXRhIH0gZnJvbSBcIi4uL1N0b3JhZ2VcIjtcblxuLy8gVXRpbGl0aWVzLlxuXG5pbXBvcnQge3VybFRvTmFtZSwgbmFtZVRvVVJMLCBoYXNBc3NldHN9IGZyb20gXCIuL2Fzc2V0VXRpbHNcIjtcbi8qKlxuICogU3RvcmUgY29tcG9uZW50IHN0YXRlIGFzIHZhcmlhbnRzLiBCZWNhdXNlIHZhcmlhbnRzIGFyZSB2aXN1YWxseSBkaWZmZXJlbnQgZm9ybSBvZiBhIGNvbXBvbmVudC5cbiAqIFNpbmNlIHZpc3VhbGx5IGRpZmZlcmVudCBmb3JtcyBhcmUgZHJpdmVuIGJ5IHRoZSBzdGF0ZSwgaXRzIHNpbXBsZSB0byBqdXN0IGtlZXAgdHJhY2sgb2YgdGhlIHN0YXRlcy5cbiAqL1xud2luZG93LnNhdmVWYXJpYW50ID0gZnVuY3Rpb24gc2F2ZVZhcmlhbnQoY29tcG9uZW50TmFtZSwgc3RhdGUpIHtcbiAgICAvLyAxLiBSZWFkIGFsbCBjb21wb25lbnRzLlxuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgLy8gMi4gRmluZCB0aGUgcGFzc2VkIGNvbXBvbmVudC5cbiAgICBsZXQgY29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgLy8gMy4gRmV0Y2ggdGhlIHN0YXRlc3RhdGUuXG4gICAgbGV0IGNvbXBvbmVudFN0YXRlID0gSlNPTi5wYXJzZShjb21wb25lbnQuc3RhdGUpO1xuICAgIC8vIDQuIFRocm93IGVycm9yIGlmIGNvbXBvbmVudCBkb2VzbnQgY29udGFpbiBhIHZhcmlhbnQgcHJvcGVydHlcbiAgICBpZiAoY29tcG9uZW50U3RhdGUudmFyaWFudCA9PT0gdW5kZWZpbmVkIHx8IHN0YXRlLnZhcmlhbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQWRkIGEgdmFyaWFudCBwcm9wZXJ0eSB3aXRoIGEgdGV4dCB2YWx1ZVwiKVxuICAgIH1cbiAgICAvLyA1LiBDcmVhdGUgYSBuZXcgdmFyaWFudC5cbiAgICBpZihjb21wb25lbnQudmFyaWFudHMubGVuZ3RoPT09MCl7XG4gICAgICAgIGNvbXBvbmVudC52YXJpYW50cyA9IFt7XG4gICAgICAgICAgICBuYW1lOiBjb21wb25lbnRTdGF0ZS52YXJpYW50LFxuICAgICAgICAgICAgc3RhdGU6IHVybFRvTmFtZShKU09OLnN0cmluZ2lmeShjb21wb25lbnRTdGF0ZSkpXG4gICAgICAgIH1dXG4gICAgfVxuICAgIC8vIDYuIHB1c2ggc3RhdGUgaW50byBjb21wb25lbnQudmFyaWFudCBpZiBpdCBpcyBuZXdcbiAgICBpZiAoIWNvbXBvbmVudC52YXJpYW50cy5maW5kKHZhcmlhbnQgPT4gdmFyaWFudC5uYW1lID09PSBzdGF0ZS52YXJpYW50KSkge1xuICAgICAgICBjb21wb25lbnQudmFyaWFudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBzdGF0ZS52YXJpYW50LFxuICAgICAgICAgICAgc3RhdGU6IHVybFRvTmFtZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyA3LiBwZXJzaXN0LlxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBjb21wb25lbnRzKVxufTtcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVzaGVldChzdHlsZSwgbmFtZSkge1xuXG4gICAgLy8gY2hlY2sgaWYgd2luZG93IGhhcyAkYXNzZXRzIFxuICAgIGlmICh3aW5kb3cuYXNzZXRzKSB7XG4gICAgICAgIHN0eWxlID0gbmFtZVRvVVJMKHN0eWxlKVxuICAgIH1cblxuICAgIGxldCB0b0RlbGV0ZSA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS1jb21wb25lbnQtbmFtZT0nJHtuYW1lfSddYCldO1xuICAgIHRvRGVsZXRlLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGl0ZW0ucmVtb3ZlKClcbiAgICB9KVxuICAgIHZhciBkeW5hbWljU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIGR5bmFtaWNTdHlsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbXBvbmVudC1uYW1lXCIsIG5hbWUpO1xuICAgIGR5bmFtaWNTdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICBkeW5hbWljU3R5bGUuaW5uZXJIVE1MID0gc3R5bGU7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkeW5hbWljU3R5bGUpXG59XG5cbi8qKiBUYWtlcyBhIGNvbXBvbmVudCBhbmQgY29udmVydHMgaXQgYXMgYSByZWFjdCBjb21wb25lbnQgKi9cbmZ1bmN0aW9uIHNhdmVUb1dpbmRvdyhjb21wb25lbnQpIHtcbiAgICBpZiAoaGFzQXNzZXRzKGNvbXBvbmVudC5zdGF0ZSkpIHtcbiAgICAgICAgY29tcG9uZW50LnN0YXRlID0gSlNPTi5wYXJzZShuYW1lVG9VUkwoSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50LnN0YXRlKSkpXG4gICAgfVxuICAgIGNyZWF0ZVN0eWxlc2hlZXQoY29tcG9uZW50LnN0eWxlLCBjb21wb25lbnQubmFtZSlcbiAgICB3aW5kb3dbY29tcG9uZW50Lm5hbWVdID0gY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrTmVzdGVkQ29tcG9uZW50cyhtYXJrdXApIHtcblxuICAgIHZhciBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG5cbiAgICByZXR1cm4gY29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50ID0+IG1hcmt1cC5pbmNsdWRlcyhjb21wb25lbnQubmFtZSkpLmxlbmd0aCA+IDA7XG59XG5cbi8qKiBUYWtlcyBjb21wb25lbnRzIGFuZCBzYXZlcyB0aGVtIHRvIHdpbmRvdyBhcyByZWFjdCBPYmplY3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBzYXZlQ29tcG9uZW50c1RvV2luZG93KG5lc3RlZENvbXBvbmVudHMpIHtcbiAgICAvLyBUcmFuc3BpbGUgdGhlbSBhbmQgbWFrZSB0aGVtIGdsb2JhbC5cbiAgICBuZXN0ZWRDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICBzYXZlVG9XaW5kb3coSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb21wb25lbnQpKSlcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkcmVuKHBhcmVudCkge1xuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgaWYgKGNoZWNrTmVzdGVkQ29tcG9uZW50cyhwYXJlbnQubWFya3VwKSkge1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBjb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQgPT4gcGFyZW50Lm1hcmt1cC5pbmNsdWRlcyhjb21wb25lbnQubmFtZSkpLm1hcChjb21wb25lbnQgPT4gY29tcG9uZW50Lm5hbWUpO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cblxuLyoqIFRha2VzIG1hcmt1cCBhbmQgcmV0dXJucyBjaGlsZHJlbiBjb21wb25lbnQgb2JqZWN0cy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXN0ZWRDb21wb25lbnRzKHBhcmVudCkge1xuICAgIC8vIFNob3VsZCBiZSBhYmxlIHRvIGRldGVjdCBuZXN0ZWQgY29tcG9uZW50LlxuXG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgbmVzdGVkQ29tcG9uZW50cyA9IFtwYXJlbnRdO1xuICAgIGlmIChjaGVja05lc3RlZENvbXBvbmVudHMocGFyZW50Lm1hcmt1cCkpIHtcbiAgICAgICAgLy8gZmluZCBhbGwgdGhlIG5lc3RlZCBjb21wb25lbnRzIGZyb20gdGhlIG1hcmt1cCBhbmQgcHVzaCBpdCB0byBuZXN0ZWRDb21wb25lbnRzLlxuICAgICAgICBsZXQgY2hpbGRyZW4gPSBjb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQgPT4gcGFyZW50Lm1hcmt1cC5pbmNsdWRlcyhjb21wb25lbnQubmFtZSkpO1xuICAgICAgICAvLyBGaW5kIGdyYW5kIGtpZHMuXG4gICAgICAgIGxldCBncmFuZEtpZHMgPSBjaGlsZHJlbi5tYXAoZ2V0TmVzdGVkQ29tcG9uZW50cykuZmxhdCgzKVxuICAgICAgICBuZXN0ZWRDb21wb25lbnRzLnB1c2goLi4uZ3JhbmRLaWRzKVxuICAgIH1cbiAgICByZXR1cm4gbmVzdGVkQ29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50ID0+IGNvbXBvbmVudCAmJiBjb21wb25lbnQubWFya3VwKTtcbn1cbiIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBVdGlsaXRpZXMuXG5cbmltcG9ydCB7IGluc2VydERpcmVjdGlvbiB9IGZyb20gXCIuL1V0aWxpdHlcIjtcblxuLy8gUnVudGltZSB1dGlsaXRpZXMuXG5cbmltcG9ydCB7wqBnZXROZXN0ZWRDb21wb25lbnRzLCBzYXZlQ29tcG9uZW50c1RvV2luZG93IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9SdW50aW1lXCI7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgRHluYW1pY0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIGRyYWdPdmVySGFuZGxlcihlKXtcblxuICAgICAgICAvKiogaWYgaXQgY29udGFpbnMgLmNvbnRlbnQgYXJlYSBoaW50IGl0IGdyZWVuIGVsc2UgaGludCByZWQqL1xuICAgICAgICBsZXQgZHJvcEFyZWEgPSBlLmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcihcIi5jb250ZW50XCIpO1xuICAgICAgICBpZighZHJvcEFyZWEpe1xuICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChcImhpbnROb0Ryb3BcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY29udGVudFwiKSl7XG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiaGludERyYWdPdmVyXCIpO1xuICAgICAgICAgICAgaWYoZS50YXJnZXQuY2hpbGRyZW4ubGVuZ3RoPjEpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiWUVTXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgZHJvcENvbXBvbmVudChlKXtcbiAgICAgICAgbGV0IGNvbXBvbmVudE5hbWUgPSBlLmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiY29tcG9uZW50LW5hbWVcIik7XG4gICAgICAgIGxldCBwYXJlbnRDb21wb25lbnQgPSB0aGlzLnN0YXRlLmNvbXBvbmVudDtcbiAgICAgICAgbGV0IGNvbXBvbmVudFRhZyA9IGA8JHtjb21wb25lbnROYW1lfT48LyR7Y29tcG9uZW50TmFtZX0+YFxuICAgICAgICBwYXJlbnRDb21wb25lbnQubWFya3VwID0gcGFyZW50Q29tcG9uZW50Lm1hcmt1cC5yZXBsYWNlKCdjb250ZW50XCI+JywnY29udGVudFwiPicrY29tcG9uZW50VGFnKVxuICAgICAgICB0aGlzLnByb3BzLm9uU2F2ZShwYXJlbnRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBpZih0aGlzLnN0YXRlLmNvbXBvbmVudC5uYW1lPT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHJldHVybiAoPHA+Tm8gY29tcG9uZW50IHNlbGVjdGVkLjwvcD4pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHRoaXMuc3RhdGUuY29tcG9uZW50KTtcbiAgICAgICAgaWYgKG5lc3RlZENvbXBvbmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2F2ZUNvbXBvbmVudHNUb1dpbmRvdyhuZXN0ZWRDb21wb25lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCF3aW5kb3dbdGhpcy5zdGF0ZS5jb21wb25lbnQubmFtZV0pe1xuICAgICAgICAgICAgcmV0dXJuICg8ZGl2PjwvZGl2PilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2ICBcbiAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXsgdGhpcy5kcmFnT3ZlckhhbmRsZXIuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICBvbkRyb3A9e3RoaXMuZHJvcENvbXBvbmVudC5iaW5kKHRoaXMpfT5cbiAgICAgICAgICAgICAgICB7UmVhY3QuY3JlYXRlRWxlbWVudCh3aW5kb3dbdGhpcy5zdGF0ZS5jb21wb25lbnQubmFtZV0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IER5bmFtaWNDb21wb25lbnQ7IiwiLy8gRWxlbWVudHMgdG8gIHJlYWN0IGNvbXBvbmVudC5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9SZWFjdCAoY29tcG9uZW50KXtcblxuICAgIGxldCBtYXJrdXAgPSBcIm1hcmt1cFwiO1xuXG4gICAgY29tcG9uZW50LmV2ZW50cy5mb3JFYWNoKGV2ZW50PT57XG4gICAgICAgIGV2ZW50LmlkID0gZXZlbnQuaWQucmVwbGFjZShcIi1cIixcIlwiKTtcbiAgICB9KVxuXG4gICAgbGV0IGFkZFByb3BzPSAoY29tcG9uZW50KT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50W21hcmt1cF0ucmVwbGFjZShcIj5cIixgIHsuLi50aGlzLnByb3BzfT57dGhpcy5wcm9wcy5jaGlsZHJlbn1gKVxuICAgIH1cblxuICAgIGxldCBnZXRDb21wb25lbnRFdmVudGVkTWFya3VwID0gKG1hcmt1cCwgZXZlbnRzKT0+e1xuICAgICAgICBldmVudHMuZm9yRWFjaChldmVudD0+e1xuICAgICAgICAgICAgbGV0IGlkID0gYGlkPVwiJHtldmVudC5pZH1cImA7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBtYXJrdXAgY29udGFpbnMgdGhlIGlkLlxuICAgICAgICAgICAgaWYobWFya3VwLmluY2x1ZGVzKGlkKSl7XG4gICAgICAgICAgICAgICAgbWFya3VwID0gbWFya3VwLnJlcGxhY2UoaWQsIGAke2lkfSAke2V2ZW50Lm5hbWV9PXt0aGlzLiR7ZXZlbnQuaWQrZXZlbnQubmFtZX0uYmluZCh0aGlzKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGl0cyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgbWFya3VwID0gbWFya3VwLnJlcGxhY2UoYDwke2V2ZW50LmlkfWAsYDwke2V2ZW50LmlkfSAke2V2ZW50Lm5hbWV9PXt0aGlzLiR7ZXZlbnQuaWQrZXZlbnQubmFtZX0uYmluZCh0aGlzKX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgcmV0dXJuIG1hcmt1cC5zcGxpdChcInN0YXRlLlwiKS5qb2luKFwidGhpcy5zdGF0ZS5cIilcbiAgICB9XG5cbiAgICAvLyBjaGVja3MgaWYgc3RhdGUgb3ZlcnJpZGUgaXMgb24uIHRoZW4gYWRkcyBzdGF0ZSBwcm9wIHRvIGNoaWxkIFxuICAgIGxldCBnZXRTdGF0ZWRNYXJrdXAgPSAobWFya3VwKT0+e1xuICAgICAgICAvLyBmb3IgYWxsIHRoZSBjb25maWcuXG4gICAgICAgIC8vIGZpbHRlciBjaGlsZCB3aXRoIG92ZXJpZGUgc3RhdGUgaXMgdHJ1ZVxuICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShjb21wb25lbnQuY29uZmlnKTtcbiAgICAgICAgbGV0IGNoaWxkcmVuQ29uZmlnID0gT2JqZWN0LmtleXMoY29uZmlnKTtcbiAgICAgICAgY2hpbGRyZW5Db25maWcuZm9yRWFjaChjaGlsZE5hbWU9PntcblxuICAgICAgICAgICAgLy8gUFJFQ0FVVElPTjogRWRpdCBtYXJrdXAgZm9yIHJlbmRlcmluZyBsaXN0LiBTaG91bGQgbm90IHVzZSBvdGhlciBjb25maWd1cmF0aW9uIHdoaWxlIHVzaW5nIHRoaXMuXG4gICAgICAgICAgICBpZihjb25maWdbY2hpbGROYW1lXS5vdmVycmlkZSApe1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZE1hcmt1cCA9IGA8JHtjaGlsZE5hbWV9PjwvJHtjaGlsZE5hbWV9PmA7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRNYXJrdXBXaXRoUHJvcHMgPSBgPCR7Y2hpbGROYW1lfSBzdGF0ZT17aXRlbX0ga2V5PXt+fihNYXRoLnJhbmRvbSgpKjEwMDAwKX0+PC8ke2NoaWxkTmFtZX0+YDtcbiAgICAgICAgICAgICAgICBsZXQgcmVuZGVyTGlzdE1hcmt1cCA9IGB7c3RhdGUuJHtjaGlsZE5hbWV9Lm1hcCgoaXRlbSxpKT0+JHtjaGlsZE1hcmt1cFdpdGhQcm9wc30pfWA7XG4gICAgICAgICAgICAgICAgbWFya3VwID0gIG1hcmt1cC5yZXBsYWNlKGNoaWxkTWFya3VwLCByZW5kZXJMaXN0TWFya3VwKTsgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICB9XG5cbiAgICAvLyBrZWVwIHNhdmluZyB2YXJpYW50IGluIGJyb3dzZXIsIGJ1dCBub3QgZm9yIGNvZGUgZXhwb3J0cy5cbiAgICBsZXQgZ2V0U2F2ZVZhcmlhbnQgPSAoKT0+e1xuICAgICAgICBpZih3aW5kb3cuX19lZGl0b3Ipe1xuICAgICAgICAgICAgcmV0dXJuIGB3aW5kb3cuc2F2ZVZhcmlhbnQoXCIke2NvbXBvbmVudC5uYW1lfVwiLHN0YXRlKWBcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsZXQgcHJvcHNJbk1hcmt1cCA9IGFkZFByb3BzKGNvbXBvbmVudCk7XG4gICAgbGV0IHN0YXRlT3ZlcmlkZU1hcmt1cCA9IGdldFN0YXRlZE1hcmt1cChwcm9wc0luTWFya3VwKTtcbiAgICBsZXQgY29tcG9uZW50RXZlbnRlZE1hcmt1cCA9IGdldENvbXBvbmVudEV2ZW50ZWRNYXJrdXAoc3RhdGVPdmVyaWRlTWFya3VwLCBjb21wb25lbnQuZXZlbnRzKTtcbiAgICBsZXQgc2F2ZVZhcmlhbnQgPSBnZXRTYXZlVmFyaWFudCgpO1xuICAgIFxuICAgIGxldCBSZWFjdENvbXBvbmVudCA9IFxuYChcbmNsYXNzICR7Y29tcG9uZW50Lm5hbWV9IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvcHMuc3RhdGUgfHwgJHtjb21wb25lbnQuc3RhdGV9O1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGNzcyBhcyBhIHNlcGFyYXRlIGZpbGUgb24gZG93bmxvYWRcbiAgICB9XG5cbiAgICAke2NvbXBvbmVudC5ldmVudHMubWFwKGV2ZW50PT57XG4gICAgICAgIGlmKGV2ZW50LnB1Ymxpc2hhYmxlKXtcbiAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICBcbiAgICAke2V2ZW50LmlkK2V2ZW50Lm5hbWV9IChlKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSkpXG4gICAgICAgICR7ZXZlbnQucmVkdWNlcn1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgICAgIGUuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5wcm9wcy4ke2V2ZW50LnB1Ymxpc2hOYW1lfT8gdGhpcy5wcm9wcy4ke2V2ZW50LnB1Ymxpc2hOYW1lfShlKTpudWxsO1xuICAgIH1gXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYFxuICAgICR7ZXZlbnQuaWQrZXZlbnQubmFtZX0gKGUpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlKSlcbiAgICAgICAgJHtldmVudC5yZWR1Y2VyfVxuICAgICAgICAke3NhdmVWYXJpYW50fVxuICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9XG5gXG4gICAgfSkuam9pbihcIlxcblwiKX1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICgke2NvbXBvbmVudEV2ZW50ZWRNYXJrdXB9KVxuICAgIH1cbn0pXG5gXG4gICAgcmV0dXJuIFJlYWN0Q29tcG9uZW50O1xufVxuIiwibGV0IGZvbGRlckZvdW5kID0gXCJcIjtcbmxldCBwYXJlbnRGb2xkZXIgPSBcIlwiO1xubGV0IGZvbGRlclBhcmVudEZvbGRlciA9IFwiXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFyZW50KGNvbXBvbmVudE5hbWUsIGZvbGRlcil7XG5cbiAgICBsZXQgY29udGVudHMgPSBmb2xkZXIuY29udGVudHM7XG5cbiAgICBmb3IobGV0IGk9MDtpPCBjb250ZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBjb250ZW50ID0gY29udGVudHNbaV07XG4gICAgICAgIGlmKGNvbXBvbmVudE5hbWU9PT1jb250ZW50KXtcbiAgICAgICAgICAgIHBhcmVudEZvbGRlciA9IGZvbGRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZih0eXBlb2YgY29udGVudCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgICAgICBmaW5kUGFyZW50KGNvbXBvbmVudE5hbWUsIGNvbnRlbnQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50Rm9sZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFBhcmVudEZvbGRlcihmb2xkZXJOYW1lLCBmb2xkZXIpe1xuICAgIFxuICAgIGxldCBjb250ZW50cyA9IGZvbGRlci5jb250ZW50cztcblxuICAgIGZvcihsZXQgaT0wO2k8IGNvbnRlbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBjb250ZW50c1tpXTtcblxuICAgICAgICBpZih0eXBlb2YgY29udGVudCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgICAgICBpZihjb250ZW50Lm5hbWUgPT09IGZvbGRlck5hbWUpe1xuICAgICAgICAgICAgICAgIGZvbGRlclBhcmVudEZvbGRlcj0gZm9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluZFBhcmVudEZvbGRlcihmb2xkZXJOYW1lLCBjb250ZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvbGRlclBhcmVudEZvbGRlcjtcbn1cblxuLy8gR2l2ZW4gZm9sZGVycyBhbmQgYSBmb2xkZXJuYW1lLCBmaW5kcyBhIGZvbGRlciBhbmQgcmV0dXJucyBpdC5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRm9sZGVyKGZvbGRlck5hbWUgLCBmb2xkZXIgKXtcblxuICAgIC8vIFJldHVybiBlYXJseSBpZiB0eXBlIGlzIHN0cmluZy5cbiAgICBpZih0eXBlb2YgZm9sZGVyID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIGZvbGRlciA9PT0gXCJvYmplY3RcIil7XG5cbiAgICAgICAgLy8gUmV0dXJuIGZvbGRlciBpZiBuYW1lIG1hdGNoZXMuXG4gICAgICAgIGlmKGZvbGRlci5uYW1lPT09Zm9sZGVyTmFtZSl7XG4gICAgICAgICAgICBmb2xkZXJGb3VuZCA9IGZvbGRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250ZW50cyA9IGZvbGRlci5jb250ZW50cztcblxuICAgICAgICBmb3IobGV0IGk9MDtpPCBjb250ZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGNvbnRlbnRzW2ldO1xuICAgICAgICAgICAgZmluZEZvbGRlcihmb2xkZXJOYW1lLCBjb250ZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvbGRlckZvdW5kO1xufSIsImxldCBmb2xkZXJGb3VuZCA9IFwiXCI7XG5sZXQgcGFyZW50Rm9sZGVyID0gXCJcIjtcbmxldCBmb2xkZXJQYXJlbnRGb2xkZXIgPSBcIlwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZFBhcmVudChjb21wb25lbnROYW1lLCBmb2xkZXIpe1xuXG4gICAgbGV0IGNvbnRlbnRzID0gZm9sZGVyLmNvbnRlbnRzO1xuXG4gICAgZm9yKGxldCBpPTA7aTwgY29udGVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgY29udGVudCA9IGNvbnRlbnRzW2ldO1xuICAgICAgICBpZihjb21wb25lbnROYW1lPT09Y29udGVudCl7XG4gICAgICAgICAgICBwYXJlbnRGb2xkZXIgPSBmb2xkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYodHlwZW9mIGNvbnRlbnQgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICAgICAgZmluZFBhcmVudChjb21wb25lbnROYW1lLCBjb250ZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudEZvbGRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYXJlbnRGb2xkZXIoZm9sZGVyTmFtZSwgZm9sZGVyKXtcbiAgICBcbiAgICBsZXQgY29udGVudHMgPSBmb2xkZXIuY29udGVudHM7XG5cbiAgICBmb3IobGV0IGk9MDtpPCBjb250ZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBjb250ZW50ID0gY29udGVudHNbaV07XG5cbiAgICAgICAgaWYodHlwZW9mIGNvbnRlbnQgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICAgICAgaWYoY29udGVudC5uYW1lID09PSBmb2xkZXJOYW1lKXtcbiAgICAgICAgICAgICAgICBmb2xkZXJQYXJlbnRGb2xkZXI9IGZvbGRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmRQYXJlbnRGb2xkZXIoZm9sZGVyTmFtZSwgY29udGVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb2xkZXJQYXJlbnRGb2xkZXI7XG59XG5cbi8vIEdpdmVuIGZvbGRlcnMgYW5kIGEgZm9sZGVybmFtZSwgZmluZHMgYSBmb2xkZXIgYW5kIHJldHVybnMgaXQuXG5leHBvcnQgZnVuY3Rpb24gZmluZEZvbGRlcihmb2xkZXJOYW1lICwgZm9sZGVyICl7XG5cbiAgICAvLyBSZXR1cm4gZWFybHkgaWYgdHlwZSBpcyBzdHJpbmcuXG4gICAgaWYodHlwZW9mIGZvbGRlciA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmKHR5cGVvZiBmb2xkZXIgPT09IFwib2JqZWN0XCIpe1xuXG4gICAgICAgIC8vIFJldHVybiBmb2xkZXIgaWYgbmFtZSBtYXRjaGVzLlxuICAgICAgICBpZihmb2xkZXIubmFtZT09PWZvbGRlck5hbWUpe1xuICAgICAgICAgICAgZm9sZGVyRm91bmQgPSBmb2xkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29udGVudHMgPSBmb2xkZXIuY29udGVudHM7XG5cbiAgICAgICAgZm9yKGxldCBpPTA7aTwgY29udGVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBjb250ZW50c1tpXTtcbiAgICAgICAgICAgIGZpbmRGb2xkZXIoZm9sZGVyTmFtZSwgY29udGVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb2xkZXJGb3VuZDtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgY29sb3I6ICNkOWQ5ZDk7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTnVuaXRvIFNhbnNcXFwiLC1hcHBsZS1zeXN0ZW0sXFxcIi5TRk5TVGV4dC1SZWd1bGFyXFxcIixcXFwiU2FuIEZyYW5jaXNjb1xcXCIsQmxpbmtNYWNTeXN0ZW1Gb250LFxcXCJTZWdvZSBVSVxcXCIsXFxcIkhlbHZldGljYSBOZXVlXFxcIixIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gICAgbWFyZ2luOiAwcHg7XFxufVxcblxcbmxpICwgbGFiZWwsIHAsIC5ydWxlcyAsIGlucHV0LCB0ZXh0YXJlYXtcXG4gICAgZm9udC1zaXplOiA5cHg7XFxufVxcblxcbmlucHV0LCB0ZXh0YXJlYSB7IFxcbiAgICBiYWNrZ3JvdW5kOiAjMmIyYjJiO1xcbiAgICBjb2xvcjogI2Q5ZDlkOTtcXG4gICAgb3BhY2l0eTogMC43NTtcXG4gICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdIHtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0YXJlYTtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA3cHg7XFxufVxcblxcbnVsIGxhYmVsIGlucHV0IHtcXG4gICAgd2lkdGg6IDEwcHg7XFxufVxcblxcbnVsLCBsaSB7XFxuICAgIHBhZGRpbmctbGVmdDogNXB4O1xcbiAgICBtYXJnaW4tdG9wOiAwcHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDBweDtcXG59XFxuXFxuYnV0dG9uIHtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7XFxuICAgIG1hcmdpbi1sZWZ0OiA0cHg7XFxufVxcblxcbmJ1dHRvbiBpe1xcbiAgICBwYWRkaW5nLXJpZ2h0OjRweDtcXG59XFxuXFxuYnV0dG9uOmhvdmVyIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuXFxudWwsbGksIHVsIGxhYmVsIHtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG59XFxuXFxudWwgbGFiZWw6aG92ZXIsIGxpOmhvdmVyLCAuY29udGVudDpob3ZlcntcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuXFxuI2luZGV4e1xcbiAgICBtYXJnaW46LTRweDtcXG59XFxuXFxuLkNvZGVNaXJyb3Ige1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgbWFyZ2luLXRvcDo1cHg7XFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IEZvbGRlcnMgZnJvbSBcIi4uL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnNcIjtcblxuXG5jbGFzcyBDb21wb25lbnRzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiB0aGlzLnByb3BzLmNvbXBvbmVudHMsXG4gICAgICAgICAgICBmb2xkZXJzOiB0aGlzLnByb3BzLmZvbGRlcnMsXG4gICAgICAgICAgICBzaG93Q29udHJvbHM6IHRoaXMucHJvcHMuc2hvd0NvbnRyb2xzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkRm9sZGVyKCkge1xuICAgICAgICBsZXQgZm9sZGVycyA9IEFycmF5LmZyb20odGhpcy5zdGF0ZS5mb2xkZXJzKTtcbiAgICAgICAgZm9sZGVycy51bnNoaWZ0KHtcbiAgICAgICAgICAgIHR5cGU6IFwiTmV3Rm9sZGVyXCIsXG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgY29udGVudHM6IFtdLFxuICAgICAgICAgICAgc3RhdHVzOiBcImNsb3NlZFwiXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBmb2xkZXJzIH0pXG4gICAgfVxuXG4gICAgYWRkQ29tcG9uZW50KCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uT3BlbkVkaXRvcigpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGVsZW1lbnRzLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgQ29tcG9uZW50c1xuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQ29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmFkZENvbXBvbmVudC5iaW5kKHRoaXMpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1lZGl0XCI+PC9pPntwcm9wcy5zZWxlY3RlZENvbXBvbmVudCA/IFwiRWRpdFwiIDogXCJBZGRcIn08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmFkZEZvbGRlci5iaW5kKHRoaXMpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1mb2xkZXJcIj48L2k+Rm9sZGVyPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb2xkZXJzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxGb2xkZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzPXtzdGF0ZS5jb21wb25lbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9sZGVycz17c3RhdGUuZm9sZGVyc31cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ29tcG9uZW50PXtwcm9wcy5zZWxlY3RlZENvbXBvbmVudH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgb25Gb2xkZXJzVXBkYXRlPXtwcm9wcy5vbkZvbGRlcnNVcGRhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbj17cHJvcHMub25TZWxlY3Rpb259XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudHM7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vdmVycmlkZSB7XFxuICAgIGxpbmUtaGVpZ2h0OiAwJTtcXG59XFxuXFxudGV4dGFyZWEge1xcbiAgICBoZWlnaHQ6IDcwcHg7XFxuICAgIHdpZHRoOiA0NTBweDtcXG59XFxuXFxuLnRpdGxle1xcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMXB4O1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcbn1cXG5cXG4uZWxlbWVudHMtdGFiIHtcXG4gICAgbGVmdDowcHg7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOjE5MHB4OztcXG59XFxuXFxuLmZvbGRlcnN7XFxuICAgIG92ZXJmbG93OiBzY3JvbGw7ICBcXG4gICAgaGVpZ2h0Ojg1dmg7XFxufVxcblxcbi5Db250cm9sc3tcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4ycyBlYXNlLWluO1xcbn1cXG5cXG4uaGlkZUNvbnRyb2xze1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC41cyBlYXNlLWluLW91dDtcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gVXRpbGl0aWVzLlxuXG5pbXBvcnQgeyBmaW5kRm9sZGVyIH0gZnJvbSBcIi4vZmluZEZvbGRlcnNcIjtcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuXG5pbXBvcnQgeyBmb2xkZXJTdHJ1Y3R1cmUgfSBmcm9tIFwiLi9wcm9jZXNzRm9sZGVyXCI7XG5cbmNsYXNzIEZvbGRlcnMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IHRoaXMucHJvcHMuY29tcG9uZW50cyxcbiAgICAgICAgICAgIGZvbGRlcnM6IHRoaXMucHJvcHMuZm9sZGVyc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbW92ZUZvbGRlckZyb21QYXJlbnQoZm9sZGVycywgb2xkUGFyZW50LCBjb250ZW50TmFtZSkge1xuICAgICAgICBsZXQgb2xkUGFyZW50Rm9sZGVyID0gZmluZEZvbGRlcihvbGRQYXJlbnQgLCBmb2xkZXJzWzBdIClcbiAgICAgICAgbGV0IGRlbGV0ZUluZGV4ID0gb2xkUGFyZW50Rm9sZGVyLmNvbnRlbnRzLmZpbmRJbmRleChjb250ZW50PT50eXBlb2YgY29udGVudCA9PT0gXCJvYmplY3RcIiAmJiBjb250ZW50Lm5hbWU9PT1jb250ZW50TmFtZSk7XG4gICAgICAgIGlmKGRlbGV0ZUluZGV4Pi0xKVxuICAgICAgICAgICAgb2xkUGFyZW50Rm9sZGVyLmNvbnRlbnRzLnNwbGljZShkZWxldGVJbmRleCwxKVxuICAgIH1cblxuICAgIHJlbW92ZUNvbnRlbnRGcm9tUGFyZW50KGZvbGRlcnMsIG9sZFBhcmVudCwgY29udGVudE5hbWUpIHtcbiAgICAgICAgbGV0IG9sZFBhcmVudEZvbGRlciA9IGZpbmRGb2xkZXIob2xkUGFyZW50ICwgZm9sZGVyc1swXSApXG4gICAgICAgIGxldCByZW1vdmVJbmRleCA9IG9sZFBhcmVudEZvbGRlci5jb250ZW50cy5maW5kSW5kZXgoY29udGVudD0+Y29udGVudD09PWNvbnRlbnROYW1lKVxuICAgICAgICBpZihyZW1vdmVJbmRleCE9PS0xKVxuICAgICAgICAgICAgb2xkUGFyZW50Rm9sZGVyLmNvbnRlbnRzLnNwbGljZShyZW1vdmVJbmRleCwxKVxuICAgIH1cblxuXG4gICAgb25Gb2xkZXJVcGRhdGUoZGF0YSwgdHlwZSwgb2xkUGFyZW50LCBjb250ZW50KSB7XG4gICAgICAgIGxldCBmb2xkZXJzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmZvbGRlcnMpO1xuICAgICAgICBsZXQgbmV3UGFyZW50ID0gZGF0YS5uYW1lO1xuICAgICAgICBsZXQgZm9sZGVyID0gZmluZEZvbGRlcihuZXdQYXJlbnQsIGZvbGRlcnNbMF0pXG4gICAgICAgIGlmICh0eXBlID09IFwiTkVXRk9MREVSXCIpIHtcbiAgICAgICAgICAgIGxldCBlbXB0eUZvbGRlckluZGV4ID0gZm9sZGVycy5maW5kSW5kZXgoZm9sZGVyID0+IGZvbGRlci50eXBlID09PSBcIk5ld0ZvbGRlclwiKTtcbiAgICAgICAgICAgIGlmIChlbXB0eUZvbGRlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgbmV3Rm9sZGVyXG4gICAgICAgICAgICAgICAgZm9sZGVycy5zcGxpY2UoZW1wdHlGb2xkZXJJbmRleCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBub0ZvbGRlciA9IGZvbGRlcnNbMF07XG4gICAgICAgICAgICBub0ZvbGRlci5jb250ZW50cy51bnNoaWZ0KGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT0gXCJDT01QT05FTlRcIikge1xuICAgICAgICAgICAgZm9sZGVyLmNvbnRlbnRzID0gZGF0YS5jb250ZW50cztcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29udGVudEZyb21QYXJlbnQoZm9sZGVycywgb2xkUGFyZW50LCBjb250ZW50KVxuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBcIkZPTERFUlwiKSB7XG4gICAgICAgICAgICBmb2xkZXIuY29udGVudHMgPSBkYXRhLmNvbnRlbnRzO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVGb2xkZXJGcm9tUGFyZW50KGZvbGRlcnMsIG9sZFBhcmVudCwgY29udGVudCwgbmV3UGFyZW50KVxuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9wcy5vbkZvbGRlcnNVcGRhdGUoZm9sZGVycyk7XG5cbiAgICB9XG5cbiAgICBvbkZvbGRlclN0YXR1c0NoYW5nZWQoZm9sZGVyKXtcbiAgICAgICAgLy8gZmluZCBmb2xkZXIsXG4gICAgICAgIGxldCBmb2xkZXJUb1VwZGF0ZSA9IGZpbmRGb2xkZXIoZm9sZGVyLm5hbWUsIHRoaXMuc3RhdGUuZm9sZGVyc1swXSlcbiAgICAgICAgLy8gdXBkYXRlIGl0IGluIGZvbGRlcnMsXG4gICAgICAgIGZvbGRlclRvVXBkYXRlLnN0YXR1cyA9IGZvbGRlci5zdGF0dXM7XG4gICAgICAgIHRoaXMucHJvcHMub25Gb2xkZXJzVXBkYXRlKHRoaXMuc3RhdGUuZm9sZGVycylcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmb2xkZXJTdHJ1Y3R1cmUodGhpcy5wcm9wcywgdGhpcy5vbkZvbGRlclVwZGF0ZS5iaW5kKHRoaXMpLCB0aGlzLm9uRm9sZGVyU3RhdHVzQ2hhbmdlZC5iaW5kKHRoaXMpKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9sZGVycztcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5ld0ZvbGRlcntcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5uZXdGb2xkZXIgaXtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA3cHg7XFxufVxcblxcbi5uZXdGb2xkZXIuZHJhZ092ZXIgaXtcXG4gICAgYW5pbWF0aW9uOiBibGluayAuNXMgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgYmxpbmt7XFxuICAgIGZyb20geyAgICBcXG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIH1cXG4gICAgdG8ge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxufVxcbi5mYS5mYS1mb2xkZXIgfiB1bCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5mYS5mYS1mb2xkZXItb3BlbiB+IHVsIHtcXG4gICAgZGlzcGxheTpibG9jaztcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IEZvbGRlciBmcm9tIFwiLi9Gb2xkZXJcIjtcbmltcG9ydCBDb21wb25lbnR0IGZyb20gXCIuLi8uLi8uLi9Db21wb25lbnRzL0NvbXBvbmVudHRcIjtcblxubGV0IHNlbGVjdGVkQ29tcG9uZW50LCBvblNlbGVjdGlvbiwgb25Gb2xkZXJVcGRhdGUsIGNvbXBvbmVudHMsIGZvbGRlcnMsIG9uRm9sZGVyU3RhdHVzQ2hhbmdlZDtcblxuZnVuY3Rpb24gaW5pdGlhbGlzZVByb3BzKHByb3BzLCBjaGVja0ZvbGRlciwgeCl7XG4gICAgZm9sZGVycyA9IHByb3BzLmZvbGRlcnM7XG4gICAgc2VsZWN0ZWRDb21wb25lbnQgPSBwcm9wcy5zZWxlY3RlZENvbXBvbmVudDtcbiAgICBvblNlbGVjdGlvbiA9IHByb3BzLm9uU2VsZWN0aW9uO1xuICAgIGNvbXBvbmVudHMgPSBwcm9wcy5jb21wb25lbnRzO1xuICAgIG9uRm9sZGVyVXBkYXRlID0gY2hlY2tGb2xkZXI7XG4gICAgb25Gb2xkZXJTdGF0dXNDaGFuZ2VkPXg7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb2xkZXIgKGZvbGRlciwgaSl7XG4gICAgbGV0IGNvbnRlbnRzID0gZm9sZGVyLmNvbnRlbnRzO1xuXG4gICAgcmV0dXJuIDxGb2xkZXJcbiAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgZm9sZGVyPXtmb2xkZXJ9XG4gICAgICAgICAgICAgICAgZm9sZGVycz17Zm9sZGVyc31cbiAgICAgICAgICAgICAgICBjb250ZW50cz17Y29udGVudHMubWFwKCBwcm9jZXNzQ29udGVudCApfVxuICAgICAgICAgICAgICAgIG9uRm9sZGVyU3RhdHVzQ2hhbmdlZD17b25Gb2xkZXJTdGF0dXNDaGFuZ2VkfVxuICAgICAgICAgICAgICAgIG9uRm9sZGVyVXBkYXRlPXtvbkZvbGRlclVwZGF0ZX0vPlxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29udGVudCAoY29udGVudCwgaSl7XG5cbiAgICAvLyBDaGVjayBpZiBjb250ZW50IGlzIGEgY29tcG9uZW50IG5hbWUuXG4gICAgaWYodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIgKXtcblxuICAgICAgICByZXR1cm4gPENvbXBvbmVudHQgXG4gICAgICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXtjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZT09PWNvbnRlbnQpfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlPXtvblNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICB9XG4gICAgLy8gZWxzZSBpdHMgYSBmb2xkZXIgdHlwZS5cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGZvbGRlciA9IGNvbnRlbnQ7XG4gICAgICAgIHJldHVybiA8Rm9sZGVyXG4gICAgICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgZm9sZGVyPXtmb2xkZXJ9XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcnM9e2ZvbGRlcnN9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzPXtmb2xkZXIuY29udGVudHMubWFwKCBwcm9jZXNzQ29udGVudCApfVxuICAgICAgICAgICAgICAgICAgICBvbkZvbGRlclN0YXR1c0NoYW5nZWQ9e29uRm9sZGVyU3RhdHVzQ2hhbmdlZH1cbiAgICAgICAgICAgICAgICAgICAgb25Gb2xkZXJVcGRhdGU9e29uRm9sZGVyVXBkYXRlfS8+XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBmb2xkZXJTdHJ1Y3R1cmUocHJvcHMsIG9uRm9sZGVyVXBkYXRlLCBvbkZvbGRlclN0YXR1c0NoYW5nZWQpe1xuICAgIGxldCBmb2xkZXJzID0gcHJvcHMuZm9sZGVycztcblxuICAgIGluaXRpYWxpc2VQcm9wcyhwcm9wcywgb25Gb2xkZXJVcGRhdGUsIG9uRm9sZGVyU3RhdHVzQ2hhbmdlZCk7XG5cbiAgICByZXR1cm4oZm9sZGVycy5tYXAocHJvY2Vzc0ZvbGRlcikpXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuaW1wb3J0IE5ld0ZvbGRlciBmcm9tIFwiLi4vTmV3Rm9sZGVyXCI7XG5cbmltcG9ydCB7IHRvZ2dsZUZvbGRlcn0gZnJvbSBcIi4vUmVkdWNlclwiO1xuaW1wb3J0IHtkcm9wSGFuZGxlciwgZHJhZ092ZXJIYW5kbGVyLCBkcmFnTGVhdmVIYW5kbGVyLCBmb2xkZXJTdGFydERyYWd9IGZyb20gXCIuL0V2ZW50c1wiO1xuXG5jbGFzcyBGb2xkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGljb25TdGF0dXM6IFwiZmEgZmEtZm9sZGVyXCIsXG4gICAgICAgICAgICBmb2xkZXJDbGFzczogXCJuZXdGb2xkZXJcIixcbiAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMuZm9sZGVyLm5hbWUsXG4gICAgICAgICAgICBjb250ZW50czogdGhpcy5wcm9wcy5mb2xkZXIuY29udGVudHMsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnByb3BzLmZvbGRlci50eXBlLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnByb3BzLmZvbGRlci5zdGF0dXNcbiAgICAgICAgfTtcbiAgICB9XG5cblxuICAgIG5ld0ZvbGRlcihmb2xkZXIpe1xuICAgICAgICB0aGlzLnByb3BzLm9uRm9sZGVyVXBkYXRlKGZvbGRlciwgXCJORVdGT0xERVJcIilcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IGZvbGRlciA9IHRoaXMucHJvcHMuZm9sZGVyO1xuICAgICAgICBsZXQgY29udGVudHMgPSB0aGlzLnByb3BzLmNvbnRlbnRzO1xuICAgICAgICBsZXQgaWNvblN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzID09PSBcIm9wZW5cIiA/IFwiZmEgZmEtZm9sZGVyLW9wZW5cIiA6IFwiZmEgZmEtZm9sZGVyXCI7XG4gICAgICAgIGlmKGZvbGRlci50eXBlPT1cIk5ld0ZvbGRlclwiKXtcbiAgICAgICAgICAgIHJldHVybiAoPE5ld0ZvbGRlciBvbk5ld0ZvbGRlcj17dGhpcy5uZXdGb2xkZXIuYmluZCh0aGlzKX0vPilcbiAgICAgICAgfVxuICAgICAgICBpZihmb2xkZXIudHlwZT09XCJmb2xkZXJcIil7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5mb2xkZXJDbGFzc31cbiAgICAgICAgICAgICAgICAgICAgZGF0YS1mb2xkZXItbmFtZT17Zm9sZGVyLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJvcD17ZHJvcEhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnT3Zlcj17ZHJhZ092ZXJIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ0xlYXZlPXtkcmFnTGVhdmVIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0PXtmb2xkZXJTdGFydERyYWcuYmluZCh0aGlzKX0gPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e2ljb25TdGF0dXN9IG9uQ2xpY2s9e3RvZ2dsZUZvbGRlci5iaW5kKHRoaXMpfT48L2k+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzTmFtZT1cImZvbGRlclwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgZm9sZGVyIG5hbWVcIiByZWFkT25seSB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfS8+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnN0YXR1cyA9PT0gXCJvcGVuXCIgPyBjb250ZW50cyA6IG51bGx9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmKGZvbGRlci50eXBlPT1cIm5vRm9sZGVyXCIpe1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuc3RhdGUuZm9sZGVyQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEtZm9sZGVyLW5hbWU9e2ZvbGRlci5uYW1lfVxuICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyb3A9e2Ryb3BIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI9e2RyYWdPdmVySGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZT17ZHJhZ0xlYXZlSGFuZGxlci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0PXtmb2xkZXJTdGFydERyYWcuYmluZCh0aGlzKX0gID5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRlbnRzfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9sZGVyO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJpbnB1dC5mb2xkZXJ7XFxuICAgIGJvcmRlcjpub25lO1xcbiAgICBiYWNrZ3JvdW5kOm5vbmU7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxM3B4O1xcbiAgICB3aWR0aDogMTU1cHg7XFxufVxcblxcbi5uZXdGb2xkZXJ7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4ubmV3Rm9sZGVyIGl7XFxuICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLDAsMCwwLjkpO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgcGFkZGluZzogN3B4O1xcbn1cXG5cXG4ubmV3Rm9sZGVyLmRyYWdPdmVyIGl7XFxuICAgIGFuaW1hdGlvbjogYmxpbmsgLjVzIGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGJsaW5re1xcbiAgICBmcm9tIHsgICAgXFxuICAgICAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICB9XFxuICAgIHRvIHtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbn1cXG4uZmEuZmEtZm9sZGVyIH4gdWwge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG4uZmEuZmEtZm9sZGVyLW9wZW4gfiB1bCB7XFxuICAgIGRpc3BsYXk6YmxvY2s7XFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuY2xhc3MgTmV3Rm9sZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzdGF0dXM6IFwiZmEgZmEtZm9sZGVyXCIsXG4gICAgICAgICAgICBuZXdGb2xkZXJDbGFzczogXCJuZXdGb2xkZXJcIixcbiAgICAgICAgICAgIGZvbGRlck5hbWU6IFwiXCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb2xkZXJOYW1lQ2hhbmdlZChlKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmb2xkZXJOYW1lOiBlLmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzYXZlRm9sZGVyTmFtZU9uRW50ZXIoZSl7XG4gICAgICAgIGlmKGUua2V5PT09XCJFbnRlclwiKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25OZXdGb2xkZXIoe1xuICAgICAgICAgICAgICAgIG5hbWU6dGhpcy5zdGF0ZS5mb2xkZXJOYW1lLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOltdLFxuICAgICAgICAgICAgICAgIHR5cGU6XCJmb2xkZXJcIixcbiAgICAgICAgICAgICAgICBzdGF0dXM6XCJjbG9zZWRcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5uZXdGb2xkZXJDbGFzc30+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9e3RoaXMuc3RhdGUuc3RhdHVzfT48L2k+XG4gICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb2xkZXJcIiBcbiAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e3RydWV9IFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgZm9sZGVyIG5hbWVcIlxuICAgICAgICAgICAgICAgIHZhbHVlID0ge3RoaXMuc3RhdGUuZm9sZGVyTmFtZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5mb2xkZXJOYW1lQ2hhbmdlZC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMuc2F2ZUZvbGRlck5hbWVPbkVudGVyLmJpbmQodGhpcyl9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdGb2xkZXI7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5uZXdGb2xkZXIgaXtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA3cHg7XFxufVxcblxcbi5uZXdGb2xkZXIuZHJhZ092ZXIgaXtcXG4gICAgYW5pbWF0aW9uOiBibGluayAuNXMgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgYmxpbmt7XFxuICAgIGZyb20geyAgICBcXG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIH1cXG4gICAgdG8ge1xcbiAgICAgICAgY29sb3I6IGdyZWVuO1xcbiAgICB9XFxufVwiLCBcIlwiXSk7XG5cbiIsImZ1bmN0aW9uIG9wZW5Gb2xkZXIoKXtcbiAgICBsZXQgc3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKTtcbiAgICBzdGF0ZS5zdGF0dXMgPSBcIm9wZW5cIjtcbiAgICB0aGlzLnByb3BzLm9uRm9sZGVyU3RhdHVzQ2hhbmdlZChzdGF0ZSlcbn1cblxuZnVuY3Rpb24gY2xvc2VGb2xkZXIoKXtcbiAgICBsZXQgc3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKTtcbiAgICBzdGF0ZS5zdGF0dXMgPSBcImNsb3NlZFwiO1xuICAgIHRoaXMucHJvcHMub25Gb2xkZXJTdGF0dXNDaGFuZ2VkKHN0YXRlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRm9sZGVyKCl7XG4gICAgaWYodGhpcy5zdGF0ZS5zdGF0dXMgPT09IFwiY2xvc2VkXCIpIHtcbiAgICAgICAgb3BlbkZvbGRlci5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlRm9sZGVyLmNhbGwodGhpcyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZmluZEZvbGRlciB9IGZyb20gXCIuLi9maW5kRm9sZGVyc1wiO1xuXG5mdW5jdGlvbiBoYW5kbGVDb21wb25lbnREcm9wKGNvbXBvbmVudE5hbWUsIG9sZFBhcmVudCl7XG4gICAgbGV0IGNvbnRlbnRzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmNvbnRlbnRzKTtcbiAgICBcbiAgICBjb250ZW50cy5wdXNoKGNvbXBvbmVudE5hbWUpXG5cbiAgICB0aGlzLnByb3BzLm9uRm9sZGVyVXBkYXRlKHtcbiAgICAgICAgbmFtZTogdGhpcy5zdGF0ZS5uYW1lLFxuICAgICAgICBjb250ZW50czogY29udGVudHMsXG4gICAgICAgIHR5cGU6IFwiZm9sZGVyXCIsXG4gICAgICAgIHN0YXR1czogXCJvcGVuXCJcbiAgICB9LFxuICAgIFwiQ09NUE9ORU5UXCIsXG4gICAgb2xkUGFyZW50LFxuICAgIGNvbXBvbmVudE5hbWUpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvbGRlckRyb3AoZm9sZGVyTmFtZSwgb2xkUGFyZW50KXtcbiAgICBsZXQgY29udGVudHMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuY29udGVudHMpO1xuXG4gICAgLy8gMS4gRmluZCBmb2xkZXIgb2JqZWN0LlxuICAgIGxldCBkcm9wcGVkRm9sZGVyID0gZmluZEZvbGRlcihmb2xkZXJOYW1lLCB0aGlzLnByb3BzLmZvbGRlcnNbMF0pXG5cbiAgICBjb250ZW50cy5wdXNoKGRyb3BwZWRGb2xkZXIpXG5cbiAgICAvLyAyLiBSZW1vdmUgaXQgZnJvbSBpdHMgcGFyZW50IChwYXJlbnRGb2xkZXJOYW1lKVxuICAgIC8vIGRvIHNvbWV3aGVyZSBlbHNlLiBoZWFkIGh1cnRzXG5cbiAgICAvLyBDaGVjayBpZiBpdCBpcyBhIGZvbGRlci4gQWxzbyBjaGVjayBpZiB3ZSBhcmUgbm90IGRyb3BwaW5nIG9uIHRoZSBvcmlnaW5hbCBmb2xkZXIuIG1heSBiZSByZW1vdmUgaXQgZnJvbSB0aGUgZG9tLiBOT1BFLiBcbiAgICBpZiAoZm9sZGVyTmFtZSAmJiBmb2xkZXJOYW1lICE9PSB0aGlzLnN0YXRlLm5hbWUpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZvbGRlclVwZGF0ZSh7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnN0YXRlLm5hbWUsXG4gICAgICAgICAgICBjb250ZW50czogY29udGVudHMsXG4gICAgICAgICAgICB0eXBlOiBcImZvbGRlclwiLFxuICAgICAgICAgICAgc3RhdHVzOiBcIm9wZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcIkZPTERFUlwiLFxuICAgICAgICBvbGRQYXJlbnQsXG4gICAgICAgIGZvbGRlck5hbWUpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJvcEhhbmRsZXIoZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBjb21wb25lbnROYW1lID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJjb21wb25lbnQtbmFtZVwiKTtcbiAgICBsZXQgZm9sZGVyTmFtZSA9IGV2LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiZm9sZGVyLW5hbWVcIik7XG4gICAgbGV0IG9sZFBhcmVudCA9IGV2LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwicGFyZW50LWZvbGRlci1uYW1lXCIpXG4gICAgbGV0IG5ld1BhcmVudCA9IHRoaXMuc3RhdGUubmFtZTtcblxuICAgIGlmKG9sZFBhcmVudCA9PT0gbmV3UGFyZW50ICl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9sZGVyQ2xhc3M6IFwibmV3Rm9sZGVyXCIsXG4gICAgICAgICAgICBzdGF0dXM6IFwiY2xvc2VkXCJcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGNvbXBvbmVudCBuYW1lIGlzIG51bGwsIHRoZW4gaXQgaXMgYSBmb2xkZXIgZHJvcHBlZCBvbiBmb2xkZXJcbiAgICBpZiAoY29tcG9uZW50TmFtZSA9PT0gXCJcIikge1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBoYXBwZW4uXG4gICAgICAgIGlmIChmb2xkZXJOYW1lID09IFwibnVsbFwiIHx8IGZvbGRlck5hbWUgPT0gXCJcIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZvbGRlciBjYW5ub3QgYmUgZW1wdHlcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVGb2xkZXJEcm9wLmNhbGwodGhpcywgZm9sZGVyTmFtZSwgb2xkUGFyZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGhhbmRsZUNvbXBvbmVudERyb3AuY2FsbCh0aGlzLCBjb21wb25lbnROYW1lLCBvbGRQYXJlbnQpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiRHJvcCBmcm9tIGZvbGRlclwiKTtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhZ092ZXJIYW5kbGVyKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9sZGVyQ2xhc3M6IFwibmV3Rm9sZGVyIGRyYWdPdmVyXCIsXG4gICAgICAgIHN0YXR1czogXCJvcGVuXCJcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhZ0xlYXZlSGFuZGxlcihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvbGRlckNsYXNzOiBcIm5ld0ZvbGRlclwiLFxuICAgICAgICBzdGF0dXM6IFwiY2xvc2VkXCJcbiAgICB9KVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBmb2xkZXJTdGFydERyYWcoZSkge1xuICAgIGxldCBuYW1lID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtZm9sZGVyLW5hbWVcIilcbiAgICBsZXQgcGFyZW50ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2xkZXItbmFtZVwiKVxuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJmb2xkZXItbmFtZVwiLCBuYW1lKTtcbiAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwicGFyZW50LWZvbGRlci1uYW1lXCIsIHBhcmVudCk7XG4gICAgY29uc29sZS5sb2coYEZvbGRlciAke25hbWV9IGRyYWdlZCB3aXRoIHBhcmVudCAke3BhcmVudH1gKVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gRXZlbnRzLlxuXG5pbXBvcnQge3NlbGVjdGlvbkNoYW5nZWR9IGZyb20gXCIuL0V2ZW50c1wiO1xuXG4vLyBDb21wb25lbnRzLlxuXG5pbXBvcnQgVGh1bWJuYWlsVmlldyBmcm9tIFwiLi9UaHVtYm5haWxWaWV3XCI7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0ICBcIi4vU3R5bGUuY3NzXCI7XG5cbmNsYXNzIENvbXBvbmVudHQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNlbGVjdGVkQ29tcG9uZW50OiB0aGlzLnByb3BzLnNlbGVjdGVkQ29tcG9uZW50XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkQ29tcG9uZW50RGV0YWlscyhlKXtcblxuICAgICAgICAvKiogUGFzcyBkZXRhaWxzIGFib3V0IGNvbXBvbmVudCBvciBmb2xkZXIgaW4gdGhlIGRyYWcgZXZlbnQgKi9cbiAgICAgICAgXG4gICAgICAgIGxldCBuYW1lID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtbmFtZVwiKVxuXG4gICAgICAgIGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy50aHVtYm5haWwnKS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgICAgICBlLnRhcmdldC5xdWVyeVNlbGVjdG9yKCcuY29tcG9uZW50TmFtZScpLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU0VUVElORyBEQVRBXCIpXG5cbiAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcImNvbXBvbmVudC1uYW1lXCIsIG5hbWUpO1xuICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwicGFyZW50LWZvbGRlci1uYW1lXCIsIGUuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZm9sZGVyLW5hbWVcIikpXG5cbiAgICAgICAgY29uc29sZS5sb2coZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcImNvbXBvbmVudC1uYW1lXCIpKVxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBwcm9wcy5zZWxlY3RlZENvbXBvbmVudDtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxpIFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSB7c2VsZWN0ZWRDb21wb25lbnQgJiYgcHJvcHMuY29tcG9uZW50Lm5hbWU9PT1zZWxlY3RlZENvbXBvbmVudC5uYW1lID8gXCJzZWxlY3RlZCBjb21wb25lbnQgYmFja2dyb3VuZFwiOiBcImNvbXBvbmVudCBiYWNrZ3JvdW5kXCJ9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2sgPSB7c2VsZWN0aW9uQ2hhbmdlZC5iaW5kKHRoaXMsY29tcG9uZW50Lm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBvbkNvbnRleHRNZW51ID0ge3NlbGVjdGlvbkNoYW5nZWQuYmluZCh0aGlzLGNvbXBvbmVudC5uYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB7cHJvcHMuaW5kZXh9XG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZT1cInRydWVcIiBcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPXtjb21wb25lbnQubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ9e3RoaXMuYWRkQ29tcG9uZW50RGV0YWlscy5iaW5kKHRoaXMpfT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY29tcG9uZW50TmFtZSBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjb21wb25lbnQubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaWRkZW4gdGh1bWJuYWlsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGh1bWJuYWlsVmlldyBjb21wb25lbnQ9e2NvbXBvbmVudH0vPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudHQ7XG4iLCJcbi8vIFB1YmxpYyBmdW5jdGlvbnNcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGlvbkNoYW5nZWQoY29tcG9uZW50TmFtZSwgZSkge1xuXG4gICAgLyoqIFBhc3MgbWVzc2FnZSB0byBDb21wb25lbnRzIGFib3V0IHNlbGVjdGlvbiBjaGFuZ2UgICovXG5cbiAgICB0aGlzLnByb3BzLm9uU2VsZWN0aW9uQ2hhbmdlKGNvbXBvbmVudE5hbWUsIGUpO1xufSIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBDb21wb25lbnRzLlxuaW1wb3J0IER5bmFtaWNDb21wb25lbnQgZnJvbSBcIi4uLy4uLy4uL1ByZXZpZXcvRHluYW1pY0NvbXBvbmVudFwiO1xuXG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIFRodW1ibmFpbFZpZXcgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSB8fCBcIlwiLFxuICAgICAgICAgICAgc3RhdGU6IHRoaXMucHJvcHMuc3RhdGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wcm9wcy5jb21wb25lbnQpKVxuXG4gICAgICAgIGlmKCBjb21wb25lbnQubmFtZT09XCJcIil7XG4gICAgICAgICAgICByZXR1cm4gKDxkaXY+PC9kaXY+KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbFZpZXdcIj5cbiAgICAgICAgICAgICAgICA8RHluYW1pY0NvbXBvbmVudCBjb21wb25lbnQ9e2NvbXBvbmVudH0vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRodW1ibmFpbFZpZXc7IiwibGV0IHByZXZQYWdlWCwgcHJldlBhZ2VZO1xubGV0IG1heENvdW50ID0gNTA7XG5sZXQgY291bnQgPSAwIDtcblxuZnVuY3Rpb24gbW92ZXNBYm92ZShQYWdlWCwgUGFnZVkpIHtcblxuICAgIHJldHVybiBwcmV2UGFnZVkgPCBQYWdlWSA/IHRydWUgOiBmYWxzZVxufVxuXG5mdW5jdGlvbiBtb3Zlc0JlbG93KFBhZ2VYLCBQYWdlWSkge1xuXG4gICAgcmV0dXJuIHByZXZQYWdlWSA+IFBhZ2VZID8gZmFsc2UgOiB0cnVlXG59XG5cbmZ1bmN0aW9uIG1vdmVzUmlnaHQoUGFnZVgsIFBhZ2VZKSB7XG4gICAgXG4gICAgcmV0dXJuIHByZXZQYWdlWSA8IFBhZ2VZID8gdHJ1ZTogZmFsc2VcblxufVxuXG5mdW5jdGlvbiBtb3Zlc0xlZnQoUGFnZVgsIFBhZ2VZKSB7XG4gICAgcmV0dXJuIHByZXZQYWdlWSA+IFBhZ2VZID8gdHJ1ZTogZmFsc2VcblxufVxuXG4vKiogUmV0dXJucyB0aGUgZGlyZWN0aW9uIG9mIG5ldyBjb21wb25lbnQgaW5zZXJ0aW9uICovXG5cbmV4cG9ydCBmdW5jdGlvbiAgaW5zZXJ0RGlyZWN0aW9uKFBhZ2VYLCBQYWdlWSl7XG4gICAgcHJldlBhZ2VYID0gcHJldlBhZ2VYIHx8IFBhZ2VYO1xuICAgIHByZXZQYWdlWSA9IHByZXZQYWdlWSB8fCBQYWdlWTtcblxuICAgIGNvdW50Kys7XG4gICAgaWYoY291bnQ9PT1tYXhDb3VudCl7XG5cbiAgICAgICAgLy8gQ2hlY2sgbWF4IGRpZmZlcmVuY2UuXG5cbiAgICAgICAgY29uc29sZS5sb2cocHJldlBhZ2VYLCBQYWdlWCk7XG5cbiAgICAgICAgY291bnQgPTA7XG4gICAgICAgIHByZXZQYWdlWSA9IFBhZ2VZO1xuICAgICAgICBwcmV2UGFnZVggPSBQYWdlWDtcblxuICAgICAgICAvLyBpZih4RGlmZj55RGlmZil7YGBcbiAgICAgICAgLy8gICAgIGlmKG1vdmVzUmlnaHQoUGFnZVgsIFBhZ2VZKSl7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VZID0gUGFnZVk7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VYID0gUGFnZVg7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIFwiSU5TRVJUX1JJR0hUXCI7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICBpZihtb3Zlc0xlZnQoUGFnZVgsIFBhZ2VZKSl7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VZID0gUGFnZVk7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VYID0gUGFnZVg7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIFwiSU5TRVJUX0xFRlRcIjtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGlmKHlEaWZmPnhEaWZmKXtcbiAgICAgICAgLy8gICAgIGlmKG1vdmVzQWJvdmUoUGFnZVgsIFBhZ2VZKSl7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VZID0gUGFnZVk7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VYID0gUGFnZVg7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIFwiSU5TRVJUX0FCT1ZFXCI7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICBpZihtb3Zlc0JlbG93KFBhZ2VYLCBQYWdlWSkpe1xuICAgICAgICAvLyAgICAgICAgIHByZXZQYWdlWSA9IFBhZ2VZO1xuICAgICAgICAvLyAgICAgICAgIHByZXZQYWdlWCA9IFBhZ2VYO1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiBcIklOU0VSVF9CRUxPV1wiO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtjb252ZXJ0VG9SZWFjdH0gZnJvbSBcIi4vQ29kZUdlbmVyYXRvci9SZWFjdFwiO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50KXtcblxuICAgIGxldCBjb21wb25lbnRTdHJpbmcgPSBjb252ZXJ0VG9SZWFjdChjb21wb25lbnQpO1xuXG4gICAgLy8gZXZhbCBkb2VzIG5vdCBldmFsdWF0ZSBjbGFzcyBpZiBub3QgZXhjbG9zZWQgaW4gcGFyYW50aGVzaXMuXG4gICAgcmV0dXJuIGV2YWwoQmFiZWwudHJhbnNmb3JtKGNvbXBvbmVudFN0cmluZywgeyBwcmVzZXRzOiBbJ3JlYWN0J10sIHBsdWdpbnM6IFtcInRyYW5zZm9ybS1lczIwMTUtY2xhc3Nlc1wiXSAgfSkuY29kZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY3JlYXRlQ29tcG9uZW50XG59IiwiaW1wb3J0IHtzYW1wbGV9IGZyb20gXCIuL1NhbXBsZVwiO1xuXG5mdW5jdGlvbiBwdXNoSGlzdG9yeShjb21wb25lbnRzKXtcblxuICAgIHdpbmRvdy5lZGl0b3JIaXN0b3J5ID0gcmVhZERhdGEoXCJ1aS1lZGl0b3ItaGlzdG9yeVwiKTtcbiAgICBlZGl0b3JIaXN0b3J5LnB1c2goY29tcG9uZW50cyk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1aS1lZGl0b3ItaGlzdG9yeVwiLEpTT04uc3RyaW5naWZ5KGVkaXRvckhpc3RvcnkpICk7XG59XG5cbi8vIElmIGVtcHR5LCByZXR1cm4gZW1wdHkgYXJyYXkuXG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRGF0YShrZXkpe1xuXG4gICAgaWYoa2V5ID09PVwidWktZWRpdG9yXCIpe1xuICAgICAgICBpZighd2luZG93LmNvbXBvbmVudHMgKXtcbiAgICAgICAgICAgIHdpbmRvdy5jb21wb25lbnRzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKSB8fCBzYW1wbGU7XG4gICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHdpbmRvdy5jb21wb25lbnRzKSk7XG4gICAgfVxuICAgIGlmKGtleT09PVwidWktZWRpdG9yLWhpc3RvcnlcIil7XG4gICAgICAgIGxldCBoaXN0b3J5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgXG4gICAgICAgIGlmKGhpc3RvcnkpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShoaXN0b3J5KTtcbiAgICB9XG4gICAgaWYoa2V5ID09PVwiZm9sZGVyc1wiKXtcbiAgICAgICAgbGV0IGZvbGRlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpO1xuXG4gICAgICAgIGlmKGZvbGRlcnMgPT09IG51bGwpe1xuICAgICAgICAgICAgcmV0dXJuIFt7XCJ0eXBlXCI6XCJub0ZvbGRlclwiLFwiY29udGVudHNcIjpbe1wibmFtZVwiOlwiVGVtcGxhdGVzXCIsXCJjb250ZW50c1wiOltcIlBhZ2VcIl0sXCJ0eXBlXCI6XCJmb2xkZXJcIixcInN0YXR1c1wiOlwiY2xvc2VkXCJ9LHtcIm5hbWVcIjpcIkNvbXBvbmVudHNcIixcImNvbnRlbnRzXCI6W1wiTW9kYWxcIixcIlJlc2V0UGFzc3dvcmRNb2RhbFwiLFwiRm9yZ290UGFzc3dvcmRcIixcIkNhcm91c2FsXCIsXCJQcm9kdWN0XCIsXCJDYXJvdXNhbF9TaW5nbGVcIixcIkNhcm91c2FsX0RvdWJsZVwiXSxcInR5cGVcIjpcImZvbGRlclwiLFwic3RhdHVzXCI6XCJvcGVuXCJ9LHtcIm5hbWVcIjpcIkVsZW1lbnRzXCIsXCJjb250ZW50c1wiOltcIkVtYWlsSW5wdXRcIixcIlRlcm1zQW5kU2VydmljZVwiLFwiU3VibWl0QnV0dG9uXCIsXCJDYW5jZWxCdXR0b25cIixcIlByaXZhY3lBbmRQb2xpY3lcIixcIlJlc2V0UGFzc3dvcmRGb3JtXCIsXCJGb3JtXCJdLFwidHlwZVwiOlwiZm9sZGVyXCIsXCJzdGF0dXNcIjpcImNsb3NlZFwifV0sXCJuYW1lXCI6XCJub0ZvbGRlclwiLFwic3RhdHVzXCI6XCJvcGVuXCJ9XVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb2xkZXJzO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVEYXRhKGtleSwgY29tcG9uZW50cywgbm9QdXNoKXtcblxuICAgIGlmKGtleT09XCJmb2xkZXJzXCIpe1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHMpKTtcbiAgICB9XG4gICAgaWYoa2V5PT1cInVpLWVkaXRvclwiKXtcbiAgICAgICAgY29uc29sZS5sb2coXCJXUklURVwiKVxuICAgICAgICB3aW5kb3cuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50cykpO1xuICAgICAgICBpZighbm9QdXNoKXtcbiAgICAgICAgICAgIHB1c2hIaXN0b3J5KGNvbXBvbmVudHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZENvbXBvbmVudChjb21wb25lbnROYW1lKXtcblxuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgaWYoIWNvbXBvbmVudHMpe1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1jb21wb25lbnROYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQ29tcG9uZW50KHBhcmVudCkge1xuXG4gICAgaWYoIUFycmF5LmlzQXJyYXkocGFyZW50KSAmJiBwYXJlbnQubmFtZSl7XG4gICAgICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoIFwidWktZWRpdG9yXCIpO1xuICAgICAgICBsZXQgaW5kZXggPSBjb21wb25lbnRzLmZpbmRJbmRleChjb21wPT5jb21wLm5hbWUgPT09IHBhcmVudC5uYW1lKTtcbiAgICAgICAgY29tcG9uZW50c1tpbmRleF0gPSBwYXJlbnQ7XG4gICAgICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBjb21wb25lbnRzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BIaXN0b3J5KCl7XG4gICAgXG4gICAgbGV0IGVkaXRvckhpc3RvcnkgPSByZWFkRGF0YShcInVpLWVkaXRvci1oaXN0b3J5XCIpO1xuICAgIGlmKCFlZGl0b3JIaXN0b3J5KXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsYXN0SXRlbSA9IGVkaXRvckhpc3RvcnkucG9wKCk7XG4gICAgXG4gICAgaWYoIWVkaXRvckhpc3Rvcnkpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yLWhpc3RvcnlcIiwgZWRpdG9ySGlzdG9yeSwgdHJ1ZSk7XG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgbGFzdEl0ZW0sIHRydWUpO1xufSIsImxldCBzYW1wbGUgPVtcbiAge1xuICAgIFwibmFtZVwiOiBcIkZvcmdvdFBhc3N3b3JkXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT1cXFwidnNCdXR0b25cXFwiPjxidXR0b24gaWQ9XFxcImYxMjNcXFwiPntzdGF0ZS5idXR0b25UZXh0fTwvYnV0dG9uPjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5zaG93XCIsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uUGFzc3dvcmRGb3Jnb3R0ZW5cIixcbiAgICAgICAgXCJpZFwiOiBcImYxMjNcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwiYnV0dG9uVGV4dFxcXCI6XFxcIkZvcmdvdCBQYXNzd29yZFxcXCJ9XCIsXG4gICAgXCJzdHlsZVwiOiBcIi52c0J1dHRvbntcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XFxuXFxuXFxuLnZzQnV0dG9uIGJ1dHRvbntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjZWY1Zjk2O1xcbmJvcmRlcjogMXB4IHNvbGlkO1xcbn1cXG5cXG4udnNCdXR0b24gYnV0dG9uOmhvdmVye1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG59XCIsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW11cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIk1vZGFsXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuPGhlYWRlcj5cXG4gIDxoMz5Gb3Jnb3QgUGFzc3dvcmQ8L2gzPlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwiY2xvc2VCdXR0b25cXFwiIGlkPVxcXCJ4XFxcIj54PC9idXR0b24+XFxuPC9oZWFkZXI+XFxuPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcbjwvc2VjdGlvbj5cXG48Zm9vdGVyPmZvb3RlcjwvZm9vdGVyPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5uYW1lPVxcXCJcXFwiO1wiLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IHRydWUsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJvbkNsb3NlTW9kYWxcIixcbiAgICAgICAgXCJpZFwiOiBcInhcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwidmFyaWFudFxcXCI6XFxcImluaXRpYWxcXFwifVwiLFxuICAgIFwic3R5bGVcIjogXCIubW9kYWx7XFxuICB3aWR0aDo0MDBweDtcXG4gIGZvbnQtc2l6ZToyMnB4O1xcbiAgcG9zaXRpb246cmVsYXRpdmU7XFxuYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuY29sb3I6IGJsYWNrO1xcbiAgZm9udC1mYW1pbHk6IEJlbnRvblNhbnNMaWdodCxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OjQwMDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuXFxufVxcblxcbi5tb2RhbCBoM3tcXG4gIHBhZGRpbmc6MXJlbTtcXG5mb250LXNpemU6MjZweDtcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNvbnRlbnR7XFxucGFkZGluZzoxcmVtO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCBmb290ZXJ7XFxucGFkZGluZzoxcmVtO1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG4ubW9kYWwgaGVhZGVye1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNsb3NlQnV0dG9ue1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB0b3A6IDIwcHg7XFxufVxcblxcbi5tb2RhbCAuY29udGVudHtcXG4gICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiQ2FuY2VsQnV0dG9uXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT1cXFwidnNCdXR0b25cXFwiPjxidXR0b24+e3N0YXRlLmNhbmNlbEJ1dHRvbn08L2J1dHRvbj48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcXCJjYW5jZWxCdXR0b25cXFwiOlxcXCJDYW5jZWxcXFwifVwiLFxuICAgIFwic3R5bGVcIjogXCIudnNCdXR0b257XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmNvbG9yOiByZ2IoMCwgMCwgMCk7XFxufVxcblxcblxcbi52c0J1dHRvbiBidXR0b257XFxuYm9yZGVyLWNvbG9yOiAjYmYyMTVkO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZDogI2VmNWY5NjtcXG5ib3JkZXI6IDFweCBzb2xpZDtcXG5wYWRkaW5nOiAuNXJlbSAycmVtO1xcbn1cXG5cXG4udnNCdXR0b24gYnV0dG9uOmhvdmVye1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG59XCIsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW11cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIlN1Ym1pdEJ1dHRvblwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInZzQnV0dG9uXFxcIj48YnV0dG9uPntzdGF0ZS5zdWJtaXRCdXR0b259PC9idXR0b24+PC9kaXY+XCIsXG4gICAgXCJldmVudHNcIjogW10sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwic3VibWl0QnV0dG9uXFxcIjpcXFwiU3VibWl0XFxcIn1cIixcbiAgICBcInN0eWxlXCI6IFwiLnZzQnV0dG9ue1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5jb2xvcjogcmdiKDAsIDAsIDApO1xcbn1cXG5cXG5cXG4udnNCdXR0b24gYnV0dG9ue1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6ICNlZjVmOTY7XFxuYm9yZGVyOiAxcHggc29saWQ7XFxucGFkZGluZzogLjVyZW0gMnJlbTtcXG59XFxuXFxuLnZzQnV0dG9uIGJ1dHRvbjpob3ZlcntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJQcml2YWN5QW5kUG9saWN5XCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJwcml2YWN5UG9saWN5XFxcIj5cXG5cXHR7c3RhdGUuY29udGVudH1cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcblxcdFxcXCJjb250ZW50XFxcIjpcXFwiUGxlYXNlIGVudGVyIHRoZSBlbWFpbCBhZGRyZXNzIHlvdSB1c2VkIHRvIGNyZWF0ZSB5b3VyIGFjY291bnQgYW5kIHdlIHdpbGwgc2VuZCB5b3UgYSBsaW5rIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuIFNlZSBQcml2YWN5IFBvbGljeVxcXCJcXG59XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5wcml2YWN5UG9saWN5e1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5mb250LXNpemU6IDExcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW07XFxuICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiVGVybXNBbmRTZXJ2aWNlXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJwcml2YWN5UG9saWN5XFxcIj5cXG57c3RhdGUudmFyaWFudH1cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwiVGhpcyBzaXRlIGlzIHByb3RlY3RlZCBieSByZUNBUFRDSEEgYW5kIHRoZSBHb29nbGUgUHJpdmFjeSBQb2xpY3kgYW5kIFRlcm1zIG9mIFNlcnZpY2UgYXBwbHkuXFxcIn1cIixcbiAgICBcInN0eWxlXCI6IFwiLnByaXZhY3lQb2xpY3l7XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmZvbnQtc2l6ZTogMTFweDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJGb3JtXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8Zm9ybSBjbGFzc05hbWU9XFxcInZzZnJtXFxcIj5cXG48L2Zvcm0+XCIsXG4gICAgXCJldmVudHNcIjogW10sXG4gICAgXCJzdGF0ZVwiOiBcInt9XCIsXG4gICAgXCJzdHlsZVwiOiBcIi52c2ZybXtcXG5oZWlnaHQ6NDAwcHg7XFxud2lkdGg6NDAwcHg7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJFbWFpbElucHV0XCIsXG4gICAgXCJtYXJrdXBcIjogXCI8c3BhbiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnQrXFxcIiBlbWFpbElucHV0XFxcIn0+XFxuXFx0XFxuICAgIDxpbnB1dCBpZD1cXFwiaW5wdXRcXFwiIGNsYXNzTmFtZT1cXFwiZW1haWxcXFwiIHR5cGU9XFxcImVtYWlsXFxcIiBcXHR2YWx1ZT17c3RhdGUuZW1haWx9IC8+U09NRVxcblxcdFxcbiAgICA8bGFiZWw+e3N0YXRlLnBsYWNlaG9sZGVyfTwvbGFiZWw+XFxuICAgIFxcbjwvc3Bhbj5cIixcbiAgICBcImV2ZW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2hhbmdlXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLmVtYWlsID0gZS50YXJnZXQudmFsdWVcIixcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJpbnB1dFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkZvY3VzXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLnZhcmlhbnQgPSBcXFwiZm9jdXNzZWRcXFwiXCIsXG4gICAgICAgIFwiaW5kZXhcIjogMSxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJpbnB1dFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkJsdXJcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwiaWYoc3RhdGUuZW1haWwubGVuZ3RoPT0wKXtcXG4gICAgc3RhdGUucGxhY2Vob2xkZXIgPVxcXCJQbGVhc2UgZW50ZXIgYW4gRW1haWwgQWRkcmVzc1xcXCJcXG4gICAgc3RhdGUudmFyaWFudCA9IFxcXCJwcm9tcHRfaW5wdXRcXFwiXFxufVxcbmVsc2UgaWYoIXN0YXRlLmVtYWlsLmluY2x1ZGVzKFxcXCJAXFxcIikpe1xcbiAgICBzdGF0ZS5wbGFjZWhvbGRlciA9XFxcIlBsZWFzZSBjb3JyZWN0IHRoZSBFbWFpbCBBZGRyZXNzXFxcIlxcblxcdHN0YXRlLnZhcmlhbnQgPSBcXFwicHJvbXB0X2NvcnJlY3RfaW5wdXRcXFwiO1xcbn1cXG5lbHNle1xcblxcdHN0YXRlLnBsYWNlaG9sZGVyID0gXFxcIkVtYWlsIEFkZHJlc3NcXFwiO1xcbiAgICBzdGF0ZS52YXJpYW50ID0gXFxcInZhbGlkX2lucHV0XFxcIlxcbn1cXG5cIixcbiAgICAgICAgXCJpbmRleFwiOiAyLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcImlucHV0XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxuXFx0XFxcImVtYWlsXFxcIjpcXFwiXFxcIixcXG4gICAgXFxcInZhcmlhbnRcXFwiOlxcXCJpbml0aWFsXFxcIixcXG4gICAgXFxcInBsYWNlaG9sZGVyXFxcIjpcXFwiRW1haWwgQWRkcmVzc1xcXCJcXG59XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5lbWFpbElucHV0e1xcblxcdGZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5cXHRwb3NpdGlvbjpyZWxhdGl2ZTtcXG59XFxuXFxuLmVtYWlsSW5wdXQgLmVtYWlse1xcblxcdHBhZGRpbmc6IDE3cHg7XFxuXFx0cGFkZGluZy10b3A6IDI1cHg7XFxuXFx0Ym9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmVtYWlsSW5wdXQgbGFiZWx7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgIGxlZnQ6IDE1cHg7XFxuICAgIHRvcDogLTE4cHg7XFxufVxcblxcbi5wcm9tcHRfaW5wdXQuZW1haWxJbnB1dCBsYWJlbHtcXG5cXHRmb250LXNpemU6IDExcHg7XFxuICAgXFx0bGVmdDogMTVweDtcXG4gICAgdG9wOiAtMThweDtcXG4gICAgY29sb3I6ICNkOTE1NjA7XFxufVxcblxcbi5wcm9tcHRfaW5wdXQgLmVtYWlse1xcbiAgICBjb2xvcjogI2Q5MTU2MDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZWY1Zjk2O1xcbn1cXG5cXG4ucHJvbXB0X2NvcnJlY3RfaW5wdXQgbGFiZWx7XFxuICAgIGNvbG9yOiAjZDkxNTYwO1xcblxcdGZvbnQtc2l6ZTogMTFweDtcXG4gICAgdG9wOiAtMjhweDtcXG4gICAgbGVmdDogOXB4O1xcbn1cXG5cXG4ucHJvbXB0X2NvcnJlY3RfaW5wdXQgLmVtYWlse1xcbiAgIGNvbG9yOiAjZDkxNTYwO1xcbiAgICBib3JkZXItY29sb3I6ICNlZjVmOTY7XFxufVxcblxcbi5mb2N1c3NlZC5lbWFpbElucHV0IGxhYmVse1xcblxcdGZvbnQtc2l6ZTogMTFweDtcXG4gICAgdG9wOiAtMjhweDtcXG4gICAgbGVmdDogOXB4O1xcbn1cXG5cXG4udmFsaWRfaW5wdXQgbGFiZWx7XFxuXFx0Zm9udC1zaXplOiAxMXB4O1xcbiAgICB0b3A6IC0yOHB4O1xcbiAgICBsZWZ0OiA5cHg7XFxufVxcblxcbi5lbWFpbElucHV0IGxhYmVsIHtcXG5cXHR0cmFuc2l0aW9uOiB0b3AgLjNzO1xcbn1cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcImZvY3Vzc2VkXCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwiZW1haWxcIjogXCJcIixcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJmb2N1c3NlZFwiLFxuICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJFbWFpbCBBZGRyZXNzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwicHJvbXB0X2lucHV0XCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwiZW1haWxcIjogXCJcIixcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJwcm9tcHRfaW5wdXRcIixcbiAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IFwiUGxlYXNlIGVudGVyIGFuIEVtYWlsIEFkZHJlc3NcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJwcm9tcHRfY29ycmVjdF9pbnB1dFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcImVtYWlsXCI6IFwiYVwiLFxuICAgICAgICAgIFwidmFyaWFudFwiOiBcInByb21wdF9jb3JyZWN0X2lucHV0XCIsXG4gICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIlBsZWFzZSBjb3JyZWN0IHRoZSBFbWFpbCBBZGRyZXNzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidmFsaWRfaW5wdXRcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJlbWFpbFwiOiBcImFAXCIsXG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwidmFsaWRfaW5wdXRcIixcbiAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IFwiRW1haWwgQWRkcmVzc1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJSZXNldFBhc3N3b3JkRm9ybVwiLFxuICAgIFwibWFya3VwXCI6IFwiPGZvcm0+PFRlcm1zQW5kU2VydmljZT48L1Rlcm1zQW5kU2VydmljZT48RW1haWxJbnB1dD48L0VtYWlsSW5wdXQ+PFN1Ym1pdEJ1dHRvbj48L1N1Ym1pdEJ1dHRvbj48Q2FuY2VsQnV0dG9uPjwvQ2FuY2VsQnV0dG9uPjxUZXJtc0FuZFNlcnZpY2U+PFByaXZhY3lBbmRQb2xpY3k+PC9Qcml2YWN5QW5kUG9saWN5PjwvVGVybXNBbmRTZXJ2aWNlPlxcbjwvZm9ybT5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwidGV4dFxcXCJ9XCIsXG4gICAgXCJzdHlsZVwiOiBcImZvcm17XFxuaGVpZ2h0OjQwMHB4O31cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiUGFnZVwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInBhZ2VcXFwiPlxcblxcdDxGb3Jnb3RQYXNzd29yZD48L0ZvcmdvdFBhc3N3b3JkPlxcbiAgICA8UmVzZXRQYXNzd29yZE1vZGFsPjwvUmVzZXRQYXNzd29yZE1vZGFsPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25QYXNzd29yZEZvcmdvdHRlblwiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5SZXNldFBhc3N3b3JkTW9kYWwgPSBbXFxuXFx0e1xcbiAgICBcXHR0aXRsZTogXFxcIkZvcmdvdCBQYXNzd29yZFxcXCIsXFxuICAgICAgICBmb290ZXI6IFxcXCJDb3B5cmlndHNcXFwiLFxcbiAgICAgICAgc2hvdzogXFxcInNkXFxcIlxcbiAgICB9XFxuXTtcXG5cXG5zdGF0ZS52YXJpYW50ID0gXFxcIm1vZGFsX29wZW5lZFxcXCI7XCIsXG4gICAgICAgIFwiaW5kZXhcIjogMCxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJGb3Jnb3RQYXNzd29yZFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkNsb3NlXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLlJlc2V0UGFzc3dvcmRNb2RhbCA9IFtdO1xcbnN0YXRlLnZhcmlhbnQgPSBcXFwibW9kYWxfY2xvc2VkXFxcIjtcIixcbiAgICAgICAgXCJpbmRleFwiOiAwLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcIlJlc2V0UGFzc3dvcmRNb2RhbFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInN0YXRlXCI6IFwie1xcblxcdFxcXCJzaG93TW9kYWxcXFwiOiBmYWxzZSxcXG4gICAgXFxcImxpc3RcXFwiOiBbMSwyLDMsNCw1XSxcXG4gICAgXFxcIlJlc2V0UGFzc3dvcmRNb2RhbFxcXCI6IFtdLFxcbiAgICBcXFwidmFyaWFudFxcXCI6IFxcXCJpbml0aWFsXFxcIlxcbn1cIixcbiAgICBcInN0eWxlXCI6IFwiLnBhZ2V7XFxuXFx0aGVpZ2h0OiA3MDBweDtcXG5cXHR3aWR0aDogNTAwcHg7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie1xcXCJWYXJpYW50TW9kYWxcXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwic2hvd01vZGFsXFxcIixcXFwib3ZlcnJpZGVcXFwiOmZhbHNlfSxcXFwiRm9yZ290UGFzc3dvcmRCdXR0b25cXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwiXFxcIixcXFwib3ZlcnJpZGVcXFwiOmZhbHNlfSxcXFwiRm9yZ290UGFzc3dvcmRcXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwiXFxcIixcXFwib3ZlcnJpZGVcXFwiOmZhbHNlLFxcXCJyZW5kZXJMaXN0UHJvcFxcXCI6XFxcIlxcXCJ9LFxcXCJSZXNldFBhc3N3b3JkTW9kYWxcXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwic2hvd01vZGFsXFxcIixcXFwib3ZlcnJpZGVcXFwiOnRydWUsXFxcInJlbmRlckxpc3RQcm9wXFxcIjpcXFwiXFxcIn19XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm1vZGFsX29wZW5lZFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcInNob3dNb2RhbFwiOiBmYWxzZSxcbiAgICAgICAgICBcImxpc3RcIjogW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDVcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiUmVzZXRQYXNzd29yZE1vZGFsXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZvcmdvdCBQYXNzd29yZFwiLFxuICAgICAgICAgICAgICBcImZvb3RlclwiOiBcIkNvcHlyaWd0c1wiLFxuICAgICAgICAgICAgICBcInNob3dcIjogXCJzZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJtb2RhbF9vcGVuZWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJtb2RhbF9jbG9zZWRcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJzaG93TW9kYWxcIjogZmFsc2UsXG4gICAgICAgICAgXCJsaXN0XCI6IFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA1XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcIlJlc2V0UGFzc3dvcmRNb2RhbFwiOiBbXSxcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJtb2RhbF9jbG9zZWRcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiUmVzZXRQYXNzd29yZE1vZGFsXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuPGhlYWRlcj5cXG4gIDxoMz57c3RhdGUudGl0bGV9PC9oMz5cXG4gICAgPGJ1dHRvbiBpZD1cXFwiY2xvc2VcXFwiIGNsYXNzTmFtZT1cXFwiY2xvc2VCdXR0b25cXFwiPng8L2J1dHRvbj5cXG48L2hlYWRlcj5cXG48c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudFxcXCI+PFJlc2V0UGFzc3dvcmRGb3JtPjwvUmVzZXRQYXNzd29yZEZvcm0+XFxuPC9zZWN0aW9uPlxcbjxmb290ZXI+e3N0YXRlLmZvb3Rlcn08L2Zvb3Rlcj5cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUuc2hvdyA9IFxcXCJzZFxcXCI7XCIsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uQ2xvc2VcIixcbiAgICAgICAgXCJpZFwiOiBcImNsb3NlXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxcInRpdGxlXFxcIjpcXFwiRm9yZ290IFBhc3N3b3JkXFxcIixcXFwiZm9vdGVyXFxcIjpcXFwiQ29weXJpZ3RzXFxcIn1cIixcbiAgICBcInN0eWxlXCI6IFwiLm1vZGFse1xcbiAgd2lkdGg6NDAwcHg7XFxuICBmb250LXNpemU6MjJweDtcXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xcbmJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbmNvbG9yOiBibGFjaztcXG4gIGZvbnQtZmFtaWx5OiBCZW50b25TYW5zTGlnaHQsSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDo0MDA7XFxuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW07XFxuICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcblxcbn1cXG5cXG4ubW9kYWwgaDN7XFxuICBwYWRkaW5nOjFyZW07XFxuZm9udC1zaXplOjI2cHg7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLm1vZGFsIC5jb250ZW50e1xcbnBhZGRpbmc6MXJlbTtcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgZm9vdGVye1xcbnBhZGRpbmc6MXJlbTtcXG4gIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuLm1vZGFsIGhlYWRlcntcXG4gIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLm1vZGFsIC5jbG9zZUJ1dHRvbntcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgdG9wOiAyMHB4O1xcbn1cXG5cXG4ubW9kYWwgLmNvbnRlbnR7XFxuICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XCIsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW11cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIkNhcm91c2FsXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT17c3RhdGUudmFyaWFudH0+XFxuXFx0PGJ1dHRvbiBjbGFzc05hbWU9XFxcImxlZnRcXFwiIGlkPVxcXCJwcmV2aW91c1xcXCI+e1xcXCI8XFxcIn08L2J1dHRvbj5cXG4gICAgPGRpdiBjbGFzc05hbWU9XFxcIndpbmRvd1xcXCI+XFxuICAgIFxcdDxkaXYgY2xhc3NOYW1lPVxcXCJjb250ZW50XFxcIj5cXG4gICAgICAgICAgezxkaXY+e3N0YXRlLml0ZW1zW3N0YXRlLmN1cnJlbnRdfTwvZGl2Pn1cXG5cXHQgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwicmlnaHRcXFwiIGlkPVxcXCJuZXh0XFxcIj57XFxcIj5cXFwifTwvYnV0dG9uPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJpZihzdGF0ZS5jdXJyZW50PT09c3RhdGUuaXRlbXMubGVuZ3RoLTEpe1xcblxcdHN0YXRlLmN1cnJlbnQgPSAwO1xcbn1cXG5cXG5lbHNlIHtcXG5cXHRzdGF0ZS5jdXJyZW50ID0gc3RhdGUuY3VycmVudCArMTtcXG59XCIsXG4gICAgICAgIFwiaW5kZXhcIjogMCxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJuZXh0XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwiaWYoc3RhdGUuY3VycmVudD09PTApe1xcblxcdHN0YXRlLmN1cnJlbnQgPSBzdGF0ZS5pdGVtcy5sZW5ndGgtMTtcXG59XFxuXFxuZWxzZSB7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLmN1cnJlbnQgLTE7XFxufVwiLFxuICAgICAgICBcImluZGV4XCI6IDEsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogXCJcIixcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICBcImlkXCI6IFwicHJldmlvdXNcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwidmFyaWFudFxcXCI6XFxcImluaXRpYWwgbGF5b3V0Q29tcG9uZW50XFxcIixcXFwiaXRlbXNcXFwiOlsxLDIsMyw0LDUsNl0sXFxcImN1cnJlbnRcXFwiOjB9XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5sYXlvdXRDb21wb25lbnQgYnV0dG9ue1xcblxcdGNvbG9yOnJlZDtcXG4gICAgaGVpZ2h0OjEwMCU7XFxuICAgIHdpZHRoOiA0MHB4O1xcbn1cXG5cXG4ubGF5b3V0Q29tcG9uZW50IHtcXG5cXHR3aWR0aDoxMDAlO1xcbiAgICBoZWlnaHQ6MjIwcHg7XFxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbn1cXG5cXG4ubGF5b3V0Q29tcG9uZW50ICp7XFxuICBcXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4ubGF5b3V0Q29tcG9uZW50IC53aW5kb3cge1xcblxcdHdpZHRoOiA1MCU7XFxuICAgIGhlaWdodDoyMjBweDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBtYXJnaW46YXV0bztcXG5cXHRvdmVyZmxvdzpoaWRkZW47XFxufVxcblxcbi5sYXlvdXRDb21wb25lbnQgLmNvbnRlbnR7XFxuXFx0aGVpZ2h0OjIyMHB4O1xcbn1cXG5cXG4ubGF5b3V0Q29tcG9uZW50IC5jb250ZW50ID4gZGl2e1xcblxcdGRpc3BsYXk6aW5saW5lLWJsb2NrO1xcbiAgICBoZWlnaHQ6MjAwcHg7XFxuICAgIHdpZHRoOjIyMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOmdyZWVuO1xcbiAgICBtYXJnaW46N3B4O1xcbn1cXG5cXG4ubGF5b3V0Q29tcG9uZW50IC5sZWZ0e1xcblxcdHBvc2l0aW9uOmFic29sdXRlO1xcbiAgICBsZWZ0OjBweDtcXG4gICAgdG9wOjBweDtcXG59XFxuXFxuLmxheW91dENvbXBvbmVudCAucmlnaHR7XFxuXFx0cG9zaXRpb246YWJzb2x1dGU7XFxuICAgIHJpZ2h0OjBweDtcXG4gICAgdG9wOjBweDtcXG59XCIsXG4gICAgXCJjaGlsZHJlblwiOiBbXSxcbiAgICBcImlkXCI6IDMxNCxcbiAgICBcImNvbmZpZ1wiOiBcIntcXFwiUHJvZHVjdENvbXBvbmVudFxcXCI6e1xcXCJvdmVycmlkZVxcXCI6ZmFsc2V9fVwiLFxuICAgIFwidmFyaWFudHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpbml0aWFsIGxheW91dENvbXBvbmVudFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJpbml0aWFsIGxheW91dENvbXBvbmVudFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjogW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImN1cnJlbnRcIjogNlxuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICBcInRydWVOYW1lXCI6IFwiQ2Fyb3VzYWxcIlxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiUHJvZHVjdFwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnR9IHN0eWxlPXtzdGF0ZS5zdHlsZX0gaWQ9XFxcInByb2R1Y3RcXFwiPlxcblxcdHtzdGF0ZS5uYW1lfVxcbjwvZGl2PlxcblwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25Nb3VzZUVudGVyXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLnZhcmlhbnQgPSBcXFwiaXRlbSBvbl9ob3ZlclxcXCI7XFxuc3RhdGUubmFtZSA9IFxcXCJCdXkgbm93XFxcIjtcIixcbiAgICAgICAgXCJpbmRleFwiOiAwLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcInByb2R1Y3RcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25Nb3VzZUxlYXZlXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLnZhcmlhbnQgPSBcXFwiaXRlbSBpbml0aWFsXFxcIjtcXG5zdGF0ZS5uYW1lID0gXFxcIlByb2R1Y3Qgb25lXFxcIjtcIixcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJwcm9kdWN0XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxuXFx0XFxcIm5hbWVcXFwiIDogXFxcIlByb2R1Y3Qgb25lXFxcIixcXG4gICAgXFxcInZhcmlhbnRcXFwiIDogXFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxuICAgIFxcXCJzdHlsZVxcXCIgOiB7XFxuICAgICAgIFxcdFxcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOiBcXFwiJGFzc2V0c1snMS5qcGVnJ11cXFwiXFxuICAgIH1cXG59XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5pdGVtLmluaXRpYWwge1xcblxcdGJhY2tncm91bmQtY29sb3I6ZGFya2N5YW47XFxuICAgIGJhY2tncm91bmQtc2l6ZTpjb250YWluO1xcbn1cXG5cXG4uaXRlbS5vbl9ob3ZlciB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjp0ZWFsO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6YXV0bztcXG59XFxuXFxuLml0ZW17XFxuXFx0aGVpZ2h0OjIwMHB4O1xcbiAgICB3aWR0aDoyMDBweDtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFx0dmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG5cXHRsaW5lLWhlaWdodDogMjAwcHg7XFxufVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpZFwiOiA5NDksXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbl9ob3ZlclwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJCdXkgbm93XCIsXG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwib25faG92ZXJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpdGVtcyBvbl9ob3ZlclwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJCdXkgbm93XCIsXG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwiaXRlbXMgb25faG92ZXJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpdGVtIG9uX2hvdmVyXCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiBcIkJ1eSBub3dcIixcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJpdGVtIG9uX2hvdmVyXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaXRlbSBpbml0aWFsXCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgIFwidmFyaWFudFwiOiBcIml0ZW0gaW5pdGlhbFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHJ1ZU5hbWVcIjogXCJQcm9kdWN0XCJcbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIkNhcm91c2FsX1NpbmdsZVwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnR9PlxcblxcdDxidXR0b24gY2xhc3NOYW1lPVxcXCJsZWZ0XFxcIiBpZD1cXFwicHJldmlvdXNcXFwiPntcXFwiPFxcXCJ9PC9idXR0b24+XFxuICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJjb250ZW50XFxcIj48UHJvZHVjdD48L1Byb2R1Y3Q+XFxuICAgIDwvZGl2PlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwicmlnaHRcXFwiIGlkPVxcXCJuZXh0XFxcIj57XFxcIj5cXFwifTwvYnV0dG9uPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJpZihzdGF0ZS5jdXJyZW50PT09c3RhdGUuaXRlbXMubGVuZ3RoLTEpe1xcblxcdHN0YXRlLmN1cnJlbnQgPSAwO1xcbn1cXG5cXG5lbHNlIHtcXG5cXHRzdGF0ZS5jdXJyZW50ID0gc3RhdGUuY3VycmVudCArMTtcXG59XFxuXFxuc3RhdGUuUHJvZHVjdCA9IFtzdGF0ZS5pdGVtc1tzdGF0ZS5jdXJyZW50XV1cXG5cIixcbiAgICAgICAgXCJpbmRleFwiOiAwLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcIm5leHRcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJpZihzdGF0ZS5jdXJyZW50PT09MCl7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLml0ZW1zLmxlbmd0aC0xO1xcbn1cXG5cXG5lbHNlIHtcXG5cXHRzdGF0ZS5jdXJyZW50ID0gc3RhdGUuY3VycmVudCAtMTtcXG59XFxuXFxuc3RhdGUuUHJvZHVjdCA9IFtzdGF0ZS5pdGVtc1tzdGF0ZS5jdXJyZW50XV1cXG5cIixcbiAgICAgICAgXCJpbmRleFwiOiAxLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcInByZXZpb3VzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxuICAgIFxcXCJ2YXJpYW50XFxcIjpcXFwiaW5pdGlhbCBDYXJvdXNhbF9TaW5nbGVcXFwiLFxcbiAgICBcXFwiaXRlbXNcXFwiOltcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzEuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMi5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyczLmpwZWcnXVxcXCJ9fSxcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzQuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNS5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc2LmpwZWcnXVxcXCJ9fVxcbiAgICBdLFxcbiAgICBcXFwiY3VycmVudFxcXCI6MCxcXG4gICAgXFxcIlByb2R1Y3RcXFwiOltcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzEuanBlZyddXFxcIn19XFxuICAgIF1cXG59XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5DYXJvdXNhbF9TaW5nbGUgYnV0dG9ue1xcblxcdGNvbG9yOnJlZDtcXG4gICAgaGVpZ2h0OjIyMHB4O1xcbiAgICB3aWR0aDogNDBweDtcXG4gICAgZGlzcGxheTppbmxpbmUtYmxvY2s7XFxufVxcblxcbi5DYXJvdXNhbF9TaW5nbGUge1xcbiAgICBoZWlnaHQ6MjIwcHg7XFxufVxcblxcbi5DYXJvdXNhbF9TaW5nbGUgKntcXG4gIFxcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5DYXJvdXNhbF9TaW5nbGUgLmNvbnRlbnR7XFxuXFx0aGVpZ2h0OjIwMHB4O1xcbiAgICBtaW4td2lkdGg6MjAwcHg7XFxuICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrO1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcblxcdGxpbmUtaGVpZ2h0OiAyMDBweDtcXG59XFxuXCIsXG4gICAgXCJjaGlsZHJlblwiOiBbXSxcbiAgICBcImlkXCI6IDMxNCxcbiAgICBcImNvbmZpZ1wiOiBcIntcXFwiUHJvZHVjdENvbXBvbmVudFxcXCI6e1xcXCJvdmVycmlkZVxcXCI6ZmFsc2V9LFxcXCJQcm9kdWN0XFxcIjp7XFxcIm92ZXJyaWRlXFxcIjp0cnVlfX1cIixcbiAgICBcInZhcmlhbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5pdGlhbCBsYXlvdXRDb21wb25lbnRcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwiaW5pdGlhbCBsYXlvdXRDb21wb25lbnRcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNlxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJjdXJyZW50XCI6IDZcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5pdGlhbCBDYXJvdXNhbF9TaW5nbGVcIixcbiAgICAgICAgXCJzdGF0ZVwiOiBcIntcXFwidmFyaWFudFxcXCI6XFxcImluaXRpYWwgQ2Fyb3VzYWxfU2luZ2xlXFxcIixcXFwiaXRlbXNcXFwiOlt7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycxLmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycyLmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyczLmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc0LmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc1LmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc2LmpwZWcnXVxcXCJ9fV0sXFxcImN1cnJlbnRcXFwiOjEsXFxcIlByb2R1Y3RcXFwiOlt7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycyLmpwZWcnXVxcXCJ9fV19XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHJ1ZU5hbWVcIjogXCJDYXJvdXNhbF9TaW5nbGVcIlxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiQ2Fyb3VzYWxfRG91YmxlXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT17c3RhdGUudmFyaWFudH0+XFxuXFx0PGJ1dHRvbiBjbGFzc05hbWU9XFxcImxlZnRcXFwiIGlkPVxcXCJwcmV2aW91c1xcXCI+e1xcXCI8XFxcIn08L2J1dHRvbj5cXG4gICAgXFx0PGRpdiBjbGFzc05hbWU9XFxcImNvbnRlbnRcXFwiPjxQcm9kdWN0PjwvUHJvZHVjdD5cXG5cXHQgICAgPC9kaXY+XFxuICAgIDxidXR0b24gY2xhc3NOYW1lPVxcXCJyaWdodFxcXCIgaWQ9XFxcIm5leHRcXFwiPntcXFwiPlxcXCJ9PC9idXR0b24+XFxuPC9kaXY+XCIsXG4gICAgXCJldmVudHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkNsaWNrXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcImlmKHN0YXRlLmN1cnJlbnQ9PT1zdGF0ZS5pdGVtcy5sZW5ndGgtMSl7XFxuXFx0c3RhdGUuY3VycmVudCA9IDA7XFxufVxcblxcbmVsc2Uge1xcblxcdHN0YXRlLmN1cnJlbnQgPSBzdGF0ZS5jdXJyZW50ICsxO1xcbn1cXG5cXG5pZihzdGF0ZS5jdXJyZW50ID09PSBzdGF0ZS5pdGVtcy5sZW5ndGgtMSl7XFxuXFx0c3RhdGUuUHJvZHVjdCA9IFtcXG4gICAgXFx0c3RhdGUuaXRlbXNbc3RhdGUuY3VycmVudF0sXFxuICAgICAgICBzdGF0ZS5pdGVtc1swXVxcbiAgICBdXFxufVxcbmVsc2V7XFxuXFx0c3RhdGUuUHJvZHVjdCA9IFtcXG4gICAgXFx0c3RhdGUuaXRlbXNbc3RhdGUuY3VycmVudF0sXFxuICAgICAgICBzdGF0ZS5pdGVtc1tzdGF0ZS5jdXJyZW50KzFdXFxuICAgIF1cXG59XFxuXFxuXCIsXG4gICAgICAgIFwiaW5kZXhcIjogMCxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJuZXh0XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwiaWYoc3RhdGUuY3VycmVudD09PTApe1xcblxcdHN0YXRlLmN1cnJlbnQgPSBzdGF0ZS5pdGVtcy5sZW5ndGgtMTtcXG59XFxuXFxuZWxzZSB7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLmN1cnJlbnQgLTE7XFxufVxcblxcbmlmKHN0YXRlLmN1cnJlbnQgPT09IDApe1xcblxcdHN0YXRlLlByb2R1Y3QgPSBbXFxuICAgIFxcdHN0YXRlLml0ZW1zW3N0YXRlLml0ZW1zLmxlbmd0aC0xXSxcXG4gICAgICAgIHN0YXRlLml0ZW1zW3N0YXRlLmN1cnJlbnRdXFxuICAgIF1cXG59XFxuZWxzZXtcXG5cXHRzdGF0ZS5Qcm9kdWN0ID0gW1xcbiAgICBcXHRzdGF0ZS5pdGVtc1tzdGF0ZS5jdXJyZW50LTFdLFxcbiAgICAgICAgc3RhdGUuaXRlbXNbc3RhdGUuY3VycmVudF1cXG4gICAgXVxcbn1cIixcbiAgICAgICAgXCJpbmRleFwiOiAxLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcInByZXZpb3VzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxuICAgIFxcXCJ2YXJpYW50XFxcIjpcXFwiaW5pdGlhbCBDYXJvdXNhbF9Eb3VibGVcXFwiLFxcbiAgICBcXFwiaXRlbXNcXFwiOltcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzEuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMi5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyczLmpwZWcnXVxcXCJ9fSxcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzQuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNS5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc2LmpwZWcnXVxcXCJ9fVxcbiAgICBdLFxcbiAgICBcXFwiY3VycmVudFxcXCI6MCxcXG4gICAgXFxcIlByb2R1Y3RcXFwiOltcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzEuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCB0d29cXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMi5qcGVnJ11cXFwifX1cXG4gICAgXVxcbn1cIixcbiAgICBcInN0eWxlXCI6IFwiLkNhcm91c2FsX0RvdWJsZSBidXR0b257XFxuXFx0Y29sb3I6cmVkO1xcbiAgICBoZWlnaHQ6MjIwcHg7XFxuICAgIHdpZHRoOiA0MHB4O1xcbiAgICBkaXNwbGF5OmlubGluZS1ibG9jaztcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSB7XFxuICAgIGhlaWdodDoyMjBweDtcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSAqe1xcbiAgXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSAuY29udGVudHtcXG5cXHRoZWlnaHQ6MjAwcHg7XFxuICAgIG1pbi13aWR0aDo0MDBweDtcXG4gICAgZGlzcGxheTppbmxpbmUtYmxvY2s7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblxcdHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuXFx0bGluZS1oZWlnaHQ6IDIwMHB4O1xcbn1cXG5cXG4uQ2Fyb3VzYWxfRG91YmxlIC5jb250ZW50ID4gZGl2e1xcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuXFxuXCIsXG4gICAgXCJjaGlsZHJlblwiOiBbXSxcbiAgICBcImlkXCI6IDMxNCxcbiAgICBcImNvbmZpZ1wiOiBcIntcXFwiUHJvZHVjdENvbXBvbmVudFxcXCI6e1xcXCJvdmVycmlkZVxcXCI6ZmFsc2V9LFxcXCJQcm9kdWN0XFxcIjp7XFxcIm92ZXJyaWRlXFxcIjp0cnVlfX1cIixcbiAgICBcInZhcmlhbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5pdGlhbCBsYXlvdXRDb21wb25lbnRcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwiaW5pdGlhbCBsYXlvdXRDb21wb25lbnRcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNlxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJjdXJyZW50XCI6IDZcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5pdGlhbCBDYXJvdXNhbF9Eb3VibGVcIixcbiAgICAgICAgXCJzdGF0ZVwiOiBcIntcXFwidmFyaWFudFxcXCI6XFxcImluaXRpYWwgQ2Fyb3VzYWxfRG91YmxlXFxcIixcXFwiaXRlbXNcXFwiOlt7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycxLmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycyLmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyczLmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc0LmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc1LmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc2LmpwZWcnXVxcXCJ9fV0sXFxcImN1cnJlbnRcXFwiOjUsXFxcIlByb2R1Y3RcXFwiOlt7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc1LmpwZWcnXVxcXCJ9fSx7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc2LmpwZWcnXVxcXCJ9fV19XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHJ1ZU5hbWVcIjogXCJDYXJvdXNhbF9Eb3VibGVcIlxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiQ2Fyb3VzYWxfTXVsdGlcIixcbiAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3NOYW1lPXtzdGF0ZS52YXJpYW50fT5cXG5cXHQ8YnV0dG9uIGNsYXNzTmFtZT1cXFwibGVmdFxcXCIgaWQ9XFxcInByZXZpb3VzXFxcIj57XFxcIjxcXFwifTwvYnV0dG9uPlxcbiAgICBcXHQ8ZGl2ICBzdHlsZT17c3RhdGUuY29udGVudFN0eWxlfSBjbGFzc05hbWU9XFxcImNvbnRlbnRcXFwiPlxcbiAgICAgICAgXFx0PFByb2R1Y3Q+PC9Qcm9kdWN0PlxcblxcdCAgICA8L2Rpdj5cXG4gICAgPGJ1dHRvbiBjbGFzc05hbWU9XFxcInJpZ2h0XFxcIiBpZD1cXFwibmV4dFxcXCI+e1xcXCI+XFxcIn08L2J1dHRvbj5cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwiaWYoc3RhdGUuY3VycmVudD09PXN0YXRlLml0ZW1zLmxlbmd0aC0xKXtcXG5cXHRzdGF0ZS5jdXJyZW50ID0gMDtcXG59XFxuXFxuZWxzZSB7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLmN1cnJlbnQgKzE7XFxufVxcblxcbnN0YXRlLmNvbnRlbnRTdHlsZS5sZWZ0ID0gLShzdGF0ZS5jdXJyZW50KjIwMCkgKyBcXFwicHhcXFwiXCIsXG4gICAgICAgIFwiaW5kZXhcIjogMCxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJuZXh0XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwiaWYoc3RhdGUuY3VycmVudD09PTApe1xcblxcdHN0YXRlLmN1cnJlbnQgPSBzdGF0ZS5pdGVtcy5sZW5ndGgtMTtcXG59XFxuXFxuZWxzZSB7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLmN1cnJlbnQgLTE7XFxufVxcblxcbnN0YXRlLmNvbnRlbnRTdHlsZS5sZWZ0ID0gLShzdGF0ZS5jdXJyZW50KjIwMCkgKyBcXFwicHhcXFwiXCIsXG4gICAgICAgIFwiaW5kZXhcIjogMSxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJwcmV2aW91c1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInN0YXRlXCI6IFwie1xcbiAgICBcXFwidmFyaWFudFxcXCI6XFxcImluaXRpYWwgQ2Fyb3VzYWxfRG91YmxlXFxcIixcXG4gICAgXFxcIml0ZW1zXFxcIjpbXFxuICAgICAgICBcXG4gICAgXSxcXG4gICAgXFxcImN1cnJlbnRcXFwiOjAsXFxuICAgIFxcXCJQcm9kdWN0XFxcIjpbXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycxLmpwZWcnXVxcXCJ9fSxcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzIuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMy5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc0LmpwZWcnXVxcXCJ9fSxcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzUuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNi5qcGVnJ11cXFwifX1dLFxcbiAgICAgICAgXFxcImNvbnRlbnRTdHlsZVxcXCIgOiB7XFxuICAgICAgICBcXHRcXFwibGVmdFxcXCI6IFxcXCIwcHhcXFwiXFxuICAgICAgICB9XFxufVwiLFxuICAgIFwic3R5bGVcIjogXCIuQ2Fyb3VzYWxfRG91YmxlIGJ1dHRvbntcXG5cXHRjb2xvcjpyZWQ7XFxuICAgIGhlaWdodDoyMjBweDtcXG4gICAgd2lkdGg6IDQwcHg7XFxuICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uQ2Fyb3VzYWxfRG91YmxlIHtcXG4gICAgaGVpZ2h0OjIyMHB4O1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5DYXJvdXNhbF9Eb3VibGUgKntcXG4gIFxcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5DYXJvdXNhbF9Eb3VibGUgLmNvbnRlbnR7XFxuXFx0aGVpZ2h0OjIwMHB4O1xcbiAgICB3aWR0aDogMTIwMHB4O1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcblxcdGxpbmUtaGVpZ2h0OiAyMDBweDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4uQ2Fyb3VzYWxfRG91YmxlIC5jb250ZW50ID4gZGl2e1xcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSAjcHJldmlvdXMge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMHB4O1xcbiAgICB0b3A6MHB4O1xcbiAgICB6LWluZGV4OiAxO1xcbn1cXG5cXG4uQ2Fyb3VzYWxfRG91YmxlICNuZXh0IHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwcHg7XFxuICAgIHRvcDowcHg7XFxufVxcblxcblwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpZFwiOiAzMTQsXG4gICAgXCJjb25maWdcIjogXCJ7XFxcIlByb2R1Y3RDb21wb25lbnRcXFwiOntcXFwib3ZlcnJpZGVcXFwiOmZhbHNlfSxcXFwiUHJvZHVjdFxcXCI6e1xcXCJvdmVycmlkZVxcXCI6dHJ1ZX19XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcImluaXRpYWwgbGF5b3V0Q29tcG9uZW50XCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwidmFyaWFudFwiOiBcImluaXRpYWwgbGF5b3V0Q29tcG9uZW50XCIsXG4gICAgICAgICAgXCJpdGVtc1wiOiBbXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDZcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiY3VycmVudFwiOiA2XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcImluaXRpYWwgQ2Fyb3VzYWxfRG91YmxlXCIsXG4gICAgICAgIFwic3RhdGVcIjogXCJ7XFxcInZhcmlhbnRcXFwiOlxcXCJpbml0aWFsIENhcm91c2FsX0RvdWJsZVxcXCIsXFxcIml0ZW1zXFxcIjpbe1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMS5qcGVnJ11cXFwifX0se1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMi5qcGVnJ11cXFwifX0se1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMy5qcGVnJ11cXFwifX0se1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNC5qcGVnJ11cXFwifX0se1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNS5qcGVnJ11cXFwifX0se1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNi5qcGVnJ11cXFwifX1dLFxcXCJjdXJyZW50XFxcIjo1LFxcXCJQcm9kdWN0XFxcIjpbe1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNS5qcGVnJ11cXFwifX0se1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNi5qcGVnJ11cXFwifX1dfVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInRydWVOYW1lXCI6IFwiQ2Fyb3VzYWxfTXVsdGlcIlxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiQ2Fyb3VzYWxfQ2lyY2xlYmFja1wiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnR9PlxcblxcdDxidXR0b24gY2xhc3NOYW1lPVxcXCJsZWZ0XFxcIiBpZD1cXFwicHJldmlvdXNcXFwiPntcXFwiPFxcXCJ9PC9idXR0b24+XFxuICAgIFxcdDxkaXYgc3R5bGU9e3N0YXRlLmNvbnRlbnRTdHlsZX0gY2xhc3NOYW1lPVxcXCJjb250ZW50XFxcIj48UHJvZHVjdD48L1Byb2R1Y3Q+XFxuXFx0ICAgIDwvZGl2PlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwicmlnaHRcXFwiIGlkPVxcXCJuZXh0XFxcIj57XFxcIj5cXFwifTwvYnV0dG9uPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJcXG5zdGF0ZS5Qcm9kdWN0LnB1c2goc3RhdGUuUHJvZHVjdC5zaGlmdCgpKVxcblwiLFxuICAgICAgICBcImluZGV4XCI6IDAsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogXCJcIixcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICBcImlkXCI6IFwibmV4dFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkNsaWNrXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcIlxcbnN0YXRlLlByb2R1Y3QudW5zaGlmdChzdGF0ZS5Qcm9kdWN0LnBvcCgpKVxcblwiLFxuICAgICAgICBcImluZGV4XCI6IDEsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogXCJcIixcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICBcImlkXCI6IFwicHJldmlvdXNcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGF0ZVwiOiBcIntcXG4gICAgXFxcInZhcmlhbnRcXFwiOlxcXCJpbml0aWFsIENhcm91c2FsX0RvdWJsZVxcXCIsXFxuICAgIFxcXCJpdGVtc1xcXCI6W1xcbiAgICAgICAgXFxuICAgIF0sXFxuICAgIFxcXCJjdXJyZW50XFxcIjowLFxcbiAgICBcXFwiUHJvZHVjdFxcXCI6W1xcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snMS5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWycyLmpwZWcnXVxcXCJ9fSxcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzMuanBlZyddXFxcIn19LFxcbiAgICAgICAge1xcXCJuYW1lXFxcIjpcXFwiUHJvZHVjdCBvbmVcXFwiLFxcXCJ2YXJpYW50XFxcIjpcXFwiaXRlbSBpbml0aWFsXFxcIixcXFwic3R5bGVcXFwiOntcXFwiYmFja2dyb3VuZEltYWdlXFxcIjpcXFwiJGFzc2V0c1snNC5qcGVnJ11cXFwifX0sXFxuICAgICAgICB7XFxcIm5hbWVcXFwiOlxcXCJQcm9kdWN0IG9uZVxcXCIsXFxcInZhcmlhbnRcXFwiOlxcXCJpdGVtIGluaXRpYWxcXFwiLFxcXCJzdHlsZVxcXCI6e1xcXCJiYWNrZ3JvdW5kSW1hZ2VcXFwiOlxcXCIkYXNzZXRzWyc1LmpwZWcnXVxcXCJ9fSxcXG4gICAgICAgIHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzYuanBlZyddXFxcIn19XSxcXG4gICAgICAgIFxcXCJjb250ZW50U3R5bGVcXFwiIDoge1xcbiAgICAgICAgXFx0XFxcImxlZnRcXFwiOiBcXFwiMHB4XFxcIlxcbiAgICAgICAgfVxcbn1cIixcbiAgICBcInN0eWxlXCI6IFwiLkNhcm91c2FsX0RvdWJsZSBidXR0b257XFxuXFx0Y29sb3I6cmVkO1xcbiAgICBoZWlnaHQ6MjIwcHg7XFxuICAgIHdpZHRoOiA0MHB4O1xcbiAgICBkaXNwbGF5OmlubGluZS1ibG9jaztcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSB7XFxuICAgIGhlaWdodDoyMjBweDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uQ2Fyb3VzYWxfRG91YmxlICp7XFxuICBcXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uQ2Fyb3VzYWxfRG91YmxlIC5jb250ZW50e1xcblxcdGhlaWdodDoyMDBweDtcXG4gICAgd2lkdGg6IDEyMDBweDtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFx0dmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG5cXHRsaW5lLWhlaWdodDogMjAwcHg7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSAuY29udGVudCA+IGRpdntcXG5cXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5DYXJvdXNhbF9Eb3VibGUgI3ByZXZpb3VzIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDBweDtcXG4gICAgdG9wOjBweDtcXG4gICAgei1pbmRleDogMTtcXG59XFxuXFxuLkNhcm91c2FsX0RvdWJsZSAjbmV4dCB7XFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcbiAgICByaWdodDogMHB4O1xcbiAgICB0b3A6MHB4O1xcbn1cXG5cXG5cIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaWRcIjogMzE0LFxuICAgIFwiY29uZmlnXCI6IFwie1xcXCJQcm9kdWN0Q29tcG9uZW50XFxcIjp7XFxcIm92ZXJyaWRlXFxcIjpmYWxzZX0sXFxcIlByb2R1Y3RcXFwiOntcXFwib3ZlcnJpZGVcXFwiOnRydWV9fVwiLFxuICAgIFwidmFyaWFudHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpbml0aWFsIGxheW91dENvbXBvbmVudFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJpbml0aWFsIGxheW91dENvbXBvbmVudFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjogW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImN1cnJlbnRcIjogNlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpbml0aWFsIENhcm91c2FsX0RvdWJsZVwiLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwiaW5pdGlhbCBDYXJvdXNhbF9Eb3VibGVcXFwiLFxcXCJpdGVtc1xcXCI6W3tcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzEuanBlZyddXFxcIn19LHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzIuanBlZyddXFxcIn19LHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzMuanBlZyddXFxcIn19LHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzQuanBlZyddXFxcIn19LHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzUuanBlZyddXFxcIn19LHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzYuanBlZyddXFxcIn19XSxcXFwiY3VycmVudFxcXCI6NSxcXFwiUHJvZHVjdFxcXCI6W3tcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzUuanBlZyddXFxcIn19LHtcXFwibmFtZVxcXCI6XFxcIlByb2R1Y3Qgb25lXFxcIixcXFwidmFyaWFudFxcXCI6XFxcIml0ZW0gaW5pdGlhbFxcXCIsXFxcInN0eWxlXFxcIjp7XFxcImJhY2tncm91bmRJbWFnZVxcXCI6XFxcIiRhc3NldHNbJzYuanBlZyddXFxcIn19XX1cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJ0cnVlTmFtZVwiOiBcIkNhcm91c2FsX0NpcmNsZWJhY2tcIlxuICB9XG5dO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNhbXBsZTogc2FtcGxlXG59IiwiXG5leHBvcnQgZnVuY3Rpb24gbmFtZVRvVVJMKHN0eWxlKSB7XG4gICAgaWYgKHR5cGVvZiBzdHlsZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwic3RhdGUgc2hvdWxkIGJlIGEgc3RyaW5nXCIpXG4gICAgfVxuXG4gICAgaWYod2luZG93LmFzc2V0cyAmJiB3aW5kb3cuYXNzZXRzLmxlbmd0aD4wKXtcbiAgICAgICAgLy8gQ2hlY2sgaWYgc3R5bGUgaGFzICRhc3NldHNcbiAgICAgICAgd2hpbGUgKHN0eWxlLmluY2x1ZGVzKFwiJGFzc2V0c1wiKSkge1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBpdCB3aXRoIGFzc2V0IGJsb2IgdXJsXG4gICAgICAgICAgICBsZXQgYXNzZXROYW1lID0gc3R5bGUuc3BsaXQoXCJbJ1wiKVsxXS5zcGxpdChgXWApWzBdLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgYXNzZXROYW1lLnBvcCgpO1xuICAgICAgICAgICAgYXNzZXROYW1lID0gYXNzZXROYW1lLmpvaW4oXCJcIik7XG4gICAgICAgICAgICBsZXQgYXNzZXQgPSB3aW5kb3cuYXNzZXRzLmZpbmQoYXNzZXQgPT4gYXNzZXQubmFtZSA9PT0gYXNzZXROYW1lKVxuXG4gICAgICAgICAgICBzdHlsZSA9IHN0eWxlLnJlcGxhY2UoYCRhc3NldHNbJyR7YXNzZXROYW1lfSddYCwgYHVybCgke2dldFVSTChhc3NldC5ibG9iLCBhc3NldE5hbWUpfSlgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB1cmxUb05hbWUoc3RhdGUpIHtcblxuICAgIC8vIENoZWNrIGlmIHN0eWxlIGhhcyAkYXNzZXRzXG4gICAgd2hpbGUgKHN0YXRlLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5ob3N0KSkge1xuICAgICAgICAvLyBSZXBsYWNlIGl0IHdpdGggYXNzZXQgYmxvYiB1cmxcbiAgICAgICAgbGV0IHVybCA9IHN0YXRlLnNwbGl0KFwidXJsKFwiKVsxXS5zcGxpdChgKWApWzBdXG5cbiAgICAgICAgbGV0IGFzc2V0ID0gd2luZG93LmFzc2V0cy5maW5kKGFzc2V0ID0+IGFzc2V0LnVybCA9PT0gdXJsKVxuXG4gICAgICAgIGlmIChhc3NldCkge1xuXG4gICAgICAgICAgICBzdGF0ZSA9IHN0YXRlLnJlcGxhY2UoYHVybCgke2Fzc2V0LnVybH0pYCwgYCRhc3NldHNbJyR7YXNzZXQubmFtZX0nXWApXG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQXNzZXRzKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLmluY2x1ZGVzKFwiJGFzc2V0c1wiKTtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5oaW50e1xcbiAgICBoZWlnaHQ6MTAwcHg7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGJvcmRlcjogMXB4IGRhc2hlZCBncmVlbjtcXG59XFxuXFxuLmhpbnREcmFnT3ZlcntcXG4gICAgYW5pbWF0aW9uOiBibGluayAxcyBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBibGluayB7XFxuICAgIGZyb20ge1xcbiAgICAgICAgYm9yZGVyOiAxcHggZGFzaGVkIGdyZWVuO1xcbiAgICB9XFxuICBcXG4gICAgdG8ge1xcbiAgICAgICAgYm9yZGVyOiAycHggZGFzaGVkIGdyZWVuO1xcbiAgICB9XFxuICB9XFxuXFxuLmhpbnROb0Ryb3B7XFxuICAgIGFuaW1hdGlvbjogYmxpbmtSZWQgMXMgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgYmxpbmtSZWQge1xcbiAgICBmcm9tIHtcXG4gICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCByZWQ7XFxuICAgIH1cXG4gIFxcbiAgICB0byB7XFxuICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgcmVkO1xcbiAgICB9XFxuICB9XCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGh1bWJuYWlsVmlldyB7XFxuICAgIHpvb206IDAuNztcXG59XFxuXFxuLnRodW1ibmFpbFZpZXcgPiBkaXYge1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiBTaG93IGdyZWVuIHdoZW4gY29tcG9uZW50IGlzIHNlbGVjdGVkKi9cXG5cXG4uc2VsZWN0ZWQsIC5ncmVlbiB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZWVuO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNDMsIDQzLCA0Myk7XFxufVxcblxcbi8qIFNob3cgZGFyayBiYWNrZ3JvdW5kIHRvIGNvbXBvbmVudHMgKi9cXG5cXG4uYmFja2dyb3VuZCB7XFxuICAgIGJhY2tncm91bmQ6IHJnYig2NCwgNjQsIDY0KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzMzMzMzMztcXG59XFxuXFxuLyogU2hvdyBzb21lIHNwYWNpbmcgYmVmb3JlIHRoZSBjb21wb25lbnQgbmFtZSAqL1xcblxcbi5jb21wb25lbnQgLmNvbXBvbmVudE5hbWV7XFxuICAgIHBhZGRpbmc6N3B4O1xcbn1cXG5cXG4uY29tcG9uZW50IHtcXG4gICAgZGlzcGxheTpmbGV4O1xcbn1cXG5cXG4vKiBTaG93IGNvbW9wbmVudCBwcmV2aWV3IG9uRHJhZyovXFxuXFxuLmRyYWdTdGFydGVkIHNwYW46bm90KC5jb21wb25lbnROYW1lKXtcXG4gICAgZGlzcGxheTpub25lO1xcbn1cXG5cXG4uaGlkZGVue1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuaW1wb3J0IHtyZWFkQ29tcG9uZW50fSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuaW1wb3J0IHtVbkNvbnRyb2xsZWQgYXMgQ29kZU1pcnJvcn0gZnJvbSAncmVhY3QtY29kZW1pcnJvcjInO1xuXG4vKipcbiAqIFNob3dzIENvbmZpZ3VyYXRvciBvbiBzZWxlY3Qgb2YgdmFsaWQgY2hpbGQgY29tcG9uZW50IG5hbWUgaW4gdGhlIG1hcmt1cCBhbmQgbW91c2VPdXQgZnJvbSBtYXJrdXBcbiAqIEhpZGVzIENvbmZpZ3VyYXRvciBvbiBtb3VzZUxlYXZlIGZyb20gdGhlIGVkaXRvci5cbiAqL1xuY2xhc3MgRWRpdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHZhciBjb21wb25lbnQgPSByZWFkQ29tcG9uZW50KHRoaXMucHJvcHMubmFtZSk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHRydWVOYW1lOiBjb21wb25lbnQ/IGNvbXBvbmVudC5uYW1lOiBcIlwiLFxuICAgICAgICAgICAgbmFtZTogY29tcG9uZW50PyBjb21wb25lbnQubmFtZSA6IFwiXCIsXG4gICAgICAgICAgICBtYXJrdXA6IGNvbXBvbmVudD8gY29tcG9uZW50Lm1hcmt1cCA6IFwiXCIsXG4gICAgICAgICAgICBzdGF0ZTogY29tcG9uZW50PyBjb21wb25lbnQuc3RhdGUgOiBcIlwiLFxuICAgICAgICAgICAgc3R5bGU6IGNvbXBvbmVudD8gY29tcG9uZW50LnN0eWxlIDogXCJcIlxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgc2F2ZUVsZW1lbnQgKCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uU2F2ZSh7XG4gICAgICAgICAgICB0cnVlTmFtZTogdGhpcy5zdGF0ZS50cnVlTmFtZSxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogdGhpcy5zdGF0ZS5tYXJrdXAsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5zdGF0ZS5zdHlsZSxcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLnN0YXRlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNhdmVOYW1lKGUpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG5hbWU6IGUuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgbmFtZT0gdGhpcy5zdGF0ZS5uYW1lO1xuICAgICAgICBsZXQgbWFya3VwPSB0aGlzLnN0YXRlLm1hcmt1cDtcbiAgICAgICAgbGV0IHN0eWxlPSB0aGlzLnN0YXRlLnN0eWxlO1xuICAgICAgICBsZXQgc3RhdGU9IHRoaXMuc3RhdGUuc3RhdGU7XG5cbiAgICAgICAgLy8gVE9ETzogU2hvdWxkIHBhc3MgdGhlIGN1cnJlbnQgZGF0YS4gSW5zdGVhZCBvZiBhY2Nlc3NpbmcgaXQgZnJvbSBnbG9iYWxcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGVkaXRvci10YWJcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2F2ZUVsZW1lbnQuYmluZCh0aGlzKX0gaWQ9XCJzYXZlXCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNhdmVcIj48L2k+U2F2ZSAmIGNsb3NlPC9idXR0b24+ICAgIFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yIG5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5Db21wb25lbnQgTmFtZTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbnRlciBlbGVtZW50IG5hbWVcIiB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfSBvbkNoYW5nZT17dGhpcy5zYXZlTmFtZS5iaW5kKHRoaXMpfSBpZD1cImVsZW1lbnROYW1lXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yIG1hcmt1cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkNvbXBvbmVudCBNYXJrdXA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2RlTWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0N1cnNvcj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e21hcmt1cH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IFwiZGFyY3VsYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0SW5kZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV3JhcHBpbmc6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZWRpdG9yLCBkYXRhLCBtYXJrdXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrdXA6IG1hcmt1cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3IgY3NzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+Q29tcG9uZW50IENTUzwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENvZGVNaXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3Vyc29yPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c3R5bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwidGV4dC9qYXZhc2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOiBcImRhcmN1bGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFydEluZGVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdyYXBwaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGVkaXRvciwgZGF0YSwgc3R5bGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3Igc3RhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5Db21wb25lbnQgU3RhdGU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2RlTWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0N1cnNvcj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInRleHQvamF2YXNjcmlwdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZTogXCJkYXJjdWxhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hcnRJbmRlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlZGl0b3IsIGRhdGEsIHN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcjtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmVkaXRvci10YWIge1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIGFuaW1hdGlvbjogc2xpZGUtdXAgMC4ycyBlYXNlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXVwIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgIH1cXG59XFxuXFxuaW5wdXQuZm9sZGVyOnJlYWQtb25seSB7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG5cXG4uZWRpdG9yLXRhYiBidXR0b24ge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogLTUlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbn1cXG5cXG4uc2hvd0VkaXRvcntcXG4gICAgbWFyZ2luLWJvdHRvbTozMHB4O1xcbn1cXG5cXG4uZWRpdG9yLm5hbWV7XFxuICAgIHdpZHRoOjEwJTtcXG59XFxuXFxuLmVkaXRvcntcXG4gICAgd2lkdGg6IDI5JTtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBtYXJnaW46IDVweDtcXG4gICAgbWFyZ2luLXRvcDogMnB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gRGVwZW5kZW5jaWVzLlxuXG5cbi8vIENvbXBvbmVudHMuIFxuXG5pbXBvcnQgQ29uZmlndXJhdG9yIGZyb20gXCIuL0NvbmZpZ3VyYXRvclwiO1xuaW1wb3J0IE5vZGVzIGZyb20gXCIuLi91dGlsaXRpZXMvQ29tcG9uZW50cy9Ob2Rlc1wiO1xuaW1wb3J0IEV2ZW50IGZyb20gXCIuL0V2ZW50XCI7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gUmVkdWNlcnMuXG5cbmltcG9ydCB7IHVwZGF0ZUV2ZW50LCBzZWxlY3RlZFRhZ0NoYW5nZWQsIGRlbGV0ZUV2ZW50LCB1cGRhdGVDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4vUmVkdWNlclwiO1xuXG5cbi8vIFV0aWxzLlxuXG5pbXBvcnQgeyBnZXROb2RlVHJlZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2V0LW5vZGUtdHJlZS5qc1wiO1xuaW1wb3J0IHsgcmVhZERhdGEgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuY2xhc3MgRXZlbnRzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZFRhZyA9IHRoaXMucHJvcHMuc2VsZWN0ZWRUYWc7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLnByb3BzLmNvbXBvbmVudDtcblxuICAgICAgICAvLyBSZXBvcnQgaWYgbm8gY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbXBvbmVudHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImNvbnRhaW5lciBldmVudHMtdGFiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5FdmVudHM8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+TG9va3MgbGlrZSB5b3UgZG8gbm90IGhhdmUgYW55IFdlYiBjb21wb25lbnQgY3JlYXRlZC4gVHlwZSBzb21lIFwiaHRtbFwiIG9uIHRoZSByaWdodCBcIkVkaXRvclwiIHRhYjwvcD5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcG9ydCBpZiBubyBjb21wb25lbnQgaXMgc2VsZWN0ZWQuXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuc3RhdGUuY29tcG9uZW50cy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiY29udGFpbmVyIGV2ZW50cy10YWJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkV2ZW50czwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8cD5Mb29rcyBsaWtlIHlvdSBoYXZlIG5vdCBzZWxlY3RlZCBhbnkgY29tcG9uZW50LiBDbGljayBvbiBhbnkgb2YgdGhlIGNvbXBvbmVudCBpbiB0aGUgbGVmdCBwYW5lLjwvcD5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgbm9kZVRyZWUgPSBnZXROb2RlVHJlZShjb21wb25lbnQsIGNvbXBvbmVudC5tYXJrdXAsIGNvbXBvbmVudC5zdHlsZSwgSlNPTi5wYXJzZShjb21wb25lbnQuc3RhdGUpLCBjb21wb25lbnQuZXZlbnRzKTtcblxuICAgICAgICAvLyBSZXBvcnQgZXJyb3IuXG4gICAgICAgIGlmIChub2RlVHJlZS5lcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVRyZWUuZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXBvcnQgZXJyb3IgaWYgY29tcG9uZW50IGlzIG5vdCBcbiAgICAgICAgaWYgKG5vZGVUcmVlLnJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIHRoaXMuc3RhdGUuY29tcG9uZW50cy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiY29udGFpbmVyIGV2ZW50cy10YWJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkV2ZW50czwvZGl2PlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRUYWcgPSB0aGlzLnN0YXRlLnNlbGVjdGVkVGFnIHx8IFwiXCI7XG4gICAgICAgIGxldCBldmVudHNPZlNlbGVjdGVkVGFnLCBjb25maWd1cmF0b3IsIGV2ZW50TmFtZXMgPSBbXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgICAgaWYgKHNlbGVjdGVkVGFnLmluY2x1ZGVzKFwiY2hpbGQtY29tcG9uZW50LVwiKSkge1xuICAgICAgICAgICAgLy8gR2V0IGxpc3Qgb2YgY29tcG9uZW50cy5cbiAgICAgICAgICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG5cbiAgICAgICAgICAgIC8vIEdldCBjaGlsZCBjb21wb25lbnQgbmFtZSBmcm9tIHRoZSBzZWxlY3RlZCB0YWcuXG4gICAgICAgICAgICBsZXQgY2hpbGRDb21wb25lbnROYW1lID0gc2VsZWN0ZWRUYWcuc3BsaXQoXCJjaGlsZC1jb21wb25lbnQtXCIpWzFdO1xuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjaGlsZCBjb21wb25lbnQgZnJvbSB0aGUgbGlzdCBvZiBjb21wb25lbnRzLlxuICAgICAgICAgICAgbGV0IGNoaWxkQ29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQubmFtZSA9PT0gY2hpbGRDb21wb25lbnROYW1lKTtcblxuICAgICAgICAgICAgLy8gRmluZCBldmVudHMgdGhhdCBhcmUgcHVibGlzaGFibGUgZnJvbSB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgICAgICAgZXZlbnROYW1lcyA9IGNoaWxkQ29tcG9uZW50LmV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gZXZlbnQucHVibGlzaGFibGUgPT09IHRydWUpLm1hcChwdWJsaXNoYWJsZUV2ZW50ID0+IHB1Ymxpc2hhYmxlRXZlbnQucHVibGlzaE5hbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgZXZlbnQgdmlldyBmb3IgbGlzdCBvZiBhbGwgZXZlbnRzXG4gICAgICAgICAgICBsZXQgZXZlbnRzID0gY29tcG9uZW50LmV2ZW50cy5maWx0ZXIoZXZlbnQ9PmV2ZW50TmFtZXMuZmluZChldmVudE5hbWUgPT5ldmVudE5hbWUgID09PSBldmVudC5uYW1lICYmIGV2ZW50LmlkPT09Y2hpbGRDb21wb25lbnQubmFtZSkpXG4gICAgICAgICAgICBldmVudHMgPSBldmVudHMubWFwKChldmVudCwgaW5kZXgpID0+IDxFdmVudCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fSBldmVudD17ZXZlbnR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZ0lEPXtzZWxlY3RlZFRhZ30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZXM9e2V2ZW50TmFtZXN9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNhdmU9e3VwZGF0ZUV2ZW50LmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVFdmVudD17ZGVsZXRlRXZlbnQuYmluZCh0aGlzKX0gLz4pO1xuXG4gICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGV2ZW50cyB0aGF0IGFyZSBub3QgcGFydCBvZiBzZWxlY3RlZFRhZ1xuICAgICAgICAgICAgZXZlbnRzT2ZTZWxlY3RlZFRhZyA9IHNlbGVjdGVkVGFnID8gZXZlbnRzIDogbnVsbDtcblxuICAgICAgICAgICAgY29uZmlndXJhdG9yID0gPENvbmZpZ3VyYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlQ29uZmlndXJhdGlvbi5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROYW1lPXtjaGlsZENvbXBvbmVudE5hbWV9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ9e2NvbXBvbmVudH0gLz47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSBjb21wb25lbnQuZXZlbnRzXG4gICAgICAgICAgICAgICAgLm1hcCgoZXZlbnQsIGluZGV4KSA9PiA8RXZlbnQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50PXtldmVudH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnSUQ9e3NlbGVjdGVkVGFnfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lcz17ZXZlbnROYW1lc30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZT17dXBkYXRlRXZlbnQuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUV2ZW50PXtkZWxldGVFdmVudC5iaW5kKHRoaXMpfSAvPik7XG4gICAgICAgICAgICBldmVudHNPZlNlbGVjdGVkVGFnID0gc2VsZWN0ZWRUYWcgPyBldmVudHMuZmlsdGVyKGV2ZW50ID0+IHNlbGVjdGVkVGFnLmluY2x1ZGVzKGV2ZW50LnByb3BzLmV2ZW50LmlkKSkgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJjb250YWluZXIgZXZlbnRzLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFnc1wiPlxuICAgICAgICAgICAgICAgICAgICA8Tm9kZXMgbm9kZT17bm9kZVRyZWUucmVzdWx0fSBvblNlbGVjdGVkVGFnQ2hhbmdlZD17c2VsZWN0ZWRUYWdDaGFuZ2VkLmJpbmQodGhpcyl9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge2NvbmZpZ3VyYXRvcn1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c09mU2VsZWN0ZWRUYWcgJiYgZXZlbnRzT2ZTZWxlY3RlZFRhZy5sZW5ndGg+MFxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGlzdGluZyBFdmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PntldmVudHNPZlNlbGVjdGVkVGFnfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHtzZWxlY3RlZFRhZz9cbiAgICAgICAgICAgICAgICAgICA8ZGl2PjxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5BZGQgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PEV2ZW50IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2NvbXBvbmVudC5ldmVudHMubGVuZ3RofSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lcz17ZXZlbnROYW1lc30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnSUQ9e3NlbGVjdGVkVGFnfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TYXZlPXt1cGRhdGVFdmVudC5iaW5kKHRoaXMpfSAvPjwvZGl2PiBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgbnVsbH1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudHM7XG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIlxuXG5cbmNsYXNzIENvbmZpZ3VyYXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHRoaXMucHJvcHMucGFyZW50LmNvbmZpZylbdGhpcy5wcm9wcy5jaGlsZE5hbWVdIHx8IHsgb3ZlcnJpZGU6IGZhbHNlfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG92ZXJyaWRlOiBjb25maWcub3ZlcnJpZGUsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnZWxPdmVycmlkZSgpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG92ZXJyaWRlOiAhdGhpcy5zdGF0ZS5vdmVycmlkZVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGU6ICF0aGlzLnN0YXRlLm92ZXJyaWRlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGROYW1lOiB0aGlzLnByb3BzLmNoaWxkTmFtZSxcbiAgICAgICAgICAgIHBhcmVudE5hbWU6IHRoaXMucHJvcHMucGFyZW50Lm5hbWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2F2ZUNvbmZpZygpe1xuICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIG92ZXJyaWRlOiB0aGlzLnN0YXRlLm92ZXJyaWRlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkTmFtZTogdGhpcy5wcm9wcy5jaGlsZE5hbWUsXG4gICAgICAgICAgICBwYXJlbnROYW1lOiB0aGlzLnByb3BzLnBhcmVudC5uYW1lXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5DaGlsZCBDb25maWd1cmF0aW9uczwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2luZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+T3ZlcnJpZGUgc3RhdGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgb25DaGFuZ2U9e3RoaXMudG9nZ2VsT3ZlcnJpZGUuYmluZCh0aGlzKX0gY2hlY2tlZD17dGhpcy5zdGF0ZS5vdmVycmlkZSA/IFwiY2hlY2tlZFwiIDogXCJcIn0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25maWd1cmF0b3I7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5lcnJvciB7XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbi5pbmZvIHtcXG4gICAgY29sb3I6IHllbGxvd2dyZWVuO1xcbn1cXG5cXG5sYWJlbCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5jb25maWd1cmF0b3Ige1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLnNwYWNpbmd7XFxuICAgIG1hcmdpbjogMTBweDtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmNsYXNzIE5vZGVzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZTtcblxuXG4gICAgICAgIGlmKCFub2RlKXtcbiAgICAgICAgICAgIHJldHVybiAoPHNwYW4+bnVsbDwvc3Bhbj4pXG4gICAgICAgIH1cbiAgICAgICAgaWYodHlwZW9mIG5vZGU9PT1cInN0cmluZ1wiKXtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxsaT57bm9kZX08L2xpPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWQgPSBub2RlLnByb3BzLmlkID8gKFwiLVwiK25vZGUucHJvcHMuaWQpIDogXCJcIjtcblxuICAgICAgICAvLyBDaGVjayBpZiBpdCBjb250YWlucyBjaGlsZHJlbi5cbiAgICAgICAgaWYobm9kZS5wcm9wcyAmJiBBcnJheS5pc0FycmF5KG5vZGUucHJvcHMuY2hpbGRyZW4pKXtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUucHJvcHMuY2hpbGRyZW4ubWFwKChjaGlsZCxpbmRleCk9PjxOb2RlcyBrZXk9e2luZGV4fSBub2RlPXtjaGlsZH0gb25TZWxlY3RlZFRhZ0NoYW5nZWQ9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9Lz4pO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwic2VsZWN0ZWRFbGVtZW50XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtub2RlLnR5cGUgKyBpZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAge25vZGUudHlwZSAraWR9XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBub2RlIGNvbnRhaW5zIG9ubHkgb25lIGNoaWxkcmVuLCBqc3ggZ2V0IHRyYW5zcGlsZWQgdG8gb2JqZWN0IHJhdGhlciB0aGFuIGFycmF5LlxuICAgICAgICBlbHNlIGlmKHR5cGVvZiBub2RlLnByb3BzLmNoaWxkcmVuID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IG5vZGUucHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzZWxlY3RlZEVsZW1lbnRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9eyhub2RlLnR5cGUubmFtZSB8fCBub2RlLnR5cGUpK2lkfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7KG5vZGUudHlwZS5uYW1lIHx8IG5vZGUudHlwZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxOb2RlcyBrZXk9e2luZGV4fSBub2RlPXtjaGlsZH0gb25TZWxlY3RlZFRhZ0NoYW5nZWQ9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9Lz5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBuZXN0ZWQgY29tcG9uZW50LlxuICAgICAgICBlbHNlIGlmKHR5cGVvZiBub2RlLnR5cGUgPT09IFwiZnVuY3Rpb25cIil7XG4gICAgICAgICAgICByZXR1cm4gKDx1bD5cbiAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiIFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInNlbGVjdGVkRWxlbWVudFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e1wiY2hpbGQtY29tcG9uZW50LVwiK25vZGUudHlwZS5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAge25vZGUudHlwZS5uYW1lfVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwic2VsZWN0ZWRFbGVtZW50XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bm9kZS50eXBlK2lkfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAge25vZGUudHlwZSAraWR9XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVzOyIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiXG5cbi8vIENvbXBvbmVudHMuXG5cbmltcG9ydCB7VW5Db250cm9sbGVkIGFzIENvZGVNaXJyb3J9IGZyb20gJ3JlYWN0LWNvZGVtaXJyb3IyJztcblxuLy8gUmVkdWNlcnMuIFxuXG5pbXBvcnQge3VwZGF0ZUV2ZW50TmFtZSwgdXBkYXRlRXZlbnRUeXBlLCB1cGRhdGVQdWJsaXNoTmFtZX0gZnJvbSBcIi4vUmVkdWNlclwiO1xuXG4vLyBFdmVudHMuXG5cbmltcG9ydCB7cHVibGlzaEV2ZW50LCBkZWxldGVFdmVudH0gZnJvbSAnLi9FdmVudHMnO1xuXG5jbGFzcyBFdmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5ldmVudCA/IHRoaXMucHJvcHMuZXZlbnQubmFtZSA6IFwiXCIsXG4gICAgICAgICAgICByZWR1Y2VyOiB0aGlzLnByb3BzLmV2ZW50ID8gdGhpcy5wcm9wcy5ldmVudC5yZWR1Y2VyIDogXCJcIixcbiAgICAgICAgICAgIHB1Ymxpc2hhYmxlOiB0aGlzLnByb3BzLmV2ZW50ID8gdGhpcy5wcm9wcy5ldmVudC5wdWJsaXNoYWJsZSA6IFwiXCIsXG4gICAgICAgICAgICBwdWJsaXNoTmFtZTogdGhpcy5wcm9wcy5ldmVudCA/IHRoaXMucHJvcHMuZXZlbnQucHVibGlzaE5hbWUgOiBcIlwiLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkVGFnSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiU2VsZWN0IElEXCI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHVibGlzaE5hbWUgPSB0aGlzLnN0YXRlLnB1Ymxpc2hhYmxlPyA8aW5wdXQgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dXBkYXRlUHVibGlzaE5hbWUuYmluZCh0aGlzKX0gdmFsdWU9e3RoaXMuc3RhdGUucHVibGlzaE5hbWV9IHBsYWNlaG9sZGVyPVwiRW50ZXIgZXZlbnQgcHVibGlzaCBuYW1lIGZvciBvdGhlciBjb21wb25lbnRzIHRvIHN1YnNjcmliZSB0b1wiLz4gOiBudWxsO1xuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IHRoaXMucHJvcHMuZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lPT48b3B0aW9uIHZhbHVlPXtldmVudE5hbWV9Pjwvb3B0aW9uPilcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJldmVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGFjaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5FdmVudCBuYW1lPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGxpc3Q9XCJldmVudHNcIiB0eXBlPVwidGV4dFwiIG9uQ2hhbmdlPXt1cGRhdGVFdmVudE5hbWUuYmluZCh0aGlzKX0gdmFsdWU9e3RoaXMuc3RhdGUubmFtZX0gdGl0bGU9XCJFdmVudCBOYW1lXCIvPlxuICAgICAgICAgICAgICAgICAgICA8ZGF0YWxpc3QgaWQ9XCJldmVudHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtldmVudE5hbWVzfVxuICAgICAgICAgICAgICAgICAgICA8L2RhdGFsaXN0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwYWNpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgUHVibGlzaGFibGVcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG9uQ2hhbmdlPXt1cGRhdGVFdmVudFR5cGUuYmluZCh0aGlzKX0gY2hlY2tlZD17dGhpcy5zdGF0ZS5wdWJsaXNoYWJsZT8gXCJjaGVja2VkXCI6IFwiXCJ9Lz5cblxuICAgICAgICAgICAgICAgICAgICB7cHVibGlzaE5hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3BhY2luZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+RXZlbnQgcmVkdWNlcjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxDb2RlTWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucmVkdWNlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3Vyc29yPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IFwiZGFyY3VsYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0SW5kZW50OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGVkaXRvciwgZGF0YSwgcmVkdWNlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZHVjZXI6IHJlZHVjZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17cHVibGlzaEV2ZW50LmJpbmQodGhpcyl9IGlkPVwic2F2ZUV2ZW50XCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNhdmVcIj48L2k+U2F2ZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2RlbGV0ZUV2ZW50LmJpbmQodGhpcyl9IGlkPVwiZGVsZXRlRXZlbnRcIj48aSBjbGFzc05hbWU9XCJmYXMgZmEtdHJhc2hcIj48L2k+RGVsZXRlPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZXJyb3Ige1xcbiAgICBjb2xvcjogcmVkO1xcbn1cXG5cXG5cXG4uaW5mbyB7XFxuICAgIGNvbG9yOiB5ZWxsb3dncmVlbjtcXG59XFxuXFxubGFiZWwge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4uZXZlbnQgaW5wdXQge1xcbiAgICBtYXJnaW4tbGVmdDo1cHg7XFxuICAgIHdpZHRoOjE1MHB4O1xcbn1cXG5cXG4uZXZlbnQgdGV4dGFyZWEge1xcbiAgICBtYXJnaW4tdG9wOiA4cHg7XFxuICAgIHdpZHRoOiAzMDBweDtcXG59XFxuXFxuLmlucHV0IHtcXG4gICAgcGFkZGluZzogNXB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbiAgZnVuY3Rpb24gIHVwZGF0ZUV2ZW50TmFtZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbmFtZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG4gICAgXG4gZnVuY3Rpb24gICB1cGRhdGVQdWJsaXNoTmFtZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcHVibGlzaE5hbWU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gIGZ1bmN0aW9uICB1cGRhdGVFdmVudFR5cGUoZSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcHVibGlzaGFibGU6IGUuY3VycmVudFRhcmdldC5jaGVja2VkXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHVwZGF0ZUV2ZW50TmFtZSxcbiAgICAgICAgdXBkYXRlRXZlbnRUeXBlLFxuICAgICAgICB1cGRhdGVQdWJsaXNoTmFtZSxcbiAgICAgICAgdXBkYXRlRXZlbnRUeXBlXG4gICAgfSIsImV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoRXZlbnQoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25TYXZlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIHJlZHVjZXI6IHRoaXMuc3RhdGUucmVkdWNlcixcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICAgICAgcHVibGlzaGFibGU6IHRoaXMuc3RhdGUucHVibGlzaGFibGUsXG4gICAgICAgICAgICBwdWJsaXNoTmFtZTogdGhpcy5zdGF0ZS5wdWJsaXNoTmFtZVxuICAgICAgICB9KVxuICAgIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUV2ZW50KCl7XG4gICAgICAgIHRoaXMucHJvcHMuZGVsZXRlRXZlbnQodGhpcy5wcm9wcy5pbmRleCk7XG4gICAgfSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmV2ZW50cyB7XFxuICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLmVycm9yIHtcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuLnRhZ3MudGFncyB1bCB7XFxuICAgIGJvcmRlcjogMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcXG4gICAgcGFkZGluZzo1cHg7XFxufVxcblxcbi50YWdzIHVsOmZpcnN0LWNoaWxkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IC0ycHg7XFxufVwiLCBcIlwiXSk7XG5cbiIsIlxuICAgIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFdmVudChldmVudCkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5jb21wb25lbnQpKVxuXG4gICAgICAgIC8vIEtlZXAgdGhlIGNoaWxkIGNvbXBvbmVudCBuYW1lIGFzIHRoZSBJRC4gV2lsbCBjYXVzZSBwcm9ibGVtIGluIGZ1dHVyZSBmb3IgbGlzdCByZW5kZXJpbmcgYm95LlxuICAgICAgICBpZih0aGlzLnN0YXRlLnNlbGVjdGVkVGFnLmluY2x1ZGVzKFwiY2hpbGQtY29tcG9uZW50LVwiKSl7XG4gICAgICAgICAgICBldmVudC5pZCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRUYWcuc3BsaXQoXCJjaGlsZC1jb21wb25lbnQtXCIpWzFdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGV2ZW50LmlkID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFRhZy5zcGxpdChcIi1cIilbMV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIFxuICAgICAgICBpZiAoZXZlbnQuaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWxlbWVudC5ldmVudHMucHVzaChldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAxLiBGaW5kIHRoZSBldmVudFxuICAgICAgICAgICAgbGV0IGNoYW5nZWRFdmVudEluZGV4ID0gZWxlbWVudC5ldmVudHMuZmluZEluZGV4KGU9PmUuaWQ9PT1ldmVudC5pZCk7XG4gICAgICAgICAgICBpZihjaGFuZ2VkRXZlbnRJbmRleD09LTEpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDaGFuZ2luZyBldmVudCBuYW1lIHdpbGwgbm90IGhlbHAuIENyZWF0ZSBhIG5ldyBldmVudFwiKTsgLy8gRmVhdHVyZSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1lbnQuZXZlbnRzW2NoYW5nZWRFdmVudEluZGV4XSA9IGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5vbkV2ZW50c1VwZGF0ZShlbGVtZW50LmV2ZW50cyk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGVkVGFnQ2hhbmdlZChlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRUYWc6IGUuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZWxldGVFdmVudChpbmRleCkge1xuXG4gICAgICAgIC8vIEdldCBjdXJyZW50IGNvbXBvbmVudC5cbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5jb21wb25lbnQpKTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGV2ZW50IHRvIGJlIGRlbGV0ZWQuXG4gICAgICAgIGNvbXBvbmVudC5ldmVudHMgPSBjb21wb25lbnQuZXZlbnRzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGVsZW1lbnRzIHdpdGggbmV3IGV2ZW50cy5cbiAgICAgICAgdGhpcy5wcm9wcy5vbkV2ZW50c1VwZGF0ZShjb21wb25lbnQuZXZlbnRzKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29uZmlndXJhdGlvbihjb25maWcpe1xuICAgICAgICB0aGlzLnByb3BzLm9uQ29uZmlnVXBkYXRlKGNvbmZpZyk7XG4gICAgfSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHvCoHNhdmVDb21wb25lbnRzVG9XaW5kb3csIGdldE5lc3RlZENvbXBvbmVudHMgfSBmcm9tIFwiLi9SdW50aW1lXCI7XG5cbi8vIFdoeT8gQmVjYXVzZSBpbXBvcnRpbmcgUmVhY3QgYXMgdmFyaWFibGUgYXQgbGluZSMyIHdpbGwgYmUgYWx0ZXJ0ZWQgYnkgYmFiZWwuIEtlZXAgaXQgYXMgYSBwcm9wZXJ0eSwgYmFiZWwgd2lsbCBpZ25vcmUgaXQuXG53aW5kb3cuUmVhY3QgPSBSZWFjdDtcbndpbmRvdy5Db21wb25lbnQgPSBSZWFjdC5Db21wb25lbnQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlVHJlZShlbGVtZW50LCBqc3gsIHN0eWxlLCBzdGF0ZSwgZXZlbnRzKSB7XG4gICAgXG4gICAgbGV0IHJlc3VsdCwgZXJyb3I7XG4gICAgdHJ5e1xuICAgICAgICBsZXQgbmVzdGVkQ29tcG9uZW50cyA9IGdldE5lc3RlZENvbXBvbmVudHMoZWxlbWVudCk7XG4gICAgICAgIGlmIChuZXN0ZWRDb21wb25lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNhdmVDb21wb25lbnRzVG9XaW5kb3cobmVzdGVkQ29tcG9uZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gZXZhbChCYWJlbC50cmFuc2Zvcm0oanN4LCB7IHByZXNldHM6IFsncmVhY3QnXSB9KS5jb2RlKVxuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIGVycm9yID0gZTtcbiAgICB9XG4gICAgZmluYWxseXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIHJlc3VsdCwgcmVzdWx0XG4gICAgICAgIH07XG4gICAgfVxufSIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5pbXBvcnQgRHluYW1pY0NvbXBvbmVudCBmcm9tIFwiLi9EeW5hbWljQ29tcG9uZW50XCI7XG5cbi8vIFV0aWxpdGllcy5cblxuaW1wb3J0IHsgcmVhZENvbXBvbmVudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvU3RvcmFnZVwiO1xuXG5jbGFzcyBQcmV2aWV3IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMucHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgICAgZGlzcGxheTogXCJtb2JpbGVcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmcmVzaCggKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjb21wb25lbnQ6IHJlYWRDb21wb25lbnQodGhpcy5zdGF0ZS5jb21wb25lbnQubmFtZSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzd2l0Y2hUYWJsZXQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZGlzcGxheTogXCJ0YWJsZXRcIlxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN3aXRjaE1vYmlsZSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkaXNwbGF5OiBcIm1vYmlsZVwiXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3dpdGNoRGVza3RvcCgpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZGVza3RvcFwiXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIC8vIEhlbHBzIHRvIHJlcmVuZGVyIHdoZW4gY2hhbmdlcyB0byBtYXJrdXAvZXZlbnRzIGFyZSBtYWRlIHRvIHRoZSBjb21wb25lbnQgYW5kIHByZXZpZXcgdGhlbS5cbiAgICAgICAgbGV0IHJhbmRvbUtleSA9IHRoaXMucHJvcHMuY29tcG9uZW50LmlkKih+fihNYXRoLnJhbmRvbSgpKjEwKSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2ICBjbGFzc05hbWU9e2Bjb250YWluZXIgcHJldmlldyAke3RoaXMuc3RhdGUuZGlzcGxheX1gfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIFByZXZpZXdcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJDb250cm9sc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnN3aXRjaFRhYmxldC5iaW5kKHRoaXMpfT48aSBjbGFzc05hbWU9XCJmYSBmYS10YWJsZXQtYWx0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnN3aXRjaE1vYmlsZS5iaW5kKHRoaXMpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1tb2JpbGUtYWx0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnN3aXRjaERlc2t0b3AuYmluZCh0aGlzKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtZGVza3RvcFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkeW5hbWljQ29tcG9uZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxEeW5hbWljQ29tcG9uZW50IG9uU2F2ZT17dGhpcy5wcm9wcy5vblNhdmV9IGtleT17cmFuZG9tS2V5fSBjb21wb25lbnQ9e3RoaXMuc3RhdGUuY29tcG9uZW50fS8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJldmlldzsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb250YWluZXJ7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgYmFja2dyb3VuZDogIzJDMzEzNDtcXG59XFxuXFxuLyogQ2VudGVyIGFsaWduIHRoZSB0aXRsZSAqL1xcblxcbi5wcmV2aWV3IC50aXRsZXtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4vKiBGaXggdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIHByZXZpZXcgLSBkZWZhdWx0Ki9cXG5cXG4ucHJldmlldyAuZHluYW1pY0NvbXBvbmVudCB7XFxuICAgIHdpZHRoOjMwdnc7XFxuICAgIGhlaWdodDogNjAwcHg7XFxuICAgIG92ZXJmbG93OnNjcm9sbDtcXG59XFxuXFxuLyogRml4IHRoZSBoZWlnaHQgYW5kIHdpZHRoIG9mIHByZXZpZXcgLSBtb2JpbGUgZGlzcGxheSAqL1xcblxcbi5wcmV2aWV3Lm1vYmlsZSAuZHluYW1pY0NvbXBvbmVudCB7XFxuICAgIHdpZHRoOjQ3OXB4O1xcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAuMnM7XFxufVxcblxcbi8qIEZpeCB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiBwcmV2aWV3IC0gdGFibGV0IGRpc3BsYXkgKi9cXG5cXG4ucHJldmlldy50YWJsZXQgLmR5bmFtaWNDb21wb25lbnR7XFxuICAgIHdpZHRoOjc2N3B4O1xcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAuMnM7XFxufVxcblxcbi8qIEZpeCB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiBwcmV2aWV3IC0gZGVza3RvcCBkaXNwbGF5ICovXFxuXFxuLnByZXZpZXcuZGVza3RvcCAuZHluYW1pY0NvbXBvbmVudCB7XFxuICAgIHdpZHRoOjk5MXB4O1xcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAuMnM7XFxufVxcblxcbi8qKiBIaWdobGlnaHQgbW9iaWxlIHdoZW4gZGlzcGxheSBtb2RlIGlzIG1vYmlsZSAqL1xcblxcbi5wcmV2aWV3Lm1vYmlsZSAuZmEtbW9iaWxlLWFsdCB7XFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICB0cmFuc2l0aW9uOiBmb250LXNpemUgLjFzLHBhZGRpbmcgLjFzIDtcXG59XFxuXFxuLyoqIEhpZ2hsaWdodCB0YWJsZXQgd2hlbiBkaXNwbGF5IG1vZGUgaXMgdGFibGV0ICovXFxuXFxuLnByZXZpZXcudGFibGV0IC5mYS10YWJsZXQtYWx0IHtcXG5cXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIHRyYW5zaXRpb246IGZvbnQtc2l6ZSAuMXMscGFkZGluZyAuMXMgO1xcbn1cXG5cXG4vKiogSGlnaGxpZ2h0IGRlc2t0b3Agd2hlbiBkaXNwbGF5IG1vZGUgaXMgZGVza3RvcCAqL1xcblxcbi5wcmV2aWV3LmRlc2t0b3AgLmZhLWRlc2t0b3Age1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgdHJhbnNpdGlvbjogZm9udC1zaXplIC4xcyxwYWRkaW5nIC4xcyA7XFxuXFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IEFzc2V0IGZyb20gXCIuL0Fzc2V0XCI7XG5cbi8vIEV2ZW50cy5cblxuaW1wb3J0IHtkcm9wSGFuZGxlciwgZHJhZ092ZXJIYW5kbGVyLCBkcmFnTGVhdmVIYW5kbGVyfSBmcm9tIFwiLi9SZWR1Y2VyXCI7XG5cbi8vIFV0aWxpdGllcy5cblxuaW1wb3J0IHtmZXRjaEZyb21EQiwgd3JpdGVUb0RCfSBmcm9tIFwiLi9kYlwiO1xuXG5jbGFzcyBBc3NldHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNsYXNzOiBcImRyb3Bfem9uZVwiLFxuICAgICAgICAgICAgaW1hZ2VVUkw6XCJcIixcbiAgICAgICAgICAgIGFzc2V0czogW10sXG4gICAgICAgICAgICBzZWxlY3RlZEFzc2V0OlwiXCJcbiAgICAgICAgfTtcblxuICAgICAgICAvKiBTdG9yZSB0aGUgYXNzZXRzIGluIGxvY2FsIERCICovXG5cbiAgICAgICAgdGhpcy53cml0ZVRvREIgPSB3cml0ZVRvREIuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBhcHBlbmRUb0JvZHkoZmlsZSl7XG4gICAgICAgIHZhciBiaW4gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgdmFyIG5ld0ZpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbmV3RmlsZS5pbm5lckhUTUwgPSAnTG9hZGVkIDogJyArIGZpbGUubmFtZSArICcgc2l6ZSAnICsgZmlsZS5zaXplICsgJyBCJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuZXdGaWxlKTtcblxuXG4gICAgICAgIC8qIEtlZXAgdGhlIGltYWdlIGluIERPTSBhcyBjYWNoZS4gKi9cblxuICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgaW1nLmZpbGUgPSBmaWxlO1xuICAgICAgICBpbWcuc3JjID0gYmluO1xuICAgICAgICBuZXdGaWxlLmFwcGVuZENoaWxkKGltZyk7XG4gICAgfVxuXG4gICAgdXBkYXRlZFNlbGVjdGVkKGUpIHtcblxuICAgICAgICAvKiBLZWVwIHRyYWNrIG9mIHNlbGVjdGVkIGFzc2V0IGluIHRoZSBzdGF0ZSAqL1xuXG4gICAgICAgIGxldCBhc3NldE5hbWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW5hbWVcIik7IFxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGVkQXNzZXQ6IGFzc2V0TmFtZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICAvKiBDcmVhdGUgYW4gYXNzZXQgY29tcG9uZW50IGZvciBlYWNoIGFzc2V0cy4gKi9cblxuICAgICAgICBsZXQgYXNzZXRzID0gdGhpcy5zdGF0ZS5hc3NldHMubWFwKGFzc2V0PT4gPEFzc2V0IGFzc2V0PXthc3NldH0gc2VsZWN0ZWQ9e3RoaXMuc3RhdGUuc2VsZWN0ZWRBc3NldH0gb25TZWxlY3RlZD17dGhpcy51cGRhdGVkU2VsZWN0ZWQuYmluZCh0aGlzKX0vPik7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImFzc2V0c1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17ZmV0Y2hGcm9tREIuYmluZCh0aGlzKX0+TG9hZCBBc3NldHM8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuc3RhdGUuY2xhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRyb3A9e2Ryb3BIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnT3Zlcj17ZHJhZ092ZXJIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnTGVhdmU9e2RyYWdMZWF2ZUhhbmRsZXIuYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8cD5EcmFnIG9uZSBvciBtb3JlIGZpbGVzIHRvIHRoaXMgRHJvcCBab25lIC4uLjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zZWxlY3RlZEFzc2V0Lm5hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge2Fzc2V0c31cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBc3NldHM7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi8qIFNob3cgZGFzaGVkIG91dGxpbmUgZm9yIHRoZSBkcm9wIHpvbmUuKi9cXG5cXG4uZHJvcF96b25lIHtcXG4gIGJvcmRlcjogMXB4IGxpZ2h0Z3JheSBkYXNoZWQ7XFxuICB3aWR0aDogIDIwMHB4O1xcbiAgaGVpZ2h0OiAxMDBweDtcXG59XFxuXFxuLyogU2hvdyBkYXNoZWQgb3V0bGluZSBkdXJpbmcgZHJhZyBvdmVyLiAqL1xcblxcbi5kcmFnX292ZXIge1xcbiAgYm9yZGVyOiAycHggbGlnaHRncmF5IGRhc2hlZDtcXG4gIHdpZHRoOiAgMjAwcHg7XFxuICBoZWlnaHQ6IDEwMHB4O1xcbn1cXG5cXG4vKiBHaXZlIHNvbWUgc3BhY2luZyBhcm91bmQgYXNzZXQgbmFtZS4gKi9cXG5cXG4uYXNzZXRzIHB7XFxuICBwYWRkaW5nOjE1cHg7IFxcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG4vLyBTdHlsZXMuXG5cbmltcG9ydCAgXCIuL1N0eWxlLmNzc1wiO1xuXG5jbGFzcyBBc3NldCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHAgZGF0YS1uYW1lPXt0aGlzLnByb3BzLmFzc2V0Lm5hbWV9IG9uQ2xpY2s9e3RoaXMucHJvcHMub25TZWxlY3RlZH0+e3RoaXMucHJvcHMuYXNzZXQubmFtZX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFzc2V0O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4vKiBTaG93IHNlbGVjdGVkIGFzc2V0IHdpdGggYSBsaWdodCBkYXNoZWQgb3V0bGluZSAqL1xcblxcbi5zZWxlY3RlZEFzc2V0e1xcbiAgICBib3JkZXI6IDFweCBsaWdodGdyYXkgZGFzaGVkO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbi8vIFB1YmxpYyBmdW5jdGlvbnMuXG5cbmV4cG9ydCBmdW5jdGlvbiBkcm9wSGFuZGxlcihldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvKiBTdG9yZSB0aGUgaW1hZ2UgaW4gREIgYW5kIGluIERPTSBhZnRlciBkcm9wICovXG5cbiAgICBbXS5mb3JFYWNoLmNhbGwoZXYuZGF0YVRyYW5zZmVyLmZpbGVzLCAoZmlsZSk9PntcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gIGZ1bmN0aW9uIChldmVudCxiKSB7XG4gICAgICAgICAgICAvLyAxLiBhcHBlbmQgdG8gYm9keVxuICAgICAgICAgICAgLy8gMi4gd3JpdGUgdG8gZGIuXG4gICAgICAgICAgICB0aGlzLmFwcGVuZFRvQm9keShmaWxlKTtcbiAgICAgICAgICAgIHRoaXMud3JpdGVUb0RCKGV2ZW50LnRhcmdldC5yZXN1bHQsIGZpbGUubmFtZSk7XG5cbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH0pXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2xhc3M6IFwiZHJvcF96b25lXCJcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhZ092ZXJIYW5kbGVyKGV2KSB7XG4gICAgY29uc29sZS5sb2coJ0ZpbGUocykgaW4gZHJvcCB6b25lJyk7XG5cbiAgICAvKiBTaG93IGRyYWcgb3ZlciB2aXN1YWxzICovXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2xhc3M6IFwiZHJhZ19vdmVyXCJcbiAgICB9KVxuXG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYWdMZWF2ZUhhbmRsZXIoZSkge1xuXG4gICAgLyogU2hvdyBkcm9wIHZpc3VhbHMgKi9cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjbGFzczogXCJkcm9wX3pvbmVcIlxuICAgIH0pXG59IiwiXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVUb0RCKHJlc3VsdCwgbmFtZSkge1xuICAgIHdpbmRvdy5pREIuZ2V0KG5hbWUpLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICBpbWcuaHJlZiA9IGRhdGEucmVzdWx0O1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGltYWdlVVJMOiBkYXRhLnJlc3VsdFxuICAgICAgICB9KVxuICAgIH0pXG4gICAgd2luZG93LmlEQi5wdXQoeyBuYW1lOiBuYW1lLCByZXN1bHQ6IHJlc3VsdCB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hGcm9tREIoKSB7XG4gICAgd2luZG93LmlEQi5nZXRBbGwoKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAvLyBzYXZlIGl0IHRvIHdpbmRvd1xuXHRcdHdpbmRvdy5hc3NldHMgPSBkYXRhLm1hcChpbWFnZSA9PiB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuYW1lOiBpbWFnZS5uYW1lLFxuXHRcdFx0XHRibG9iOiBpbWFnZS5yZXN1bHQsXG5cdFx0XHRcdHVybDogZ2V0VVJMKCBpbWFnZS5yZXN1bHQpXG5cdFx0XHR9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBhc3NldHM6IHdpbmRvdy5hc3NldHNcbiAgICAgICAgfSlcbiAgICB9KTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IG9uRXhwb3J0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9FeHBvcnQvaW5kZXhcIjtcblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuY2xhc3MgRXhwb3J0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBleHBvcnRUeXBlOiBcIlNJTVBMRVwiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkV4cG9ydFR5cGVDaGFuZ2VkKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBleHBvcnRUeXBlOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvLyBSZW1vdmUgdGhpcy5wcm9wcy5pbmRleCwgaW5zdGVhZCB1c2UgdGhpcyBlbGVtZW50IGluc3RhbmNlIGluZGV4LiBSZW1vdmVzIGR1cGxpY2F0ZSBjb2RlXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiRXhwb3J0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJsb2dDb2RlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5leHBvcnRUeXBlID09PSBcImxvZ0NvZGVcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25FeHBvcnRUeXBlQ2hhbmdlZC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3RKUyAtIGxvZ3Mgb3V0cHV0IHRvIHlvdXIgY29uc29sZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+LlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJFeHBvcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIlNUT1JZQk9PS1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuZXhwb3J0VHlwZSA9PT0gXCJTVE9SWUJPT0tcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25FeHBvcnRUeXBlQ2hhbmdlZC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+UmVhY3RKUyB3aXRoIFN0b3J5Ym9vayAtIENvZGViYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtvbkV4cG9ydC5iaW5kKG51bGwsIHRoaXMuc3RhdGUuZXhwb3J0VHlwZSwgdGhpcy5wcm9wcy5jb21wb25lbnQubmFtZSl9PjxpIGNsYXNzTmFtZT1cImZhcyBmYS1maWxlLWV4cG9ydFwiPjwvaT5FeHBvcnQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHBvcnQ7XG4iLCJpbXBvcnQge2V4cG9ydFNlcGFyYXRlRmlsZX0gZnJvbSBcIi4vRXhwb3J0U2VwYXJhdGVcIjtcbmltcG9ydCB7IGxvZ0NvZGUgfSBmcm9tIFwiLi9sb2dDb2RlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkV4cG9ydChFWFBPUlRfVFlQRSwgY29tcG9uZW50TmFtZSl7XG4gICAgc3dpdGNoIChFWFBPUlRfVFlQRSkge1xuICAgICAgICBjYXNlIFwiU0lNUExFXCI6IFxuICAgICAgICAgICAgbG9nQ29kZShjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJTVE9SWUJPT0tcIjpcbiAgICAgICAgICAgIGV4cG9ydFNlcGFyYXRlRmlsZShjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBsb2dDb2RlKGNvbXBvbmVudE5hbWUpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBjb252ZXJ0VG9SZWFjdFN0b3JpZXMgfSBmcm9tIFwiLi4vLi4vQ29kZUdlbmVyYXRvci9SZWFjdFN0b3JpZXNcIjtcbmltcG9ydCB7IGNvbnZlcnRUb1JlYWN0IH0gZnJvbSBcIi4uLy4uL0NvZGVHZW5lcmF0b3IvUmVhY3RcIjtcblxuaW1wb3J0IHvCoGdldE5lc3RlZENvbXBvbmVudHMsIGdldENoaWxkcmVuIH0gZnJvbSBcIi4uLy4uL1J1bnRpbWVcIjtcbmltcG9ydCB7IHJlYWREYXRhIH0gZnJvbSBcIi4uLy4uL1N0b3JhZ2VcIjtcbmltcG9ydCB7IHppcEZpbGVzIH0gZnJvbSBcIi4uLy4uL0xpYnJhcmllcy96aXBGaWxlc1wiO1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVDb21wb25lbnRzKG5lc3RlZENvbXBvbmVudHMpe1xuICAgIHJldHVybiBbLi4ubmV3IFNldChuZXN0ZWRDb21wb25lbnRzLm1hcChjb209PmNvbS5uYW1lKSldLm1hcChuYW1lPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzLmZpbmQoZWxlbWVudD0+ZWxlbWVudC5uYW1lPT09bmFtZSlcbiAgICB9KVxufVxuXG5jb25zdCByZW1vdmVQYXJhbnRoZXNpcyA9IChjb21wb25lbnQpPT57XG4gICAgcmV0dXJuIGNvbXBvbmVudC5yZXBsYWNlKFwiKFwiLFwiXCIpLnJlcGxhY2UoXCJ9KVwiLFwifVwiKVxufVxuXG5sZXQgaGVhZGVySW1wb3J0cyA9IGAgLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuYDtcblxuZnVuY3Rpb24gdXBkYXRlVmFyaWFudHMoY29tcG9uZW50cyl7XG5cblxuICAgICAvKipcbiAgICAgICogaWYgY29tcG9uZW50LnZhcmlhbnRzIGlzIGVtcHR5XG4gICAgICAqIHRha2UgaXRzIHN0YXRlIFxuICAgICAgKiBwdXNoIGl0IHRvIHZhcmlhbnQgd2l0aCBuYW1lIGFzIFwiaW5pdGlhbFwiXG4gICAgICAqL1xuXG5cbiAgICBjb21wb25lbnRzLmZvckVhY2goY29tcG9uZW50PT57XG4gICAgICAgIGlmKGNvbXBvbmVudC52YXJpYW50cy5sZW5ndGg9PT0wKXtcbiAgICAgICAgICAgIGNvbXBvbmVudC52YXJpYW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImluaXRpYWxcIixcbiAgICAgICAgICAgICAgICBzdGF0ZTogSlNPTi5wYXJzZShjb21wb25lbnQuc3RhdGUpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICB9KVxuICAgIHJldHVybiBjb21wb25lbnRzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBvcnRTZXBhcmF0ZUZpbGUoY29tcG9uZW50TmFtZSkge1xuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgbGV0IHNlbGVjdGVkQ29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWUuaW5jbHVkZXMoY29tcG9uZW50TmFtZSkpO1xuICAgIFxuICAgIGxldCBuZXN0ZWRDb21wb25lbnRzID0gZ2V0TmVzdGVkQ29tcG9uZW50cyhzZWxlY3RlZENvbXBvbmVudCk7XG4gICAgbGV0IHVuaXF1ZUNvbXBvbmVudHMgPSBnZXRVbmlxdWVDb21wb25lbnRzKG5lc3RlZENvbXBvbmVudHMpXG4gICAgdW5pcXVlQ29tcG9uZW50cyA9IHVwZGF0ZVZhcmlhbnRzKHVuaXF1ZUNvbXBvbmVudHMpXG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggdW5pcXVlIGNvbXBvbmVudHNcbiAgICAgKiBjb252ZXJ0IGl0IHRvIGltcG9ydCByZWFjdCArIGltcG9ydCBjaGlsZHJlbiBkZXBlbmRlbmNpZXMgKyBleHBvcnQuXG4gICAgICogXG4gICAgICogRm9yIGVhY2ggdW5pcXVlIGNvbXBvbmVudHNcbiAgICAgKiBjb252ZXJ0IHRoZSBzdG9yaWVzLlxuICAgICAqL1xuXG5cblxuXG5cbiAgICBsZXQgaW5kaXZpZHVhbENvbXBvbmVudHMgPSB1bmlxdWVDb21wb25lbnRzLm1hcChmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBnZXRDaGlsZHJlbihjb21wb25lbnQpO1xuICAgICAgICBsZXQgY2hpbGRyZW5JbXBvcnRzID0gY2hpbGRyZW4ubWFwKGNoaWxkPT5gaW1wb3J0ICR7Y2hpbGR9IGZyb20gXCIuLyR7Y2hpbGR9XCI7YCkuam9pbihcIlxcblwiKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOmNvbXBvbmVudC5uYW1lK1wiLmpzXCIsXG4gICAgICAgICAgICBjb250ZW50OmAke2hlYWRlckltcG9ydHN9XFxuJHtjaGlsZHJlbkltcG9ydHN9XFxuICR7cmVtb3ZlUGFyYW50aGVzaXMoY29udmVydFRvUmVhY3QoY29tcG9uZW50KSl9IFxcbmV4cG9ydCBkZWZhdWx0ICR7Y29tcG9uZW50Lm5hbWV9O2BcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBsZXQgaW5kaXZpZHVhbFN0b3JpZXMgPSB1bmlxdWVDb21wb25lbnRzLm1hcChmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgICByZXR1cm57XG4gICAgICAgICAgICBuYW1lOiBjb21wb25lbnQubmFtZStcIi5zdG9yaWVzLmpzXCIsXG4gICAgICAgICAgICBjb250ZW50OiBjb252ZXJ0VG9SZWFjdFN0b3JpZXMoY29tcG9uZW50KVxuICAgICAgICB9XG4gICAgfSk7XG5cblxuXG4gICAgemlwRmlsZXMoWy4uLmluZGl2aWR1YWxDb21wb25lbnRzLC4uLmluZGl2aWR1YWxTdG9yaWVzXSlcbn07IiwiLy8gRWxlbWVudHMgdG8gIHJlYWN0IGNvbXBvbmVudC5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9SZWFjdFN0b3JpZXMgKGNvbXBvbmVudCl7XG5cbiAgICBsZXQgUmVhY3RTdG9yaWVzID0gXG4gICAgYGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbiAgICBpbXBvcnQgJHtjb21wb25lbnQubmFtZX0gZnJvbSBcIi4vJHtjb21wb25lbnQubmFtZX1cIjtcbiAgICBcbiAgICBleHBvcnQgZGVmYXVsdCB7XG4gICAgICAgIHRpdGxlOiAnJHtjb21wb25lbnQubmFtZX0nLFxuICAgICAgICBjb21wb25lbnQ6ICR7Y29tcG9uZW50Lm5hbWV9XG4gICAgfVxuICAgIFxuICAgICR7Y29tcG9uZW50LnZhcmlhbnRzLm1hcChmdW5jdGlvbiAodmFyaWFudCl7XG4gICAgICAgIHJldHVybiBgZXhwb3J0IGNvbnN0ICR7dmFyaWFudC5uYW1lfSA9ICgpID0+IDwke2NvbXBvbmVudC5uYW1lfSBzdGF0ZT17JHtKU09OLnN0cmluZ2lmeSh2YXJpYW50LnN0YXRlKX19PjwvJHtjb21wb25lbnQubmFtZX0+O2BcbiAgICB9KS5qb2luKFwiXFxuXFxuXCIpfWBcblxuICAgIHJldHVybiBSZWFjdFN0b3JpZXM7XG59XG4iLCJpbXBvcnQge2Rvd25sb2FkfSBmcm9tIFwiLi9kb3dubG9hZEZpbGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHppcEZpbGVzIChhcnJheSl7XG4gICAgdmFyIHppcCA9IG5ldyBKU1ppcCgpO1xuXG4gICAgLy8gR2VuZXJhdGUgYSBkaXJlY3Rvcnkgd2l0aGluIHRoZSBaaXAgZmlsZSBzdHJ1Y3R1cmVcbiAgICB2YXIgc3JjID0gemlwLmZvbGRlcihcInNyY1wiKTtcblxuICAgIGFycmF5LmZvckVhY2goaXRlbT0+e1xuICAgICAgICBzcmMuZmlsZShpdGVtLm5hbWUsIGl0ZW0uY29udGVudClcbiAgICB9KTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSB0aGUgemlwIGZpbGUgYXN5bmNocm9ub3VzbHlcbiAgICB6aXAuZ2VuZXJhdGVBc3luYyh7dHlwZTpcImJsb2JcIn0pXG4gICAgLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICAvLyBGb3JjZSBkb3duIG9mIHRoZSBaaXAgZmlsZVxuICAgICAgICBkb3dubG9hZChjb250ZW50LCBcImFyY2hpdmUuemlwXCIpO1xuICAgIH0pO1xufSIsImV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEZpbGUobmFtZSwgY29udGVudHMsIG1pbWVfdHlwZSkge1xuICAgIG1pbWVfdHlwZSA9IG1pbWVfdHlwZSB8fCBcInRleHQvcGxhaW5cIjtcblxuICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRzXSwge3R5cGU6IG1pbWVfdHlwZX0pO1xuXG4gICAgZG93bmxvYWQoYmxvYiwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZChibG9iLCBuYW1lKXtcbiAgICB2YXIgZGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgZGxpbmsuZG93bmxvYWQgPSBuYW1lO1xuICAgIGRsaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBkbGluay5vbmNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyByZXZva2VPYmplY3RVUkwgbmVlZHMgYSBkZWxheSB0byB3b3JrIHByb3Blcmx5XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHRoYXQuaHJlZik7XG4gICAgICAgIH0sIDE1MDApO1xuICAgIH07XG5cbiAgICBkbGluay5jbGljaygpO1xuICAgIGRsaW5rLnJlbW92ZSgpO1xufSIsImltcG9ydCB7wqBnZXROZXN0ZWRDb21wb25lbnRzIH0gZnJvbSBcIi4uLy4uL1J1bnRpbWVcIjtcbmltcG9ydCB7IGNvbnZlcnRUb1JlYWN0IH0gZnJvbSBcIi4uLy4uL0NvZGVHZW5lcmF0b3IvUmVhY3RcIjtcbmltcG9ydCB7IHJlYWREYXRhIH0gZnJvbSBcIi4uLy4uL1N0b3JhZ2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0NvZGUoY29tcG9uZW50TmFtZSkge1xuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgbGV0IHNlbGVjdGVkQ29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWUuaW5jbHVkZXMoY29tcG9uZW50TmFtZSkpO1xuICAgIGxldCBuZXN0ZWRDb21wb25lbnRzID0gZ2V0TmVzdGVkQ29tcG9uZW50cyhzZWxlY3RlZENvbXBvbmVudCk7XG5cbiAgICBsZXQgdW5pcXVlQ29tcG9uZW50cyA9IFsuLi5uZXcgU2V0KG5lc3RlZENvbXBvbmVudHMubWFwKGNvbT0+Y29tLm5hbWUpKV0ubWFwKG5hbWU9PntcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMuZmluZChlbGVtZW50PT5lbGVtZW50Lm5hbWU9PT1uYW1lKVxuICAgIH0pXG4gICAgY29uc3QgcmVtb3ZlUGFyYW50aGVzaXMgPSAoY29tcG9uZW50KT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50LnJlcGxhY2UoXCIoXCIsXCJcIikucmVwbGFjZShcIn0pXCIsXCJ9XCIpXG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHVuaXF1ZUNvbXBvbmVudHMubWFwKGNvbnZlcnRUb1JlYWN0KS5tYXAocmVtb3ZlUGFyYW50aGVzaXMpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2VsZWN0ZWQsIC5ncmVlbiB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZWVuO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNDMsIDQzLCA0Myk7XFxufVxcbi5zZWxlY3RlZEFzc2V0e1xcbiAgICBib3JkZXI6IDFweCBsaWdodGdyYXkgZGFzaGVkO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBwb3BIaXN0b3J5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbmNsYXNzIEhpc3RvcnkgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIHJlZnJlc2hUb1ByZXZpb3VzKCkge1xuICAgICAgICBwb3BIaXN0b3J5KCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5yZWZyZXNoVG9QcmV2aW91cy5iaW5kKHRoaXMpfT5HbyBiYWNrPC9idXR0b24+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGlzdG9yeTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlbGVjdGVkLCAuZ3JlZW4ge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmVlbjtcXG4gICAgYmFja2dyb3VuZDogcmdiKDQzLCA0MywgNDMpO1xcbn1cXG4uc2VsZWN0ZWRBc3NldHtcXG4gICAgYm9yZGVyOiAxcHggbGlnaHRncmF5IGRhc2hlZDtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIENvbXBvbmVudHMuXG5cbmltcG9ydCBWYXJpYW50IGZyb20gXCIuL1ZhcmlhbnRcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgVmFyaWFudHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IHRoaXMucHJvcHMuY29tcG9uZW50O1xuICAgICAgICB0aGlzLnN0YXRlPSB7XG4gICAgICAgICAgICB2YXJpYW50czogY29tcG9uZW50LnZhcmlhbnRzLFxuICAgICAgICAgICAgY29tcG9uZW50OiBjb21wb25lbnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZVZhcmlhbnQoZGF0YSl7XG4gICAgICAgIGxldCB2YXJpYW50cyA9IEFycmF5LmZyb20odGhpcy5zdGF0ZS52YXJpYW50cyk7XG4gICAgICAgIGxldCB2YXJpYW50VG9EZWxldGUgPSB2YXJpYW50cy5maW5kSW5kZXgodmFyaWFudD0+IHZhcmlhbnQubmFtZS5pbmNsdWRlcyhkYXRhLm5hbWUpKVxuICAgICAgICBpZih2YXJpYW50VG9EZWxldGUhPT0tMSl7XG4gICAgICAgICAgICB2YXJpYW50cy5zcGxpY2UodmFyaWFudFRvRGVsZXRlLDEpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb21wb25lbnQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuY29tcG9uZW50KSlcbiAgICAgICAgY29tcG9uZW50LnZhcmlhbnRzID0gdmFyaWFudHM7XG4gICAgICAgIHRoaXMucHJvcHMub25VcGRhdGUoY29tcG9uZW50KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgY29tcG9uZW50ID0gdGhpcy5zdGF0ZS5jb21wb25lbnQ7XG4gICAgICAgIGxldCB2YXJpYW50cyA9IHRoaXMuc3RhdGUudmFyaWFudHM7XG5cbiAgICAgICAgaWYoIGNvbXBvbmVudC5uYW1lPT1cIlwiKXtcbiAgICAgICAgICAgIHJldHVybiAoPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgdmFyaWFudHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIFZhcmlhbnRzXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPHA+Tm8gY29tcG9uZW50IHNlbGVjdGVkPC9wPjwvZGl2PilcbiAgICAgICAgfVxuICAgICAgICBpZighY29tcG9uZW50LnZhcmlhbnRzKXtcbiAgICAgICAgICAgIHJldHVybiAoPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgdmFyaWFudHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIFZhcmlhbnRzXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPHA+Tm8gdmFyaWFudHMgZm91bmQuPC9wPlxuICAgICAgICAgICAgPC9kaXY+KVxuICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhcmlhbnRzID0gdmFyaWFudHMubWFwKCh2YXJpYW50LCBpbmRleCk9PiA8VmFyaWFudCBcbiAgICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICAgICAgc3RhdGU9e3ZhcmlhbnQuc3RhdGV9XG4gICAgICAgICAgICAgICAgbmFtZT17dmFyaWFudC5uYW1lfSBcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudH0gXG4gICAgICAgICAgICAgICAgZGVsZXRlVmFyaWFudD17dGhpcy5kZWxldGVWYXJpYW50LmJpbmQodGhpcyl9Lz4pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIHZhcmlhbnRzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICBWYXJpYW50c1xuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFyaWFudHNMaXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIHt2YXJpYW50c31cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBWYXJpYW50czsiLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gQ29tcG9uZW50cy5cbmltcG9ydCBEeW5hbWljQ29tcG9uZW50IGZyb20gXCIuLi8uLi9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnRcIjtcblxuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jbGFzcyBWYXJpYW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnByb3BzLm5hbWUgfHwgXCJcIixcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnByb3BzLnN0YXRlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGVWYXJpYW50KCl7XG4gICAgICAgIGxldCB2YXJpYW50ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5wcm9wcy5kZWxldGVWYXJpYW50KHZhcmlhbnQpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHJhbmRvbUtleSA9IHRoaXMucHJvcHMuY29tcG9uZW50LmlkKih+fihNYXRoLnJhbmRvbSgpKjEwKSk7XG5cbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wcm9wcy5jb21wb25lbnQpKVxuICAgICAgICBpZiggY29tcG9uZW50Lm5hbWU9PVwiXCIpe1xuICAgICAgICAgICAgcmV0dXJuICg8ZGl2PjwvZGl2PilcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQuc3RhdGUgPSB0aGlzLnByb3BzLnN0YXRlO1xuICAgICAgICBjb25zb2xlLmxvZyhjb21wb25lbnQuc3RhdGUpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZhcmlhbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZhcmlhbnQtY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkLz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmRlbGV0ZVZhcmlhbnQuYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdHJhc2hcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgIDxEeW5hbWljQ29tcG9uZW50IGtleT17cmFuZG9tS2V5fSBjb21wb25lbnQ9e2NvbXBvbmVudH0vPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZhcmlhbnQ7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudmFyaWFudCB7XFxuICAgIGJvcmRlcjogMXB4IGRvdHRlZCBibGFjaztcXG4gICAgcGFkZGluZzoxMHB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4udmFyaWFudCAudmlldyA+IGRpdntcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIHpvb206IC4zO1xcbn1cXG5cXG5cXG4udmFyaWFudC1jb250cm9scyBpbnB1dCB7XFxuICAgIHdpZHRoOiA4MHB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi52YXJpYW50c0xpc3R7XFxuICAgIG92ZXJmbG93OiBzY3JvbGw7XFxuICAgIG1heC1oZWlnaHQ6IDg2JTtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIENlbnRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2VudGVyOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNlbnRlcntcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIEJvdHRvbSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQm90dG9tXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm90dG9tOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmJvdHRvbXtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3R0b206MHB4O1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIGFuaW1hdGlvbjogc2xpZGUtdXAgMC40cyBlYXNlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXVwIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgIH1cXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIExlZnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZnRJdGVtXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGVmdDsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5sZWZ0SXRlbXtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OjBweDtcXG4gICAgYW5pbWF0aW9uOiBzbGlkZS10by1zY3JlZW4gMC43cyBlYXNlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXRvLXNjcmVlbiB7XFxuICAgIDAlIHtcXG4gICAgICAgIGxlZnQ6LTMwMHB4O1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgbGVmdDogMHB4O1xcbiAgICB9XFxufVwiLCBcIlwiXSk7XG5cbiIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jbGFzcyBSaWdodCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2VsZWN0ZWQ6dGhpcy5wcm9wcy5zZWxlY3RlZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlU2VsZWN0ZWRUYWIoZXZlbnQpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGVkOmV2ZW50LnRhcmdldC5pbm5lclRleHRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgLyoqIFJlYWN0IGRlc2lnbiBjYW4gYmUgbWFkZSBzbGljayBpZiBpdCB0YWtlcyBjYXJlIG9mIE1hdGguUmFuZCBhbmQgdGhpcyBjb25kaXRpb25hbCBjaGVjayAqL1xuICAgICAgICAvKiogTW9yZSBvcHBvcnR1bml0eSB0byBtb3ZlIHRvd2FyZHMgc3RhdGUgZHJpdmVuIGNvbXBvbmVudCBkZXZlbG9wbWVudCAqL1xuXG4gICAgICAgIGlmKHRoaXMuc3RhdGUuc2VsZWN0ZWQhPT10aGlzLnByb3BzLnNlbGVjdGVkKXtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlJpZ2h0SXRlbSBjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbi5tYXAoY2hpbGQ9PntcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgKDxkaXYgY2xhc3NOYW1lPXtjaGlsZC5wcm9wcy50aXRsZT09PXRoaXMuc3RhdGUuc2VsZWN0ZWQ/IFwidGFicyB0aXRsZVwiOiBcInRhYnNcIn0gb25DbGljaz17dGhpcy51cGRhdGVTZWxlY3RlZFRhYi5iaW5kKHRoaXMpfT5cbiAgICAgICAgICAgICAgICAgICAge2NoaWxkLnByb3BzLnRpdGxlfVxuICAgICAgICAgICAgICAgIDwvZGl2PilcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhYi1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVuLmZpbHRlcihjaGlsZD0+Y2hpbGQucHJvcHMudGl0bGU9PT10aGlzLnN0YXRlLnNlbGVjdGVkKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSaWdodDsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5SaWdodEl0ZW17XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6MHB4O1xcbiAgICBhbmltYXRpb246IHNsaWRlLXJpZ2h0IDAuMnMgZWFzZTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgICB3aWR0aDo0MDBweDtcXG59XFxuXFxuQGtleWZyYW1lcyBzbGlkZS1yaWdodCB7XFxuICAgIDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICByaWdodDotMTAwcHg7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgICAgcmlnaHQ6IDBweDtcXG4gICAgfVxcbn1cXG5cXG4udGFiLWNvbnRlbnR7XFxuICAgIGhlaWdodDo5MSU7XFxuICAgIGJvcmRlcjogMXB4ICM0MDQwNDAgc29saWQ7XFxufVxcblxcbi50YWItY29udGVudCB1bCB7XFxuICAgIHBhZGRpbmc6IDEycHg7XFxufVxcblxcbi50YWJzIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIFxcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMXB4O1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIENvbnRleHRNZW51IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fVxuICAgIH1cblxuICAgIGNsb3NlQ29udGV4dE1lbnUoKXtcbiAgICAgICAgdGhpcy5wcm9wcy5vbk1lc3NhZ2UoXCJISURFXCIpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJDb250ZXh0TWVudVwiIHN0eWxlPXt0aGlzLnByb3BzLnBvc2l0aW9ufT5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0TWVudTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5Db250ZXh0TWVudXtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMzBweCBibGFjaztcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBwYWRkaW5nOjBweDtcXG59XFxuLmNvbnRleHRNZW51T3B0aW9ucyBsaSB7XFxuICAgIHBhZGRpbmc6IDE1cHg7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4uY29udGV4dE1lbnVPcHRpb25ze1xcbiAgICBwYWRkaW5nLWxlZnQ6MHB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQge3dyaXRlRGF0YX0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmltcG9ydCB7ZmluZFBhcmVudH0gZnJvbSBcIi4uL3V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvZmluZEZvbGRlcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUV2ZW50IChldmVudHMpIHtcbiAgICAvLyBDcmVhdGUgbmV3IHN0YXRlLlxuICAgIGxldCBuZXdFbGVtZW50cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUpLmNvbXBvbmVudHM7XG4gICAgbGV0IHNlbGVjdGVkQ29tcG9uZW50ID0gbmV3RWxlbWVudHMuZmluZChlbGVtZW50PT5lbGVtZW50Lm5hbWU9PT10aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50Lm5hbWUpXG5cbiAgICBzZWxlY3RlZENvbXBvbmVudC5ldmVudHMgPSBldmVudHM7XG5cbiAgICAvLyBTZXQgc3RhdGUgdG8gdGhlIG5ldyBzdGF0ZS5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZWxlbWVudHM6IG5ld0VsZW1lbnRzXG4gICAgfSk7XG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgbmV3RWxlbWVudHMpXG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29uZmlnKGNvbmZpZyl7XG4gICAgXG4gICAgbGV0IG5ld0VsZW1lbnRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSkuY29tcG9uZW50cztcbiAgICBcbiAgICBsZXQgcGFyZW50ID0gbmV3RWxlbWVudHMuZmluZChlbGVtZW50PT5lbGVtZW50Lm5hbWU9PT1jb25maWcucGFyZW50TmFtZSk7XG4gICAgbGV0IGNoaWxkID0gbmV3RWxlbWVudHMuZmluZChlbGVtZW50PT5lbGVtZW50Lm5hbWU9PT1jb25maWcuY2hpbGROYW1lKTtcblxuICAgIHBhcmVudC5zdGF0ZSA9IEpTT04ucGFyc2UocGFyZW50LnN0YXRlKTtcblxuICAgIGlmKHBhcmVudC5jb25maWcgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgIHBhcmVudC5jb25maWcgPSB7fTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhcmVudC5jb25maWcgPSBKU09OLnBhcnNlKHBhcmVudC5jb25maWcpO1xuICAgIH1cbiAgICBwYXJlbnQuY29uZmlnW2NoaWxkLm5hbWVdID0gY29uZmlnLmNvbmZpZztcbiAgICBpZihwYXJlbnQuY29uZmlnW2NoaWxkLm5hbWVdLm92ZXJyaWRlKSB7ICAgIFxuICAgICAgICBwYXJlbnQuc3RhdGVbY2hpbGQubmFtZV0gPSBbSlNPTi5wYXJzZShjaGlsZC5zdGF0ZSldO1xuICAgIH0gXG4gICAgZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBwYXJlbnQuc3RhdGVbY2hpbGQubmFtZV07XG4gICAgfVxuXG5cbiAgICBwYXJlbnQuc3RhdGUgPSBKU09OLnN0cmluZ2lmeShwYXJlbnQuc3RhdGUpXG4gICAgcGFyZW50LmNvbmZpZz0gSlNPTi5zdHJpbmdpZnkocGFyZW50LmNvbmZpZylcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlbGVtZW50czogbmV3RWxlbWVudHNcbiAgICB9KVxuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yXCIsIG5ld0VsZW1lbnRzKVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIGxldCBjb21wb25lbnRzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmNvbXBvbmVudHMpO1xuICAgIGxldCBuZXdFbGVtZW50O1xuICAgIFxuICAgIC8vIENoZWNrIGlmIGVsZW1lbnQgZXhpc3QuXG4gICAgbGV0IGVsZW1lbnRFeGlzdCA9IGNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09ZWxlbWVudC5uYW1lKSB8fCBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZT09PWVsZW1lbnQudHJ1ZU5hbWUpO1xuICAgIGxldCBzZWxlY3RlZENvbXBvbmVudCA9IGNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudC5uYW1lKTtcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IGNvbXBvbmVudHMuZmluZEluZGV4KGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT10aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50Lm5hbWUpO1xuICAgIGlmKGVsZW1lbnRFeGlzdCl7XG4gICAgICAgIC8vIEZpbmQgdGhlIGVsZW1lbnQuXG4gICAgICAgIGxldCBlbGVtZW50VW5kZXJFZGl0ID0gc2VsZWN0ZWRDb21wb25lbnQ7XG5cbiAgICAgICAgLy8gTWVyZ2UuXG4gICAgICAgIGVsZW1lbnRVbmRlckVkaXQgPSBPYmplY3QuYXNzaWduKGVsZW1lbnRVbmRlckVkaXQsIGVsZW1lbnQpXG5cbiAgICAgICAgLy8gUHVzaCBpdCB0byBvcmlnaW5hbCBsaXN0LlxuICAgICAgICBjb21wb25lbnRzW3NlbGVjdGVkSW5kZXhdID0gZWxlbWVudFVuZGVyRWRpdDtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgbmV3RWxlbWVudCA9IHtcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogZWxlbWVudC5tYXJrdXAsXG4gICAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgICAgc3RhdGU6IGVsZW1lbnQuc3RhdGUgfHwgXCJ7fVwiLFxuICAgICAgICAgICAgc3R5bGU6IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBpZDogTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkqMTAwMCksXG4gICAgICAgICAgICBjb25maWc6XCJ7fVwiLFxuICAgICAgICAgICAgdmFyaWFudHM6W11cbiAgICAgICAgfTtcblxuICAgICAgICBjb21wb25lbnRzLnB1c2gobmV3RWxlbWVudCk7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSBjb21wb25lbnRzLmxlbmd0aC0xO1xuXG4gICAgICAgIC8vIEZpbmQgbm9Gb2xkZXJcbiAgICAgICAgdGhpcy5zdGF0ZS5mb2xkZXJzWzBdLmNvbnRlbnRzLnB1c2goZWxlbWVudC5uYW1lKVxuICAgICAgICAvLyBQdXNoIG5ldyBjb21wb25lbnQgaW50byBjb250ZW50cy5cbiAgICB9XG4gICAgXG4gICAgaWYoZWxlbWVudC50cnVlTmFtZSE9PWVsZW1lbnQubmFtZSl7IC8vIHJlbmFtZSB0aGUgZm9sZGVyXG4gICAgICAgIC8vIEZpbmQgdGhlIGNvbnRlbnQgZnJvbSBmb2xkZXJcbiAgICAgICAgbGV0IHBhcmVudCA9IGZpbmRQYXJlbnQoIGVsZW1lbnQudHJ1ZU5hbWUsIHRoaXMuc3RhdGUuZm9sZGVyc1swXSApXG4gICAgICAgIGxldCBpbmRleCA9IHBhcmVudC5jb250ZW50cy5maW5kSW5kZXgoY29udGVudD0+Y29udGVudD09PWVsZW1lbnQudHJ1ZU5hbWUpXG4gICAgICAgIHBhcmVudC5jb250ZW50cy5zcGxpY2UoaW5kZXgsMSwgZWxlbWVudC5uYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZWxlbWVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogZWxlbWVudC5tYXJrdXAsXG4gICAgICAgICAgICBzdHlsZTogZWxlbWVudC5zdHlsZSxcbiAgICAgICAgICAgIHN0YXRlOiBlbGVtZW50LnN0YXRlLFxuICAgICAgICAgICAgZXZlbnRzOiBlbGVtZW50LmV2ZW50cyB8fCBbXVxuICAgICAgICB9LFxuICAgICAgICBzaG93RWRpdG9yOiBmYWxzZSxcbiAgICAgICAgZm9sZGVyczogdGhpcy5zdGF0ZS5mb2xkZXJzXG4gICAgfSk7XG5cblxuICAgIHdyaXRlRGF0YShcImZvbGRlcnNcIiwgdGhpcy5zdGF0ZS5mb2xkZXJzKVxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBjb21wb25lbnRzKVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZENvbXBvbmVudCAoIGNvbXBvbmVudE5hbWUsIGUpIHtcblxuICAgIC8vIEZpbmQgdGhlIGVsZW1lbnQgZnJvbSBzdGF0ZSB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbGVtZW50LlxuICAgIGxldCBzZWxlY3RlZENvbXBvbmVudCA9IHRoaXMuc3RhdGUuY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1jb21wb25lbnROYW1lKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgc3RhdGUgd2l0aCBzZWxlY3RlZEVsZW1lbnQuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkQ29tcG9uZW50XG4gICAgfSlcbn1cbiIsImltcG9ydCB7d3JpdGVEYXRhfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcbmltcG9ydCB7ZmluZEZvbGRlciwgZmluZFBhcmVudCwgZmluZFBhcmVudEZvbGRlcn0gZnJvbSBcIi4uL3V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvZmluZEZvbGRlcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uRGVsZXRlQ29tcG9uZW50KGV2ZW50KSB7XG5cbiAgICBsZXQgY29tcG9uZW50TmFtZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQubmFtZTtcbiAgICBsZXQgZm9sZGVyID0gZmluZFBhcmVudChjb21wb25lbnROYW1lLCB0aGlzLnN0YXRlLmZvbGRlcnNbMF0pXG5cbiAgICBsZXQgY29udGVudEluZGV4ID0gZm9sZGVyLmNvbnRlbnRzLmZpbmRJbmRleChjb250ZW50PT5jb250ZW50PT09Y29tcG9uZW50TmFtZSk7XG4gICAgZm9sZGVyLmNvbnRlbnRzLnNwbGljZShjb250ZW50SW5kZXgsIDEpO1xuICAgIGxldCBjb21wb25lbnRzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmNvbXBvbmVudHMpO1xuICAgIFxuICAgIGxldCBpbmRleCA9IGNvbXBvbmVudHMuZmluZEluZGV4KGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1jb21wb25lbnROYW1lKVxuXG4gICAgY29tcG9uZW50cy5zcGxpY2UoaW5kZXgsMSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgZm9sZGVyczogdGhpcy5zdGF0ZS5mb2xkZXJzXG4gICAgfSlcblxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBjb21wb25lbnRzKTtcbiAgICB3cml0ZURhdGEoXCJmb2xkZXJzXCIsIHRoaXMuc3RhdGUuZm9sZGVycyk7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uRXh0ZW5kQ29tcG9uZW50KCl7XG5cbiAgICBsZXQgY29tcG9uZW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50KSlcbiAgICBsZXQgZm9sZGVyID0gZmluZFBhcmVudChjb21wb25lbnQubmFtZSwgdGhpcy5zdGF0ZS5mb2xkZXJzWzBdKTtcblxuICAgIGNvbXBvbmVudC5uYW1lPSBjb21wb25lbnQubmFtZStcIl9jb3B5XCI7XG5cbiAgICBmb2xkZXIuY29udGVudHMucHVzaChjb21wb25lbnQubmFtZSk7XG4gICAgXG4gICAgY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGZvbGRlcnM6IHRoaXMuc3RhdGUuZm9sZGVyc1xuICAgIH0pXG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgY29tcG9uZW50cyk7XG4gICAgd3JpdGVEYXRhKFwiZm9sZGVyc1wiLCB0aGlzLnN0YXRlLmZvbGRlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25EZWxldGVGb2xkZXIoVFlQRSwgZm9sZGVyTmFtZSl7XG5cblxuICAgIGxldCBmb2xkZXJzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmZvbGRlcnMpXG4gICAgbGV0IG5vRm9sZGVyID0gZm9sZGVyc1swXTtcblxuICAgIC8qKiBEZWxldGUgdGhlIGZvbGRlci4gV2hpbGUgZGVsZXRpbmcgb25seSB0aGUgZm9sZGVyLCBtb3ZlIGl0cyBjb250ZW50cyB0byBwYXJlbnQgZm9sZGVyICovXG5cbiAgICBsZXQgcGFyZW50Rm9sZGVyID0gZmluZFBhcmVudEZvbGRlcihmb2xkZXJOYW1lLCBmb2xkZXJzWzBdKVxuXG4gICAgbGV0IGZvbGRlclRvRGVsZXRlID0gZmluZEZvbGRlcihmb2xkZXJOYW1lLCBmb2xkZXJzWzBdKVxuXG4gICAgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgIGNhc2UgXCJGT0xERVJfUkVUQUlOX0NPTlRFTlRTXCI6XG4gICAgICAgICAgICBub0ZvbGRlci5jb250ZW50cy5wdXNoKC4uLmZvbGRlclRvRGVsZXRlLmNvbnRlbnRzKTtcbiAgICAgICAgICAgIGxldCBkZWxldGVJbmRleCA9IHBhcmVudEZvbGRlci5jb250ZW50cy5maW5kSW5kZXgoY29udGVudD0+dHlwZW9mIGNvbnRlbnQgPT09IFwib2JqZWN0XCIgJiYgY29udGVudC5uYW1lID09PSBmb2xkZXJOYW1lKVxuICAgICAgICAgICAgcGFyZW50Rm9sZGVyLmNvbnRlbnRzLnNwbGljZShkZWxldGVJbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvbGRlcnMoZm9sZGVycyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGNhc2UgXCJGT0xERVJfQU5EX0NPTlRFTlRTXCI6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiRU5USVJFX0ZPTERFUlwiOlxuXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59IiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG4vLyBEZXBlbmRlbmNpZXMuXG5pbXBvcnQgXCIuL0luZGV4L2luZGV4LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzLlxuXG5pbXBvcnQgQ29tcG9uZW50cyBmcm9tIFwiLi9Db21wb25lbnRzXCI7XG5pbXBvcnQgRWRpdG9yIGZyb20gXCIuL0VkaXRvclwiO1xuaW1wb3J0IEV2ZW50cyBmcm9tIFwiLi9FdmVudHNcIjtcbmltcG9ydCBQcmV2aWV3IGZyb20gXCIuL1ByZXZpZXdcIjtcbmltcG9ydCBBc3NldHMgZnJvbSBcIi4vQXNzZXRzXCI7XG5pbXBvcnQgRXhwb3J0IGZyb20gXCIuL0V4cG9ydFwiO1xuaW1wb3J0IEhpc3RvcnkgZnJvbSBcIi4vSGlzdG9yeVwiO1xuaW1wb3J0IFZhcmlhbnRzIGZyb20gXCIuL1ZhcmlhbnRzXCI7XG5cbi8vIEJlaGF2aW91ciBjb21wb25lbnRzLlxuXG5pbXBvcnQgQ2VudGVyIGZyb20gXCIuL1V0aWxpdGllcy9Db21wb25lbnRzL0NlbnRlclwiO1xuaW1wb3J0IEJvdHRvbSBmcm9tIFwiLi9VdGlsaXRpZXMvQ29tcG9uZW50cy9Cb3R0b21cIjtcbmltcG9ydCBMZWZ0IGZyb20gXCIuL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnRcIjtcbmltcG9ydCBSaWdodCBmcm9tIFwiLi9VdGlsaXRpZXMvQ29tcG9uZW50cy9SaWdodFwiO1xuXG4vLyBVdGlsaXR5IGNvbXBvbmVudHMuXG5cbmltcG9ydCBDb250ZXh0TWVudSBmcm9tIFwiLi91dGlsaXRpZXMvQ29tcG9uZW50cy9Db250ZXh0TWVudVwiO1xuXG4vLyBSZWR1Y2Vycy5cbmltcG9ydCB7IHVwZGF0ZUV2ZW50LCB1cGRhdGVDb25maWcsIHNhdmVFbGVtZW50LCB1cGRhdGVTZWxlY3RlZENvbXBvbmVudCB9IGZyb20gXCIuL0luZGV4L1JlZHVjZXJcIjtcblxuLy8gVXRpbHNcbmltcG9ydCB7IHJlYWREYXRhLCB3cml0ZURhdGEgfSBmcm9tIFwiLi91dGlsaXRpZXMvU3RvcmFnZVwiO1xuaW1wb3J0IHtvbkRlbGV0ZUNvbXBvbmVudCwgb25EZWxldGVGb2xkZXIsIG9uRXh0ZW5kQ29tcG9uZW50fSBmcm9tIFwiLi9Db21wb25lbnRzL0V2ZW50c1wiO1xuXG5jbGFzcyBJbmRleCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICBsZXQgY29tcG9uZW50cyA9IHJlYWREYXRhKFwidWktZWRpdG9yXCIpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgICAgIHNlbGVjdGVkVGFnOiBcIlwiLFxuICAgICAgICAgICAgY29tcG9uZW50OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICBtYXJrdXA6IFwiXCIsXG4gICAgICAgICAgICAgICAgc3R5bGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgc3RhdGU6IFwieyB9XCIsXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbGVjdGVkQ29tcG9uZW50OiBcIlwiLFxuICAgICAgICAgICAgZm9sZGVyczogcmVhZERhdGEoXCJmb2xkZXJzXCIpLFxuICAgICAgICAgICAgc2hvd0VkaXRvcjogZmFsc2UsXG4gICAgICAgICAgICBzZWxlY3RlZFRhYjogXCJFdmVudHNcIlxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlQ29uZmlnID0gdXBkYXRlQ29uZmlnLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlRXZlbnQgPSB1cGRhdGVFdmVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNhdmVFbGVtZW50ID0gc2F2ZUVsZW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZENvbXBvbmVudCA9IHVwZGF0ZVNlbGVjdGVkQ29tcG9uZW50LmJpbmQodGhpcyk7XG4gICAgICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IGZ1bmN0aW9uIGtleWRvd24oZSl7XG4gICAgICAgICAgICBpZihlLmFsdEtleSAmJiBlLmtleUNvZGU9PTY5KSB7IC8vIEFsdCArIEVcbiAgICAgICAgICAgICAgICAvLyBPcGVuL2Nsb3NlIGVkaXRvciBpZiBhbnkgY29tcG9uZW50IGlzIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHNob3dFZGl0b3I6ICF0aGlzLnN0YXRlLnNob3dFZGl0b3JcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZS5hbHRLZXkgJiYgZS5rZXlDb2RlPT04Mil7IC8vIEFsdCArIFJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3BlblJpZ2h0OiAhdGhpcy5zdGF0ZS5vcGVuUmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFiOiBcIkV2ZW50c1wiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoZS5hbHRLZXkgJiYgZS5rZXlDb2RlPT04Nil7IC8vIEFsdCArIFZcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3BlblJpZ2h0OiAhdGhpcy5zdGF0ZS5vcGVuUmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFiOiBcIlZhcmlhbnRzXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcyk7XG5cbiAgICB9XG5cbiAgICB1cGRhdGVQcmV2aWV3KGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwcmV2aWV3Q29tcG9uZW50OiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUZvbGRlcnMoZm9sZGVycykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvbGRlcnM6IGZvbGRlcnNcbiAgICAgICAgfSlcbiAgICAgICAgd3JpdGVEYXRhKFwiZm9sZGVyc1wiLCBmb2xkZXJzKVxuICAgIH1cblxuICAgIG9wZW5FZGl0b3IoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd0VkaXRvcjogdHJ1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIG9wZW5FeHBvcnRUYWIoZSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRUYWI6IFwiRXhwb3J0XCJcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBvblNob3dDb250ZXh0TWVudShlKXtcbiAgICAgICAgXG4gICAgICAgIGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImNvbXBvbmVudFwiKSB8fCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjb21wb25lbnROYW1lXCIpKSB7IC8vIGNoZWNrIGlmIGl0IGlzIGEgY29tcG9uZW50LlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0TWVudUNoaWxkcmVuID0gPHVsIGNsYXNzTmFtZT1cImNvbnRleHRNZW51T3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxsaSBvbkNsaWNrPXtvbkRlbGV0ZUNvbXBvbmVudC5iaW5kKHRoaXMpfT5EZWxldGUgQ29tcG9uZW50PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17dGhpcy5vcGVuRXhwb3J0VGFiLmJpbmQodGhpcyl9PkV4cG9ydCBDb21wb25lbnQ8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBvbkNsaWNrPXtvbkV4dGVuZENvbXBvbmVudC5iaW5kKHRoaXMpfT5FeHRlbmQgQ29tcG9uZW50PC9saT5cbiAgICAgICAgICAgIDwvdWw+O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmEtZm9sZGVyLW9wZW5cIikgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmEtZm9sZGVyXCIpKSB7Ly8gY2hlY2sgaWYgaXQgaXMgYSBmb2xkZXIuXG4gICAgICAgICAgICBsZXQgZm9sZGVyTmFtZSA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2xkZXItbmFtZVwiKTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0TWVudUNoaWxkcmVuID0gIDx1bCBjbGFzc05hbWU9XCJjb250ZXh0TWVudU9wdGlvbnNcIj5cbiAgICAgICAgICAgIDxsaSBvbkNsaWNrPXtvbkRlbGV0ZUZvbGRlci5iaW5kKHRoaXMsIFwiRk9MREVSX1JFVEFJTl9DT05URU5UU1wiLCBmb2xkZXJOYW1lKX0+RGVsZXRlIGZvbGRlciBhbmQgcmV0YWluIGNvbnRlbnRzPC9saT5cbiAgICAgICAgICAgIDxsaSBvbkNsaWNrPXtvbkRlbGV0ZUZvbGRlci5iaW5kKHRoaXMsIFwiUkVUQUlOX0ZPTERFUl9ERUxFVEVfQ09OVEVOVFNcIixmb2xkZXJOYW1lKX0+S2VlcCBGb2xkZXIgYW5kIGRlbGV0ZSBjb250ZW50czwvbGk+XG4gICAgICAgICAgICA8bGkgb25DbGljaz17b25EZWxldGVGb2xkZXIuYmluZCh0aGlzLCBcIkVOVElSRV9GT0xERVJcIixmb2xkZXJOYW1lKX0+RGVsZXRlIEZvbGRlciBhbmQgY29udGVudHM8L2xpPlxuICAgICAgICAgICAgPGxpIG9uQ2xpY2s9e3RoaXMub3BlbkV4cG9ydFRhYi5iaW5kKHRoaXMpfT5FeHBvcnQgRm9sZGVyPC9saT5cbiAgICAgICAgPC91bD47XG5cbiAgICAgICAgfVxuICAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd0NvbnRleHRNZW51OnRydWUsXG4gICAgICAgICAgICBjb250ZXh0TWVudVBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgdG9wOiBgJHtlLmNsaWVudFl9cHhgLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGAke2UuY2xpZW50WH1weGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaGlkZUNvbnRleHRNZW51KCl7XG4gICAgICAgIGlmKHRoaXMuc3RhdGUuc2hvd0NvbnRleHRNZW51KXtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNob3dDb250ZXh0TWVudTogZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNvbnRleHRNZW51TWVzc2FnZShtZXNzYWdlKXtcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBjYXNlIFwiSElERVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzaG93Q29udGV4dE1lbnU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAgICBcblxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ29tcG9uZW50ID0gdGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCB8fCB0aGlzLnN0YXRlLmNvbXBvbmVudDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgb25Db250ZXh0TWVudT17dGhpcy5vblNob3dDb250ZXh0TWVudS5iaW5kKHRoaXMpfSBvbkNsaWNrPXt0aGlzLmhpZGVDb250ZXh0TWVudS5iaW5kKHRoaXMpfT5cbiAgICAgICAgICAgICAgICA8TGVmdD5cbiAgICAgICAgICAgICAgICAgICAgPENvbXBvbmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHM9e3RoaXMuc3RhdGUuY29tcG9uZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGRlcnM9e3RoaXMuc3RhdGUuZm9sZGVyc31cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ29tcG9uZW50PXt0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDb21wb25lbnRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb250cm9scz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cblxuICAgICAgICAgICAgICAgICAgICAgICAgb25PcGVuRWRpdG9yPXt0aGlzLm9wZW5FZGl0b3IuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uPXt0aGlzLnVwZGF0ZVNlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Gb2xkZXJzVXBkYXRlPXt0aGlzLnVwZGF0ZUZvbGRlcnMuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0xlZnQ+XG4gICAgICAgICAgICAgICAgPENlbnRlcj5cbiAgICAgICAgICAgICAgICAgICAgPFByZXZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlByZXZpZXdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25TYXZlPXt0aGlzLnNhdmVFbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDwvUHJldmlldz5cbiAgICAgICAgICAgICAgICA8L0NlbnRlcj5cblxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50ICAmJiB0aGlzLnN0YXRlLm9wZW5SaWdodCA/XG4gICAgICAgICAgICAgICAgICAgIDxSaWdodCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXt0aGlzLnN0YXRlLnNlbGVjdGVkVGFifT5cbiAgICAgICAgICAgICAgICAgICAgICAgICA8RXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWc9e3RoaXMuc3RhdGUuc2VsZWN0ZWRUYWd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cz17dGhpcy5zdGF0ZS5jb21wb25lbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXZlbnRzVXBkYXRlPXt0aGlzLnVwZGF0ZUV2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29uZmlnVXBkYXRlPXt0aGlzLnVwZGF0ZUNvbmZpZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkV2ZW50c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEhpc3RvcnkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJIaXN0b3J5XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFzc2V0cyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkFzc2V0c1wiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFeHBvcnQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJFeHBvcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxWYXJpYW50cyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlZhcmlhbnRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXtzZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZT0ge3NhdmVFbGVtZW50LmJpbmQodGhpcyl9Lz5cbiAgICAgICAgICAgICAgICAgICAgPC9SaWdodD5cbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICBudWxsfVxuXG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvd0VkaXRvciA/XG4gICAgICAgICAgICAgICAgICAgIDxCb3R0b20+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RWRpdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ9e3NlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e3NlbGVjdGVkQ29tcG9uZW50Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya3VwPXtzZWxlY3RlZENvbXBvbmVudC5tYXJrdXB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3NlbGVjdGVkQ29tcG9uZW50LnN0eWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlPXtzZWxlY3RlZENvbXBvbmVudC5zdGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkVkaXRvclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TYXZlPXt0aGlzLnNhdmVFbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3R0b20+XG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCA/XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm90dG9tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzaG93RWRpdG9yXCJvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc2hvd0VkaXRvcjogdHJ1ZSB9KX0+T3BlbiBFZGl0b3I8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NlbnRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm90dG9tPlxuICAgICAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zaG93Q29udGV4dE1lbnU/PENvbnRleHRNZW51IGNoaWxkcmVuPXt0aGlzLnN0YXRlLmNvbnRleHRNZW51Q2hpbGRyZW59IHBvc2l0aW9uPXt0aGlzLnN0YXRlLmNvbnRleHRNZW51UG9zaXRpb259IG9uTWVzc2FnZT17dGhpcy5vbkNvbnRleHRNZW51TWVzc2FnZS5iaW5kKHRoaXMpfS8+Om51bGx9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5jb25zb2xlLmxvZyhcIlNvdXJjZSBjb2RlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbXZldHJpL3VpLWVkaXRvclwiKVxuUmVhY3RET00ucmVuZGVyKDxJbmRleCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbmRleFwiKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==