(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,,function(e,t,n){"use strict";var o=n(39);e.exports={readData:o.readData,writeData:o.writeData,readComponent:o.readComponent,writeComponent:o.writeComponent,popHistory:o.popHistory}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.saveComponentsToWindow=function(e){e.forEach(function(e){e.state,function(e){(function(e,t){if(window.assets)for(;e.includes("$assets");){var n=e.split("['")[1].split("]")[0].split("");n.pop(),n=n.join(""),e=e.replace("$assets['"+n+"']","url("+window.assets[n]+")")}[].concat(a(document.querySelectorAll("[data-component-name='"+t+"']"))).forEach(function(e){e.remove()});var o=document.createElement("style");o.setAttribute("data-component-name",t),o.type="text/css",o.innerHTML=e,document.body.appendChild(o)})(e.style,e.name),window[e.name]=(0,o.createComponent)(e)}(e)})},t.getChildren=function(e){var t=(0,r.readData)("ui-editor");if(i(e.markup)){return t.filter(function(t){return e.markup.includes(t.name)}).map(function(e){return e.name})}return[]},t.getNestedComponents=function e(t){var n=(0,r.readData)("ui-editor");var o=[t];if(i(t.markup)){var s=n.filter(function(e){return t.markup.includes(e.name)}),l=s.map(e).flat(3);o.push.apply(o,a(l))}return o.filter(function(e){return e&&e.markup})};var o=n(38),r=n(3);n(41);function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e){return(0,r.readData)("ui-editor").filter(function(t){return e.includes(t.name)}).length>0}window.saveVariant=function(e,t){var n=(0,r.readData)("ui-editor"),o=n.find(function(t){return t.name.includes(e)}),a=JSON.parse(o.state);void 0!==a.variant&&void 0!==t.variant||console.error("Add a variant property with a text value"),o.variants=o.variants||[{name:a.variant,state:a}],o.variants.find(function(e){return e.name===t.variant})||o.variants.push({name:t.variant,state:t}),(0,r.writeData)("ui-editor",n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=(n(37),n(4));n(42);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"dragOverHandler",value:function(e){e.currentTarget.querySelector(".content")||e.target.classList.add("hintNoDrop"),e.target.classList.contains("content")&&(e.target.classList.add("hintDragOver"),e.target.children.length>1&&console.log("YES")),e.stopPropagation(),e.preventDefault()}},{key:"dropComponent",value:function(e){var t=e.dataTransfer.getData("component-name"),n=this.state.component,o="<"+t+"></"+t+">";n.markup=n.markup.replace('content">','content">'+o),this.props.onSave(n)}},{key:"render",value:function(){if(void 0===this.state.component.name)return i.default.createElement("p",null,"No component selected.");var e=(0,s.getNestedComponents)(this.state.component);return e.length>0&&(0,s.saveComponentsToWindow)(e),window[this.state.component.name]?i.default.createElement("div",{onDragOver:this.dragOverHandler.bind(this),onDrop:this.dropComponent.bind(this)},i.default.createElement(window[this.state.component.name])):i.default.createElement("div",null)}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReact=function(e){e.events.forEach(function(e){e.id=e.id.replace("-","")});var t=function(e){return e.markup.replace(">"," {...this.props}>{this.props.children}")}(e),n=function(t){var n=JSON.parse(e.config);return Object.keys(n).forEach(function(e){if(n[e].override){var o="<"+e+"></"+e+">",r="{this.state."+e+".map((item,i)=>"+("<"+e+" state={item} key={i}></"+e+">")+")}";t=t.replace(o,r)}}),t}(t),o=function(e,t){return t.forEach(function(t){var n='id="'+t.id+'"';e=e.includes(n)?e.replace(n,n+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}"):e.replace("<"+t.id,"<"+t.id+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}")}),e.split("{state.").join("{this.state.")}(n,e.events),r=function(){if(window.saveVariant)return'window.saveVariant("'+e.name+'",state)'}();return"(\nclass "+e.name+" extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.props.state || "+e.state+";\n\n        var dynamicStyle = document.createElement('style');\n        dynamicStyle.type = 'text/css';\n        dynamicStyle.innerHTML = `"+e.style+"`;\n        document.body.appendChild(dynamicStyle)\n    }\n\n    "+e.events.map(function(e){return e.publishable?"\n            \n    "+(e.id+e.name)+" (e) {\n        var state = JSON.parse(JSON.stringify(this.state))\n        "+e.reducer+"\n        debugger;\n        this.setState(state);\n        e.state = state;\n        this.props."+e.publishName+"? this.props."+e.publishName+"(e):null;\n    }":"\n    "+(e.id+e.name)+" (e) {\n        var state = JSON.parse(JSON.stringify(this.state))\n        "+e.reducer+"\n        debugger;\n        "+r+"\n        this.setState(state);\n    }\n"}).join("\n")+"\n\n    render() {\n        return ("+o+")\n    }\n})\n"}},,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.findParent=function e(t,n){var r=n.contents;for(var i=0;i<r.length;i++){var s=r[i];t===s&&(a=n),"object"===(void 0===s?"undefined":o(s))&&e(t,s)}return a},t.findParentFolder=function e(t,n){var r=n.contents;for(var a=0;a<r.length;a++){var s=r[a];"object"===(void 0===s?"undefined":o(s))&&(s.name===t&&(i=n),e(t,s))}return i},t.findFolder=function e(t,n){if("string"==typeof n)return!1;if("object"===(void 0===n?"undefined":o(n))){n.name===t&&(r=n);for(var a=n.contents,i=0;i<a.length;i++){var s=a[i];e(t,s)}}return r};var r="",a="",i=""},,,,,,,function(e,t,n){var o=n(17);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,'body {\n    position:relative;\n    color: #d9d9d9;\n    font-family: "Nunito Sans",-apple-system,".SFNSText-Regular","San Francisco",BlinkMacSystemFont,"Segoe UI","Helvetica Neue",Helvetica,Arial,sans-serif;\n    margin: 0px;\n}\n\nli , label, p, .rules , input, textarea{\n    font-size: 9px;\n}\n\ninput, textarea { \n    background: #2b2b2b;\n    color: #d9d9d9;\n    opacity: 0.75;\n    vertical-align: bottom;\n}\n\ninput[type="text"] {\n    -webkit-appearance: textarea;\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\nul label input {\n    width: 10px;\n}\n\nul, li {\n    padding-left: 5px;\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\nbutton {\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 5px;\n    background-color: #343a40;\n    margin-left: 4px;\n}\n\nbutton i{\n    padding-right:4px;\n}\n\nbutton:hover {\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\nul,li, ul label {\n    color: rgba(255,255,255,0.5);\n}\n\nul label:hover, li:hover, .content:hover{\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\n#index{\n    margin:-4px;\n}\n\n.CodeMirror {\n    border: 1px solid black;\n    margin-top:5px;\n}',""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r);n(20);var i=s(n(22));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders,showControls:n.props.showControls},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"addFolder",value:function(){var e=Array.from(this.state.folders);e.unshift({type:"NewFolder",name:"",contents:[],status:"closed"}),this.setState({folders:e})}},{key:"addComponent",value:function(){this.props.onOpenEditor()}},{key:"render",value:function(){var e=this.props,t=this.state;return a.default.createElement("div",{className:"container elements-tab"},a.default.createElement("div",{className:"title"},"Components"),a.default.createElement("div",{className:"Controls"},a.default.createElement("button",{onClick:this.addComponent.bind(this)},a.default.createElement("i",{className:"fa fa-edit"}),e.selectedComponent?"Edit":"Add"),a.default.createElement("button",{onClick:this.addFolder.bind(this)},a.default.createElement("i",{className:"fa fa-folder"}),"Folder")),a.default.createElement("div",{className:"folders"},a.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),components:t.components,folders:t.folders,selectedComponent:e.selectedComponent,onFoldersUpdate:e.onFoldersUpdate,onSelection:e.onSelection})))}}]),t}();t.default=l},function(e,t,n){var o=n(21);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".override {\n    line-height: 0%;\n}\n\ntextarea {\n    height: 70px;\n    width: 450px;\n}\n\n.title{\n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    background: rgb(64, 64, 64);\n    padding: 5px;\n    font-size: 12px;\n}\n\n.elements-tab {\n    left:0px;\n    height: 100vh;\n    width:190px;;\n}\n\n.folders{\n    overflow: scroll;  \n    height:85vh;\n}\n\n.Controls{\n    display: inline-block;\n    opacity: 1;\n    transition: opacity .2s ease-in;\n}\n\n.hideControls{\n    opacity: 0;\n    transition: opacity .5s ease-in-out;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=((o=i)&&o.__esModule,n(9));n(23);var l=n(25);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"removeFolderFromParent",value:function(e,t,n){var o=(0,s.findFolder)(t,e[0]),a=o.contents.findIndex(function(e){return"object"===(void 0===e?"undefined":r(e))&&e.name===n});a>-1&&o.contents.splice(a,1)}},{key:"removeContentFromParent",value:function(e,t,n){var o=(0,s.findFolder)(t,e[0]),r=o.contents.findIndex(function(e){return e===n});-1!==r&&o.contents.splice(r,1)}},{key:"onFolderUpdate",value:function(e,t,n,o){var r=Array.from(this.state.folders),a=e.name,i=(0,s.findFolder)(a,r[0]);if("NEWFOLDER"==t){var l=r.findIndex(function(e){return"NewFolder"===e.type});-1!==l&&r.splice(l,1),r[0].contents.unshift(e)}"COMPONENT"==t?(i.contents=e.contents,this.removeContentFromParent(r,n,o)):"FOLDER"==t&&(i.contents=e.contents,this.removeFolderFromParent(r,n,o,a)),this.props.onFoldersUpdate(r)}},{key:"onFolderStatusChanged",value:function(e){(0,s.findFolder)(e.name,this.state.folders[0]).status=e.status,this.props.onFoldersUpdate(this.state.folders)}},{key:"render",value:function(){return(0,l.folderStructure)(this.props,this.onFolderUpdate.bind(this),this.onFolderStatusChanged.bind(this))}}]),t}();t.default=u},function(e,t,n){var o=n(24);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.folderStructure=function(e,t,n){var o=e.folders;return p(e,t,n),o.map(f)};var o=a(n(26)),r=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}var i=void 0,s=void 0,l=void 0,u=void 0,c=void 0,d=void 0;function p(e,t,n){c=e.folders,i=e.selectedComponent,s=e.onSelection,u=e.components,l=t,d=n}function f(e,t){var n=e.contents;return React.createElement(o.default,{key:t,folder:e,folders:c,contents:n.map(m),onFolderStatusChanged:d,onFolderUpdate:l})}function m(e,t){if("string"==typeof e)return React.createElement(r.default,{key:t,component:u.find(function(t){return t.name===e}),selectedComponent:i,onSelectionChange:s});var n=e;return React.createElement(o.default,{key:t,folder:n,folders:c,contents:n.contents.map(m),onFolderStatusChanged:d,onFolderUpdate:l})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=u(r);n(27);var i=u(n(29)),s=n(32),l=n(33);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={iconStatus:"fa fa-folder",folderClass:"newFolder",name:n.props.folder.name,contents:n.props.folder.contents,type:n.props.folder.type,status:n.props.folder.status},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"newFolder",value:function(e){this.props.onFolderUpdate(e,"NEWFOLDER")}},{key:"render",value:function(){var e=this.props.folder,t=this.props.contents,n="open"===this.state.status?"fa fa-folder-open":"fa fa-folder";return"NewFolder"==e.type?a.default.createElement(i.default,{onNewFolder:this.newFolder.bind(this)}):"folder"==e.type?a.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},a.default.createElement("i",{className:n,onClick:s.toggleFolder.bind(this)}),a.default.createElement("input",{type:"text",className:"folder",placeholder:"Enter folder name",readOnly:!0,value:this.state.name}),"open"===this.state.status?t:null):"noFolder"==e.type?a.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},t):void 0}}]),t}();t.default=c},function(e,t,n){var o=n(28);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"input.folder{\n    border:none;\n    background:none;\n    padding-bottom: 13px;\n    width: 155px;\n}\n\n.newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(30);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:"fa fa-folder",newFolderClass:"newFolder",folderName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"folderNameChanged",value:function(e){this.setState({folderName:e.currentTarget.value})}},{key:"saveFolderNameOnEnter",value:function(e){"Enter"===e.key&&this.props.onNewFolder({name:this.state.folderName,contents:[],type:"folder",status:"closed"})}},{key:"render",value:function(){return i.default.createElement("div",{className:this.state.newFolderClass},i.default.createElement("i",{className:this.state.status}),i.default.createElement("input",{type:"text",className:"folder",autoFocus:!0,placeholder:"Enter folder name",value:this.state.folderName,onChange:this.folderNameChanged.bind(this),onKeyPress:this.saveFolderNameOnEnter.bind(this)}))}}]),t}();t.default=s},function(e,t,n){var o=n(31);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: green;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleFolder=function(){"closed"===this.state.status?function(){var e=JSON.parse(JSON.stringify(this.state));e.status="open",this.props.onFolderStatusChanged(e)}.call(this):function(){var e=JSON.parse(JSON.stringify(this.state));e.status="closed",this.props.onFolderStatusChanged(e)}.call(this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){e.preventDefault();var t=e.dataTransfer.getData("component-name"),n=e.dataTransfer.getData("folder-name"),r=e.dataTransfer.getData("parent-folder-name"),a=this.state.name;if(r===a)return void this.setState({folderClass:"newFolder",status:"closed"});if(""===t){if("null"==n||""==n)return void console.error("Folder cannot be empty");(function(e,t){var n=Array.from(this.state.contents),r=(0,o.findFolder)(e,this.props.folders[0]);n.push(r),e&&e!==this.state.name&&this.props.onFolderUpdate({name:this.state.name,contents:n,type:"folder",status:"open"},"FOLDER",t,e)}).call(this,n,r)}else(function(e,t){var n=Array.from(this.state.contents);n.push(e),this.props.onFolderUpdate({name:this.state.name,contents:n,type:"folder",status:"open"},"COMPONENT",t,e)}).call(this,t,r);console.log("Drop from folder"),e.stopPropagation()},t.dragOverHandler=function(e){e.preventDefault(),this.setState({folderClass:"newFolder dragOver",status:"open"})},t.dragLeaveHandler=function(e){this.setState({folderClass:"newFolder",status:"closed"})},t.folderStartDrag=function(e){var t=event.target.getAttribute("data-folder-name"),n=event.target.parentElement.getAttribute("data-folder-name");e.dataTransfer.setData("folder-name",t),e.dataTransfer.setData("parent-folder-name",n),console.log("Folder "+t+" draged with parent "+n)};var o=n(9)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=l(r),i=n(35),s=l(n(36));function l(e){return e&&e.__esModule?e:{default:e}}n(46);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selectedComponent:n.props.selectedComponent},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"addComponentDetails",value:function(e){var t=event.target.getAttribute("data-name");e.target.querySelector(".thumbnail").classList.remove("hidden"),e.target.querySelector(".componentName").classList.add("hidden"),console.log("SETTING DATA"),e.dataTransfer.setData("component-name",t),e.dataTransfer.setData("parent-folder-name",e.currentTarget.parentElement.getAttribute("data-folder-name")),console.log(e.dataTransfer.getData("component-name")),e.stopPropagation()}},{key:"render",value:function(){var e=this.props,t=e.selectedComponent,n=e.component;return a.default.createElement("li",{className:t&&e.component.name===t.name?"selected component background":"component background",onClick:i.selectionChanged.bind(this,n.name),onContextMenu:i.selectionChanged.bind(this,n.name),index:e.index,draggable:"true","data-name":n.name,onDragStart:this.addComponentDetails.bind(this)},a.default.createElement("span",{className:"componentName "},n.name),a.default.createElement("span",{className:"hidden thumbnail"},a.default.createElement(s.default,{component:n})))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectionChanged=function(e,t){this.props.onSelectionChange(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r),i=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}n(44);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.name||"",state:n.props.state},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=JSON.parse(JSON.stringify(this.props.component));return""==e.name?a.default.createElement("div",null):a.default.createElement("div",{className:"thumbnailView"},a.default.createElement(i.default,{component:e}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.insertDirection=function(e,t){o=o||e,r=r||t,++i===a&&(console.log(o,e),i=0,r=t,o=e)};var o=void 0,r=void 0,a=50,i=0},function(module,exports,__webpack_require__){"use strict";var _React=__webpack_require__(6);function createComponent(component){var componentString=(0,_React.convertToReact)(component);return eval(Babel.transform(componentString,{presets:["react"],plugins:["transform-es2015-classes"]}).code)}module.exports={createComponent:createComponent}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readData=r,t.writeData=a,t.readComponent=function(e){var t=r("ui-editor");if(!t)return;return t.find(function(t){return t.name===e})},t.writeComponent=function(e){if(!Array.isArray(e)&&e.name){var t=r("ui-editor"),n=t.findIndex(function(t){return t.name===e.name});t[n]=e,a("ui-editor",t)}},t.popHistory=function(){var e=r("ui-editor-history");if(!e)return;var t=e.pop();if(!e)return;a("ui-editor-history",e,!0),a("ui-editor",t,!0)};var o=n(40);function r(e){if("ui-editor"===e)return window.components||(window.components=JSON.parse(localStorage.getItem(e))||o.sample),JSON.parse(JSON.stringify(window.components));if("ui-editor-history"===e){var t=localStorage.getItem(e);if(t)return JSON.parse(t)}if("folders"===e){var n=JSON.parse(localStorage.getItem(e));return null===n?[{type:"noFolder",contents:[{name:"Templates",contents:["Page"],type:"folder",status:"closed"},{name:"Components",contents:["Modal","ResetPasswordModal","ForgotPassword","LayoutComponent","ProductComponent"],type:"folder",status:"closed"},{name:"Elements",contents:["EmailInput","TermsAndService","SubmitButton","CancelButton","PrivacyAndPolicy","ResetPasswordForm","Form"],type:"folder",status:"closed"}],name:"noFolder",status:"open"}]:n}return[]}function a(e,t,n){"folders"==e&&localStorage.setItem(e,JSON.stringify(t)),"ui-editor"==e&&(console.log("WRITE"),window.components=t,localStorage.setItem(e,JSON.stringify(t)),n||function(e){window.editorHistory=r("ui-editor-history"),editorHistory.push(e),localStorage.setItem("ui-editor-history",JSON.stringify(editorHistory))}(t))}},function(e,t,n){"use strict";e.exports={sample:[{name:"ForgotPassword",markup:'<div className="vsButton"><button id="f123">{state.buttonText}</button></div>',events:[{name:"onClick",reducer:"state.show",publishable:!0,publishName:"onPasswordForgotten",id:"f123"}],state:'{"buttonText":"Forgot Password"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"Modal",markup:'<div class="modal">\n<header>\n  <h3>Forgot Password</h3>\n    <button className="closeButton" id="x">x</button>\n</header>\n<section class="content">\n</section>\n<footer>footer</footer>\n</div>',events:[{name:"onClick",reducer:'state.name="";',publishable:!0,publishName:"onCloseModal",id:"x"}],state:'{"variant":"initial"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}",variants:[]},{name:"CancelButton",markup:'<div className="vsButton"><button>{state.cancelButton}</button></div>',events:[],state:'{"cancelButton":"Cancel"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"SubmitButton",markup:'<div className="vsButton"><button>{state.submitButton}</button></div>',events:[],state:'{"submitButton":"Submit"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"PrivacyAndPolicy",markup:'<div class="privacyPolicy">\n\t{state.content}\n</div>',events:[],state:'{\n\t"content":"Please enter the email address you used to create your account and we will send you a link to reset your password. See Privacy Policy"\n}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}",variants:[]},{name:"TermsAndService",markup:'<div class="privacyPolicy">\n{state.variant}\n</div>',events:[],state:'{"variant":"This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply."}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}",variants:[]},{name:"Form",markup:'<form className="vsfrm">\n</form>',events:[],state:"{}",style:".vsfrm{\nheight:400px;\nwidth:400px;\n}",config:"{}",variants:[]},{name:"EmailInput",markup:'<span className={state.variant+" emailInput"}>\n\t\n    <input id="input" className="email" type="email" \tvalue={state.email} />SOME\n\t\n    <label>{state.placeholder}</label>\n    \n</span>',events:[{name:"onChange",reducer:"state.email = e.target.value",publishable:"",publishName:"",id:"input"},{name:"onFocus",reducer:'state.variant = "focussed"',index:1,publishable:"",publishName:"",id:"input"},{name:"onBlur",reducer:'if(state.email.length==0){\n    state.placeholder ="Please enter an Email Address"\n    state.variant = "prompt_input"\n}\nelse if(!state.email.includes("@")){\n    state.placeholder ="Please correct the Email Address"\n\tstate.variant = "prompt_correct_input";\n}\nelse{\n\tstate.placeholder = "Email Address";\n    state.variant = "valid_input"\n}\n',index:2,publishable:"",publishName:"",id:"input"}],state:'{\n\t"email":"",\n    "variant":"initial",\n    "placeholder":"Email Address"\n}',style:".emailInput{\n\tfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\n\tposition:relative;\n}\n\n.emailInput .email{\n\tpadding: 17px;\n\tpadding-top: 25px;\n\tborder: 1px solid #e1e1e1;\n    font-size: 16px;\n    width: 100%;\n}\n\n.emailInput label{\n    font-size: 14px;\n    position:absolute;\n    left: 15px;\n    top: -18px;\n}\n\n.prompt_input.emailInput label{\n\tfont-size: 11px;\n   \tleft: 15px;\n    top: -18px;\n    color: #d91560;\n}\n\n.prompt_input .email{\n    color: #d91560;\n    border-color: #ef5f96;\n}\n\n.prompt_correct_input label{\n    color: #d91560;\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.prompt_correct_input .email{\n   color: #d91560;\n    border-color: #ef5f96;\n}\n\n.focussed.emailInput label{\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.valid_input label{\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.emailInput label {\n\ttransition: top .3s;\n}",config:"{}",variants:[{name:"focussed",state:{email:"",variant:"focussed",placeholder:"Email Address"}},{name:"prompt_input",state:{email:"",variant:"prompt_input",placeholder:"Please enter an Email Address"}},{name:"prompt_correct_input",state:{email:"a",variant:"prompt_correct_input",placeholder:"Please correct the Email Address"}},{name:"valid_input",state:{email:"a@",variant:"valid_input",placeholder:"Email Address"}}]},{name:"ResetPasswordForm",markup:"<form><TermsAndService></TermsAndService><EmailInput></EmailInput><SubmitButton></SubmitButton><CancelButton></CancelButton><TermsAndService><PrivacyAndPolicy></PrivacyAndPolicy></TermsAndService>\n</form>",events:[],state:'{"variant":"text"}',style:"form{\nheight:400px;}",config:"{}",variants:[]},{name:"Page",markup:'<div className="page">\n\t<ForgotPassword></ForgotPassword>\n    <ResetPasswordModal></ResetPasswordModal>\n</div>',events:[{name:"onPasswordForgotten",reducer:'state.ResetPasswordModal = [\n\t{\n    \ttitle: "Forgot Password",\n        footer: "Copyrigts",\n        show: "sd"\n    }\n];\n\nstate.variant = "modal_opened";',index:0,publishable:"",publishName:"",id:"ForgotPassword"},{name:"onClose",reducer:'state.ResetPasswordModal = [];\nstate.variant = "modal_closed";',index:0,publishable:"",publishName:"",id:"ResetPasswordModal"}],state:'{\n\t"showModal": false,\n    "list": [1,2,3,4,5],\n    "ResetPasswordModal": [],\n    "variant": "initial"\n}',style:".page{\n\theight: 700px;\n\twidth: 500px;\n}",config:'{"VariantModal":{"showHideProp":"showModal","override":false},"ForgotPasswordButton":{"showHideProp":"","override":false},"ForgotPassword":{"showHideProp":"","override":false,"renderListProp":""},"ResetPasswordModal":{"showHideProp":"showModal","override":true,"renderListProp":""}}',variants:[{name:"modal_opened",state:{showModal:!1,list:[1,2,3,4,5],ResetPasswordModal:[{title:"Forgot Password",footer:"Copyrigts",show:"sd"}],variant:"modal_opened"}},{name:"modal_closed",state:{showModal:!1,list:[1,2,3,4,5],ResetPasswordModal:[],variant:"modal_closed"}}]},{name:"ResetPasswordModal",markup:'<div class="modal">\n<header>\n  <h3>{state.title}</h3>\n    <button id="close" className="closeButton">x</button>\n</header>\n<section class="content"><ResetPasswordForm></ResetPasswordForm>\n</section>\n<footer>{state.footer}</footer>\n</div>',events:[{name:"onClick",reducer:'state.show = "sd";',publishable:!0,publishName:"onClose",id:"close"}],state:'{"title":"Forgot Password","footer":"Copyrigts"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}",variants:[]},{name:"LayoutComponent",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    <div className="window">\n    \t<div className="content">\n          {<div>{state.current}</div>}\n\t    </div>\n    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length){\n\tstate.current = 1;\n}\n\nelse {\n\tstate.current = state.current +1;\n}",publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===1){\n\tstate.current = state.items.length;\n}\n\nelse {\n\tstate.current = state.current -1;\n}",publishable:"",publishName:"",id:"previous"}],state:'{\n\t"variant":"initial layoutComponent",\n    "items":[1,2,3,4,5,6],\n    "current": 1\n}',style:".layoutComponent button{\n\tcolor:red;\n    height:100%;\n    width: 40px;\n}\n\n.layoutComponent {\n\twidth:100%;\n    height:220px;\n    position:relative;\n}\n\n.layoutComponent *{\n  \tbox-sizing: border-box;\n}\n\n.layoutComponent .window {\n\twidth: 50%;\n    height:220px;\n    position: relative;\n    margin:auto;\n\toverflow:hidden;\n}\n\n.layoutComponent .content{\n\theight:220px;\n}\n\n.layoutComponent .content > div{\n\tdisplay:inline-block;\n    height:200px;\n    width:220px;\n    background-color:green;\n    margin:7px;\n}\n\n.layoutComponent .left{\n\tposition:absolute;\n    left:0px;\n    top:0px;\n}\n\n.layoutComponent .right{\n\tposition:absolute;\n    right:0px;\n    top:0px;\n}",children:[],id:314,config:"{}",variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}}]},{name:"ProductComponent",markup:'<div className={state.variant} id="product">\n\t{state.name}\n</div>\n',events:[{name:"onMouseEnter",reducer:'state.variant = "item on_hover";\nstate.name = "Buy now";',index:0,publishable:"",publishName:"",id:"product"},{name:"onMouseLeave",reducer:'state.variant = "item initial";\nstate.name = "Product one";',publishable:"",publishName:"",id:"product"}],state:'{\n\t"name" : "Product one",\n    "variant" : "item initial"\n}',style:".item.initial {\n\tbackground-color:darkcyan;\n    background-size:contain;\n}\n\n.item.on_hover {\n\tbackground-color:teal;\n    background-size:auto;\n}\n\n.item{\n   \tbackground-image: $assets['1.jpeg'];\n\theight:200px;\n    width:200px;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n}",children:[],id:949,config:"{}",variants:[{name:"on_hover",state:{name:"Buy now",variant:"on_hover"}},{name:"items on_hover",state:{name:"Buy now",variant:"items on_hover"}},{name:"item on_hover",state:{name:"Buy now",variant:"item on_hover"}},{name:"item initial",state:{name:"",variant:"item initial"}}]}]}},function(e,t,n){"use strict";function o(e){return'"'+e.split(":")[0].trim()+'":"'+e.split(":")[1].trim()+'"'}function r(e){var t=e.split("{")[0].trim(),n="{"+e.split("{")[1].split("}")[0].split(";").map(function(e){return e.trim()}).filter(Boolean).map(o).join(",")+"}",r=JSON.parse(n);return e={selector:t,declarations:Object.keys(r).map(function(e){return{property:e,value:r[e]}})}}function a(e){return e.selector+"    {\n"+e.declarations.map(function(e){return"    "+e.property+":     "+e.value+";"}).join("\n")+"\n}"}Object.defineProperty(t,"__esModule",{value:!0}),t.getObjectFormat=function(e){if(!e||0==e.length)return[];return e.split("}").filter(Boolean).map(function(e){return e+"}"}).map(r)},t.convertToStyleString=function(e){return e.map(a).join("\n")}},function(e,t,n){var o=n(43);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".hint{\n    height:100px;\n    width:100%;\n    border: 1px dashed green;\n}\n\n.hintDragOver{\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n    from {\n        border: 1px dashed green;\n    }\n  \n    to {\n        border: 2px dashed green;\n    }\n  }\n\n.hintNoDrop{\n    animation: blinkRed 1s infinite;\n}\n\n@keyframes blinkRed {\n    from {\n        border: 1px dashed red;\n    }\n  \n    to {\n        border: 2px dashed red;\n    }\n  }",""])},function(e,t,n){var o=n(45);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".thumbnailView {\n    zoom: 0.7;\n}\n\n.thumbnailView > div {\n    pointer-events: none;\n}",""])},function(e,t,n){var o=n(47);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"/* Show green when component is selected*/\n\n.selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n/* Show dark background to components */\n\n.background {\n    background: rgb(64, 64, 64);\n    border: 1px solid #333333;\n}\n\n/* Show some spacing before the component name */\n\n.component .componentName{\n    padding:7px;\n}\n\n.component {\n    display:flex;\n}\n\n/* Show comopnent preview onDrag*/\n\n.dragStarted span:not(.componentName){\n    display:none;\n}\n\n.hidden{\n    display: none;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(49);var s=n(3),l=n(10);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,s.readComponent)(n.props.name);return n.state={name:o?o.name:"",markup:o?o.markup:"",state:o?o.state:"",style:o?o.style:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"saveElement",value:function(){this.props.onSave({name:this.state.name,markup:this.state.markup,style:this.state.style,state:this.state.state})}},{key:"saveName",value:function(e){this.setState({name:e.currentTarget.value})}},{key:"render",value:function(){var e=this,t=(this.state.name,this.state.markup),n=this.state.style,o=this.state.state;return i.default.createElement("div",{className:"container editor-tab"},i.default.createElement("button",{onClick:this.saveElement.bind(this),id:"save"},i.default.createElement("i",{className:"fas fa-save"}),"Save & close"),i.default.createElement("div",null,i.default.createElement("div",{className:"editor name"},i.default.createElement("div",{className:"title"},"Component Name"),i.default.createElement("input",{type:"text",placeholder:"Enter element name",value:this.state.name,onChange:this.saveName.bind(this),id:"elementName"})),i.default.createElement("div",{className:"editor markup"},i.default.createElement("div",{className:"title"},"Component Markup"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:t,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({markup:o})}})),i.default.createElement("div",{className:"editor css"},i.default.createElement("div",{className:"title"},"Component CSS"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:n,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({style:o})}})),i.default.createElement("div",{className:"editor state"},i.default.createElement("div",{className:"title"},"Component State"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:o,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({state:o})}}))))}}]),t}();t.default=u},function(e,t,n){var o=n(50);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".editor-tab {\n    width: 100vw;\n    animation: slide-up 0.2s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\ninput.folder:read-only {\n    pointer-events: none;\n}\n\n\n.editor-tab button {\n    position: absolute;\n    top: -5%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}\n\n.showEditor{\n    margin-bottom:30px;\n}\n\n.editor.name{\n    width:10%;\n}\n\n.editor{\n    width: 29%;\n    display: inline-block;\n    margin: 5px;\n    margin-top: 2px;\n}\n",""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=p(r),i=p(n(53)),s=p(n(56)),l=p(n(57));n(62);var u=n(64),c=n(65),d=n(3);function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state=Object.assign({},n.props),n.state.selectedTag=n.props.selectedTag,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.component;if(0==this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"),a.default.createElement("p",null,'Looks like you do not have any Web component created. Type some "html" on the right "Editor" tab'));if(void 0===t.name&&0!=this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"),a.default.createElement("p",null,"Looks like you have not selected any component. Click on any of the component in the left pane."));var n=(0,c.getNodeTree)(t,t.markup,t.style,JSON.parse(t.state),t.events);if(void 0!==n.error)return n.error;if(void 0===n.result&&0!=this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"));var o=this.state.selectedTag||"",r=void 0,p=void 0,f=[];if(o.includes("child-component-")){var m=(0,d.readData)("ui-editor"),h=o.split("child-component-")[1],v=m.find(function(e){return e.name===h});f=v.events.filter(function(e){return!0===e.publishable}).map(function(e){return e.publishName});var b=t.events.filter(function(e){return f.find(function(t){return t===e.name&&e.id===v.name})});b=b.map(function(t,n){return a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:f,onSave:u.updateEvent.bind(e),deleteEvent:u.deleteEvent.bind(e)})}),r=o?b:null,p=a.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),onChange:u.updateConfiguration.bind(this),childName:h,parent:t})}else{var y=t.events.map(function(t,n){return a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:f,onSave:u.updateEvent.bind(e),deleteEvent:u.deleteEvent.bind(e)})});r=o?y.filter(function(e){return o.includes(e.props.event.id)}):null}return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"tags"},a.default.createElement(s.default,{node:n.result,onSelectedTagChanged:u.selectedTagChanged.bind(this)})),p,r&&r.length>0?a.default.createElement("div",null,a.default.createElement("div",{className:"title"},"Existing Events"),r):null,o?a.default.createElement("div",null,a.default.createElement("div",{className:"title"},"Add Event"),a.default.createElement(l.default,{key:t.events.length,eventNames:f,selectedTagID:o,onSave:u.updateEvent.bind(this)})):null)}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(54);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=JSON.parse(n.props.parent.config)[n.props.childName]||{override:!1};return n.state={override:o.override},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"toggelOverride",value:function(){this.setState({override:!this.state.override}),this.props.onChange({config:{override:!this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"saveConfig",value:function(){this.props.onChange({config:{override:this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("div",{className:"title"},"Child Configurations"),i.default.createElement("div",{className:"spacing"},i.default.createElement("label",null,"Override state"),i.default.createElement("input",{type:"checkbox",onChange:this.toggelOverride.bind(this),checked:this.state.override?"checked":""})))}}]),t}();t.default=s},function(e,t,n){var o=n(55);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.configurator {\n    background: rgb(64, 64, 64);\n    margin-top: 10px;\n    padding: 5px;\n}\n\n.spacing{\n    margin: 10px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=(o=i)&&o.__esModule?o:{default:o};var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"render",value:function(){var e=this,n=this.props.node;if(!n)return s.default.createElement("span",null,"null");if("string"==typeof n)return s.default.createElement("li",null,n);var o=n.props.id?"-"+n.props.id:"";if(n.props&&Array.isArray(n.props.children)){var a=n.props.children.map(function(n,o){return s.default.createElement(t,{key:o,node:n,onSelectedTagChanged:e.props.onSelectedTagChanged})});return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:n.type+o}),n.type+o),a)}if("object"===r(n.props.children)){var i=n.props.children;return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:(n.type.name||n.type)+o}),n.type.name||n.type),s.default.createElement(t,{key:index,node:i,onSelectedTagChanged:this.props.onSelectedTagChanged}))}return"function"==typeof n.type?s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:"child-component-"+n.type.name,onChange:this.props.onSelectedTagChanged}),n.type.name)):s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:n.type+o,onChange:this.props.onSelectedTagChanged}),n.type+o))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(58);var s=n(10),l=n(60),u=n(61);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.event?n.props.event.name:"",reducer:n.props.event?n.props.event.reducer:"",publishable:n.props.event?n.props.event.publishable:"",publishName:n.props.event?n.props.event.publishName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){var e=this;if(void 0===this.props.selectedTagID)return"Select ID";var t=this.state.publishable?i.default.createElement("input",{type:"text",onChange:l.updatePublishName.bind(this),value:this.state.publishName,placeholder:"Enter event publish name for other components to subscribe to"}):null,n=this.props.eventNames.map(function(e){return i.default.createElement("option",{value:e})});return i.default.createElement("div",{className:"event"},i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Event name"),i.default.createElement("input",{list:"events",type:"text",onChange:l.updateEventName.bind(this),value:this.state.name,title:"Event Name"}),i.default.createElement("datalist",{id:"events"},n)),i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Publishable"),i.default.createElement("input",{type:"checkbox",onChange:l.updateEventType.bind(this),checked:this.state.publishable?"checked":""}),t),i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Event reducer"),i.default.createElement(s.UnControlled,{value:this.state.reducer,autoCursor:!1,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0},onChange:function(t,n,o){e.setState({reducer:o})}})),i.default.createElement("div",null,i.default.createElement("button",{onClick:u.publishEvent.bind(this),id:"saveEvent"},i.default.createElement("i",{className:"fas fa-save"}),"Save"),i.default.createElement("button",{onClick:u.deleteEvent.bind(this),id:"deleteEvent"},i.default.createElement("i",{className:"fas fa-trash"}),"Delete")))}}]),t}();t.default=c},function(e,t,n){var o=n(59);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.event input {\n    margin-left:5px;\n    width:150px;\n}\n\n.event textarea {\n    margin-top: 8px;\n    width: 300px;\n}\n\n.input {\n    padding: 5px;\n}",""])},function(e,t,n){"use strict";function o(e){this.setState({publishable:e.currentTarget.checked})}var r,a,i;e.exports=(i=o,(a="updateEventType")in(r={updateEventName:function(e){this.setState({name:e.target.value})},updateEventType:o,updatePublishName:function(e){this.setState({publishName:e.target.value})}})?Object.defineProperty(r,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[a]=i,r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.publishEvent=function(){this.props.onSave({name:this.state.name,reducer:this.state.reducer,index:this.props.index,publishable:this.state.publishable,publishName:this.state.publishName})},t.deleteEvent=function(){this.props.deleteEvent(this.props.index)}},function(e,t,n){var o=n(63);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".events {\n    border:1px solid black;\n    padding: 5px;\n}\n\n.error {\n    color: red;\n}\n\n.tags.tags ul {\n    border: 0px;\n    margin-left: 30px;\n    padding:5px;\n}\n\n.tags ul:first-child {\n    margin-left: -2px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));this.state.selectedTag.includes("child-component-")?e.id=this.state.selectedTag.split("child-component-")[1]:e.id=this.state.selectedTag.split("-")[1];if(void 0===e.index)t.events.push(e);else{var n=t.events.findIndex(function(t){return t.name===e.name});-1==n&&console.error("Changing event name will not help. Create a new event"),t.events[n]=e}this.props.onEventsUpdate(t.events)},t.selectedTagChanged=function(e){this.setState({selectedTag:e.currentTarget.value})},t.deleteEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));t.events=t.events.splice(e,1),this.props.onEventsUpdate(t.events)},t.updateConfiguration=function(e){this.props.onConfigUpdate(e)}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNodeTree=getNodeTree;var _react=__webpack_require__(0),_react2=_interopRequireDefault(_react),_Runtime=__webpack_require__(4);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function getNodeTree(element,jsx,style,state,events){var result=void 0,error=void 0;try{var nestedComponents=(0,_Runtime.getNestedComponents)(element);nestedComponents.length>0&&(0,_Runtime.saveComponentsToWindow)(nestedComponents),result=eval(Babel.transform(jsx,{presets:["react"]}).code)}catch(e){error=e}finally{return _defineProperty({error:error,result:result},"result",result)}}window.React=_react2.default,window.Component=_react2.default.Component},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=l(r);n(67);var i=l(n(5)),s=n(3);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component,display:"mobile"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"refresh",value:function(){this.setState({component:(0,s.readComponent)(this.state.component.name)})}},{key:"switchTablet",value:function(){this.setState({display:"tablet"})}},{key:"switchMobile",value:function(){this.setState({display:"mobile"})}},{key:"switchDesktop",value:function(){this.setState({display:"desktop"})}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random());return a.default.createElement("div",{className:"container preview "+this.state.display},a.default.createElement("div",{className:"title"},"Preview",a.default.createElement("div",{className:"Controls"},a.default.createElement("button",{onClick:this.switchTablet.bind(this)},a.default.createElement("i",{className:"fa fa-tablet-alt"})),a.default.createElement("button",{onClick:this.switchMobile.bind(this)},a.default.createElement("i",{className:"fa fa-mobile-alt"})),a.default.createElement("button",{onClick:this.switchDesktop.bind(this)},a.default.createElement("i",{className:"fa fa-desktop"})))),a.default.createElement("div",{className:"dynamicComponent"},a.default.createElement(i.default,{onSave:this.props.onSave,key:e,component:this.state.component})))}}]),t}();t.default=u},function(e,t,n){var o=n(68);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".container{\n    padding: 5px;\n    background: #2C3134;\n}\n\n/* Center align the title */\n\n.preview .title{\n    text-align: center;\n}\n\n/* Fix the height and width of the preview - default*/\n\n.preview .dynamicComponent {\n    width:30vw;\n    height: 600px;\n    overflow:scroll;\n}\n\n/* Fix the height and width of preview - mobile display */\n\n.preview.mobile .dynamicComponent {\n    width:479px;\n    transition: width .2s;\n}\n\n/* Fix the height and width of preview - tablet display */\n\n.preview.tablet .dynamicComponent{\n    width:767px;\n    transition: width .2s;\n}\n\n/* Fix the height and width of preview - desktop display */\n\n.preview.desktop .dynamicComponent {\n    width:991px;\n    transition: width .2s;\n}\n\n/** Highlight mobile when display mode is mobile */\n\n.preview.mobile .fa-mobile-alt {\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n}\n\n/** Highlight tablet when display mode is tablet */\n\n.preview.tablet .fa-tablet-alt {\n\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n}\n\n/** Highlight desktop when display mode is desktop */\n\n.preview.desktop .fa-desktop {\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=u(r);n(70);var i=u(n(72)),s=n(75),l=n(76);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={class:"drop_zone",imageURL:"",assets:[],selectedAsset:""},n.writeToDB=l.writeToDB.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"appendToBody",value:function(e){var t=this.result,n=document.createElement("div");n.innerHTML="Loaded : "+e.name+" size "+e.size+" B",document.body.appendChild(n);var o=document.createElement("img");o.file=e,o.src=t,n.appendChild(o)}},{key:"updatedSelected",value:function(e){var t=e.target.getAttribute("data-name");this.setState({selectedAsset:t})}},{key:"render",value:function(){var e=this,t=this.state.assets.map(function(t){return a.default.createElement(i.default,{asset:t,selected:e.state.selectedAsset,onSelected:e.updatedSelected.bind(e)})});return a.default.createElement("ul",{className:"assets"},a.default.createElement("button",{onClick:l.fetchFromDB.bind(this)},"Load Assets"),a.default.createElement("div",{className:this.state.class,onDrop:s.dropHandler.bind(this),onDragOver:s.dragOverHandler.bind(this),onDragLeave:s.dragLeaveHandler.bind(this)},a.default.createElement("p",null,"Drag one or more files to this Drop Zone ...")),a.default.createElement("div",null,this.state.selectedAsset.name),t)}}]),t}();t.default=c},function(e,t,n){var o=n(71);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n/* Show dashed outline for the drop zone.*/\n\n.drop_zone {\n  border: 1px lightgray dashed;\n  width:  200px;\n  height: 100px;\n}\n\n/* Show dashed outline during drag over. */\n\n.drag_over {\n  border: 2px lightgray dashed;\n  width:  200px;\n  height: 100px;\n}\n\n/* Give some spacing around asset name. */\n\n.assets p{\n  padding:15px; \n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(73);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("p",{"data-name":this.props.asset.name,onClick:this.props.onSelected},this.props.asset.name))}}]),t}();t.default=s},function(e,t,n){var o=n(74);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n/* Show selected asset with a light dashed outline */\n\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){var t=this;e.preventDefault(),[].forEach.call(e.dataTransfer.files,function(e){var n=new FileReader;n.readAsDataURL(e),n.onloadend=function(t,n){this.appendToBody(e),this.writeToDB(t.target.result,e.name)}.bind(t)}),this.setState({class:"drop_zone"})},t.dragOverHandler=function(e){console.log("File(s) in drop zone"),this.setState({class:"drag_over"}),e.preventDefault()},t.dragLeaveHandler=function(e){this.setState({class:"drop_zone"})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.writeToDB=function(e,t){var n=this;window.iDB.get(t).then(function(e){document.createElement("img").href=e.result,n.setState({imageURL:e.result})}),window.iDB.put({name:t,result:e})},t.fetchFromDB=function(){var e=this;window.iDB.getAll().then(function(t){window.assets={},t.forEach(function(e){window.assets[e.name]=e.result}),e.setState({assets:t})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(78);n(84);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={exportType:"SIMPLE"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"onExportTypeChanged",value:function(e){this.setState({exportType:e.target.value})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"logCode",checked:"logCode"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS - logs output to your console.")),".",i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"STORYBOOK",checked:"STORYBOOK"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS with Storybook - Codebase"))),i.default.createElement("button",{onClick:s.onExport.bind(null,this.state.exportType,this.props.component.name)},i.default.createElement("i",{className:"fas fa-file-export"}),"Export"))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onExport=function(e,t){switch(e){case"SIMPLE":(0,r.logCode)(t);break;case"STORYBOOK":(0,o.exportSeparateFile)(t);break;default:(0,r.logCode)(t)}};var o=n(79),r=n(83)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportSeparateFile=function(e){var t=(0,i.readData)("ui-editor").find(function(t){return t.name.includes(e)}),n=u((0,a.getNestedComponents)(t)),p=(n=function(e){return e.forEach(function(e){0===e.variants.length&&e.variants.push({name:"initial",state:JSON.parse(e.state)})}),e}(n)).map(function(e){var t=(0,a.getChildren)(e).map(function(e){return"import "+e+' from "./'+e+'";'}).join("\n");return{name:e.name+".js",content:d+"\n"+t+"\n "+c((0,r.convertToReact)(e))+" \nexport default "+e.name+";"}}),f=n.map(function(e){return{name:e.name+".stories.js",content:(0,o.convertToReactStories)(e)}});(0,s.zipFiles)([].concat(l(p),l(f)))};var o=n(80),r=n(6),a=n(4),i=n(3),s=n(81);function l(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function u(e){return[].concat(l(new Set(e.map(function(e){return e.name})))).map(function(e){return components.find(function(t){return t.name===e})})}var c=function(e){return e.replace("(","").replace("})","}")},d=" /* eslint-disable */\nimport React, {Component} from 'react';\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReactStories=function(e){return"import React from 'react';\n\n    import "+e.name+' from "./'+e.name+"\";\n    \n    export default {\n        title: '"+e.name+"',\n        component: "+e.name+"\n    }\n    \n    "+e.variants.map(function(t){return"export const "+t.name+" = () => <"+e.name+" state={"+JSON.stringify(t.state)+"}></"+e.name+">;"}).join("\n\n")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.zipFiles=function(e){var t=new JSZip,n=t.folder("src");e.forEach(function(e){n.file(e.name,e.content)}),t.generateAsync({type:"blob"}).then(function(e){(0,o.download)(e,"archive.zip")})};var o=n(82)},function(e,t,n){"use strict";function o(e,t){var n=document.createElement("a");n.download=t,n.href=window.URL.createObjectURL(e),n.onclick=function(e){var t=this;setTimeout(function(){window.URL.revokeObjectURL(t.href)},1500)},n.click(),n.remove()}Object.defineProperty(t,"__esModule",{value:!0}),t.downloadFile=function(e,t,n){n=n||"text/plain",o(new Blob([t],{type:n}),e)},t.download=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logCode=function(e){var t=(0,a.readData)("ui-editor"),n=t.find(function(t){return t.name.includes(e)}),i=(0,o.getNestedComponents)(n),s=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(i.map(function(e){return e.name})))).map(function(e){return t.find(function(t){return t.name===e})}),l=s.map(r.convertToReact).map(function(e){return e.replace("(","").replace("})","}")}).reverse().join("");console.log(l)};var o=n(4),r=n(6),a=n(3)},function(e,t,n){var o=n(85);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(3);n(87);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"refreshToPrevious",value:function(){(0,s.popHistory)()}},{key:"render",value:function(){return i.default.createElement("ul",null,i.default.createElement("button",{onClick:this.refreshToPrevious.bind(this)},"Go back"))}}]),t}();t.default=l},function(e,t,n){var o=n(88);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r),i=s(n(90));function s(e){return e&&e.__esModule?e:{default:e}}n(93);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=n.props.component;return n.state={variants:o.variants,component:o},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"deleteVariant",value:function(e){var t=Array.from(this.state.variants),n=t.findIndex(function(t){return t.name.includes(e.name)});-1!==n&&t.splice(n,1);var o=JSON.parse(JSON.stringify(this.state.component));o.variants=t,this.props.onUpdate(o)}},{key:"render",value:function(){var e=this,t=this.state.component,n=this.state.variants;return""==t.name?a.default.createElement("div",{className:"container variants"},a.default.createElement("div",{className:"title"},"Variants"),a.default.createElement("p",null,"No component selected")):t.variants?(n=n.map(function(n,o){return a.default.createElement(i.default,{index:o,state:JSON.stringify(n.state),name:n.name,component:t,deleteVariant:e.deleteVariant.bind(e)})}),a.default.createElement("div",{className:"container variants"},a.default.createElement("div",{className:"title"},"Variants"),a.default.createElement("div",{className:"variantsList"},n))):a.default.createElement("div",{className:"container variants"},a.default.createElement("div",{className:"title"},"Variants"),a.default.createElement("p",null,"No variants found."))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r),i=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}n(91);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.name||"",state:n.props.state},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"deleteVariant",value:function(){var e=this.state;this.props.deleteVariant(e)}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random()),t=JSON.parse(JSON.stringify(this.props.component));return""==t.name?a.default.createElement("div",null):(t.state=this.props.state,console.log(t.state),a.default.createElement("div",{className:"variant"},a.default.createElement("div",{className:"variant-controls"},a.default.createElement("input",{type:"text",value:this.state.name,disabled:!0}),a.default.createElement("button",{onClick:this.deleteVariant.bind(this)},a.default.createElement("i",{className:"fas fa-trash"}),"Delete")),a.default.createElement("div",{className:"view"},a.default.createElement(i.default,{key:e,component:t}))))}}]),t}();t.default=l},function(e,t,n){var o=n(92);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".variant {\n    border: 1px dotted black;\n    padding:10px;\n    margin-bottom: 10px;\n}\n\n.variant .view > div{\n    pointer-events: none;\n    zoom: .3;\n}\n\n\n.variant-controls input {\n    width: 80px;\n}",""])},function(e,t,n){var o=n(94);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".variantsList{\n    overflow: scroll;\n    max-height: 86%;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(96);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"center"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(97);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".center{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(99);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"Bottom"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(100);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".bottom{\n    position: absolute;\n    bottom:0px;\n    width: 100vw;\n    animation: slide-up 0.4s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(102);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"left"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(103);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".Left{\n    position: absolute;\n    left:0px;\n    animation: slide-to-screen 0.7s ease;\n}\n\n@keyframes slide-to-screen {\n    0% {\n        left:-300px;\n    }\n    100% {\n        left: 0px;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(105);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selected:n.props.selected},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"updateSelectedTab",value:function(e){this.setState({selected:e.target.innerText})}},{key:"render",value:function(){var e=this;return this.state.selected,this.props.selected,i.default.createElement("div",{className:"right container"},this.props.children.map(function(t){return i.default.createElement("div",{className:t.props.title===e.state.selected?"tabs title":"tabs",onClick:e.updateSelectedTab.bind(e)},t.props.title)}),i.default.createElement("div",{className:"tab-content"},this.props.children.filter(function(t){return t.props.title===e.state.selected})))}}]),t}();t.default=s},function(e,t,n){var o=n(106);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".Right{\n    position: absolute;\n    right:0px;\n    animation: slide-right 0.2s ease;\n    height: 100%;\n    overflow: scroll;\n    width:400px;\n}\n\n@keyframes slide-right {\n    0% {\n        opacity: 0;\n        right:-100px;\n    }\n    100% {\n        opacity: 1;\n        right: 0px;\n    }\n}\n\n.tab-content{\n    height:91%;\n    border: 1px #404040 solid;\n}\n\n.tab-content ul {\n    padding: 12px;\n}\n\n.tabs {\n    display: inline-block;\n    cursor: default;\n    \n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    padding: 5px;\n    font-size: 12px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(108);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"closeContextMenu",value:function(){this.props.onMessage("HIDE")}},{key:"render",value:function(){return i.default.createElement("div",{className:"ContextMenu",style:this.props.position},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(109);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".ContextMenu{\n    position: absolute;\n    background-color: rgb(64, 64, 64);\n    box-shadow: 0px 0px 30px black;\n    border-radius: 5px;\n    padding:0px;\n}\n.contextMenuOptions li {\n    padding: 15px;\n    user-select: none;\n}\n\n.contextMenuOptions{\n    padding-left:0px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=this,n=Object.assign({},this.state).components;n.find(function(e){return e.name===t.state.selectedComponent.name}).events=e,this.setState({elements:n}),(0,o.writeData)("ui-editor",n)},t.updateConfig=function(e){var t=Object.assign({},this.state).components,n=t.find(function(t){return t.name===e.parentName}),r=t.find(function(t){return t.name===e.childName});n.state=JSON.parse(n.state),void 0===n.config?n.config={}:n.config=JSON.parse(n.config);n.config[r.name]=e.config,n.config[r.name].override?n.state[r.name]=[JSON.parse(r.state)]:delete n.state[r.name];n.state=JSON.stringify(n.state),n.config=JSON.stringify(n.config),this.setState({elements:t}),(0,o.writeData)("ui-editor",t)},t.saveElement=function(e){var t=this,n=Array.from(this.state.components),r=void 0,a=n.find(function(t){return t.name===e.name}),i=n.find(function(e){return e.name===t.state.selectedComponent.name}),s=n.findIndex(function(e){return e.name===t.state.selectedComponent.name});if(a){var l=i;l=Object.assign(l,e),n[s]=l}else r={name:e.name,markup:e.markup,events:[],state:e.state||"{}",style:e.style,children:[],id:Math.ceil(1e3*Math.random()),config:"{}",variants:[]},n.push(r),s=n.length-1,this.state.folders[0].contents.push(e.name);this.setState({elements:n,element:{name:e.name,markup:e.markup,style:e.style,state:e.state,events:e.events||[]},showEditor:!1,folders:this.state.folders}),(0,o.writeData)("folders",this.state.folders),(0,o.writeData)("ui-editor",n)},t.updateSelectedComponent=function(e,t){var n=this.state.components.find(function(t){return t.name===e});this.setState({selectedComponent:n})};var o=n(3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.onDeleteComponent=function(e){var t=this.state.selectedComponent.name,n=(0,a.findParent)(t,this.state.folders[0]),o=n.contents.findIndex(function(e){return e===t});n.contents.splice(o,1);var i=Array.from(this.state.components),s=i.findIndex(function(e){return e.name===t});i.splice(s,1),this.setState({components:i,folders:this.state.folders}),(0,r.writeData)("ui-editor",i),(0,r.writeData)("folders",this.state.folders)},t.onDeleteFolder=function(e,t){var n,r=Array.from(this.state.folders),i=r[0],s=(0,a.findParentFolder)(t,r[0]),l=(0,a.findFolder)(t,r[0]);switch(e){case"FOLDER_RETAIN_CONTENTS":(n=i.contents).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(l.contents));var u=s.contents.findIndex(function(e){return"object"===(void 0===e?"undefined":o(e))&&e.name===t});s.contents.splice(u,1),this.updateFolders(r)}};var r=n(3),a=n(112)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.findParent=function e(t,n){var r=n.contents;for(var i=0;i<r.length;i++){var s=r[i];t===s&&(a=n),"object"===(void 0===s?"undefined":o(s))&&e(t,s)}return a},t.findParentFolder=function e(t,n){var r=n.contents;for(var a=0;a<r.length;a++){var s=r[a];"object"===(void 0===s?"undefined":o(s))&&(s.name===t&&(i=n),e(t,s))}return i},t.findFolder=function e(t,n){if("string"==typeof n)return!1;if("object"===(void 0===n?"undefined":o(n))){n.name===t&&(r=n);for(var a=n.contents,i=0;i<a.length;i++){var s=a[i];e(t,s)}}return r};var r="",a="",i=""},function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=x(r),i=x(n(12));n(16);var s=x(n(19)),l=x(n(48)),u=x(n(52)),c=x(n(66)),d=x(n(69)),p=x(n(77)),f=x(n(86)),m=x(n(89)),h=x(n(95)),v=x(n(98)),b=x(n(101)),y=x(n(104)),g=x(n(107)),w=n(110),_=n(3),E=n(111);function x(e){return e&&e.__esModule?e:{default:e}}var O=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,_.readData)("ui-editor");return n.state={components:o,selectedTag:"",component:{name:"",markup:"",style:"",state:"{ }",events:[]},selectedComponent:"",folders:(0,_.readData)("folders"),showEditor:!1,selectedTab:"Events"},n.updateConfig=w.updateConfig.bind(n),n.updateEvent=w.updateEvent.bind(n),n.saveElement=w.saveElement.bind(n),n.updateSelectedComponent=w.updateSelectedComponent.bind(n),document.onkeydown=function(e){e.altKey&&69==e.keyCode&&this.setState({showEditor:!this.state.showEditor}),e.altKey&&82==e.keyCode&&this.setState({openRight:!this.state.openRight,selectedTab:"Events"}),e.altKey&&86==e.keyCode&&this.setState({openRight:!this.state.openRight,selectedTab:"Variants"})}.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"updatePreview",value:function(e){this.setState({previewComponent:e})}},{key:"updateFolders",value:function(e){this.setState({folders:e}),(0,_.writeData)("folders",e)}},{key:"openEditor",value:function(){this.setState({showEditor:!0})}},{key:"openExportTab",value:function(e){this.setState({selectedTab:"Export"})}},{key:"extendComponent",value:function(){}},{key:"onShowContextMenu",value:function(e){if(e.target.classList.contains("component")||e.target.classList.contains("componentName"))this.state.contextMenuChildren=a.default.createElement("ul",{className:"contextMenuOptions"},a.default.createElement("li",{onClick:E.onDeleteComponent.bind(this)},"Delete Component"),a.default.createElement("li",{onClick:this.openExportTab.bind(this)},"Export Component"),a.default.createElement("li",{onClick:this.extendComponent.bind(this)},"Extend Component"));else if(e.target.classList.contains("fa-folder-open")||e.target.classList.contains("fa-folder")){var t=e.target.parentElement.getAttribute("data-folder-name");this.state.contextMenuChildren=a.default.createElement("ul",{className:"contextMenuOptions"},a.default.createElement("li",{onClick:E.onDeleteFolder.bind(this,"FOLDER_RETAIN_CONTENTS",t)},"Delete folder and retain contents"),a.default.createElement("li",{onClick:E.onDeleteFolder.bind(this,"RETAIN_FOLDER_DELETE_CONTENTS",t)},"Keep Folder and delete contents"),a.default.createElement("li",{onClick:E.onDeleteFolder.bind(this,"ENTIRE_FOLDER",t)},"Delete Folder and contents"),a.default.createElement("li",{onClick:this.openExportTab.bind(this)},"Export Folder"))}this.setState({showContextMenu:!0,contextMenuPosition:{top:e.clientY+"px",left:e.clientX+"px"}}),e.preventDefault()}},{key:"hideContextMenu",value:function(){this.state.showContextMenu&&this.setState({showContextMenu:!1})}},{key:"onContextMenuMessage",value:function(e){switch(e){case"HIDE":this.setState({showContextMenu:!1})}}},{key:"render",value:function(){var e=this,t=this.state.selectedComponent||this.state.component;return a.default.createElement("div",{onContextMenu:this.onShowContextMenu.bind(this),onClick:this.hideContextMenu.bind(this)},a.default.createElement(b.default,null,a.default.createElement(s.default,{components:this.state.components,folders:this.state.folders,selectedComponent:this.state.selectedComponent,title:"Components",showControls:!0,onOpenEditor:this.openEditor.bind(this),onSelection:this.updateSelectedComponent,onFoldersUpdate:this.updateFolders.bind(this)})),a.default.createElement(h.default,null,a.default.createElement(c.default,{key:Math.ceil(1e3*Math.random()),component:t,title:"Preview",onSave:this.saveElement})),this.state.selectedComponent&&this.state.openRight?a.default.createElement(y.default,{selected:this.state.selectedTab},a.default.createElement(u.default,{key:Math.ceil(1e3*Math.random()),component:t,selectedTag:this.state.selectedTag,components:this.state.components,onEventsUpdate:this.updateEvent,onConfigUpdate:this.updateConfig,title:"Events"}),a.default.createElement(f.default,{title:"History"}),a.default.createElement(d.default,{title:"Assets"}),a.default.createElement(p.default,{title:"Export",component:t}),a.default.createElement(m.default,{title:"Variants",key:Math.ceil(1e3*Math.random()),component:t,onUpdate:w.saveElement.bind(this)})):null,this.state.showEditor?a.default.createElement(v.default,null,a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),element:t,name:t.name,markup:t.markup,style:t.style,state:t.state,title:"Editor",onSave:this.saveElement})):this.state.selectedComponent?a.default.createElement(v.default,null,a.default.createElement(h.default,null,a.default.createElement("button",{class:"showEditor",onClick:function(){return e.setState({showEditor:!0})}},"Open Editor"))):null,this.state.showContextMenu?a.default.createElement(g.default,{children:this.state.contextMenuChildren,position:this.state.contextMenuPosition,onMessage:this.onContextMenuMessage.bind(this)}):null)}}]),t}();console.log("Source code https://github.com/imvetri/ui-editor"),i.default.render(a.default.createElement(O,null),document.getElementById("index"))}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1N0b3JhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9SdW50aW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db2RlR2VuZXJhdG9yL1JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL2ZpbmRGb2xkZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9JbmRleC9pbmRleC5jc3M/ZDBkNyIsIndlYnBhY2s6Ly8vLi9zcmMvSW5kZXgvaW5kZXguY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1N0eWxlLmNzcz8zNmRmIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9TdHlsZS5jc3M/ODQ2NSIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvcHJvY2Vzc0ZvbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9Gb2xkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvRm9sZGVyL1N0eWxlLmNzcz9hOWJlIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvTmV3Rm9sZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL05ld0ZvbGRlci9TdHlsZS5jc3M/ZTNiZiIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9OZXdGb2xkZXIvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9SZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L0V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L1RodW1ibmFpbFZpZXcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ByZXZpZXcvRHluYW1pY0NvbXBvbmVudC9VdGlsaXR5LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvY3JlYXRlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1N0b3JhZ2UvbG9jYWxTdG9yYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvU3RvcmFnZS9sb2NhbFN0b3JhZ2UvU2FtcGxlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9TdHlsZUV4cGxvcmVyL1N0eWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnQvc3R5bGUuY3NzPzUyNWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ByZXZpZXcvRHluYW1pY0NvbXBvbmVudC9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9UaHVtYm5haWxWaWV3L3N0eWxlLmNzcz9hNmJiIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0NvbXBvbmVudHQvVGh1bWJuYWlsVmlldy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9TdHlsZS5jc3M/OGYwNyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRWRpdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9FZGl0b3IvU3R5bGUuY3NzPzFiZmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VkaXRvci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9TdHlsZS5jc3M/ZWUyOCIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db21wb25lbnRzL05vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9FdmVudHMvRXZlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9FdmVudC9TdHlsZS5jc3M/YmE5NCIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9FdmVudC9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9TdHlsZS5jc3M/Nzk3MSIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9nZXQtbm9kZS10cmVlLmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L3N0eWxlLmNzcz82ZDQ4Iiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvU3R5bGUuY3NzPzllYWEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9Bc3NldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL0Fzc2V0L1N0eWxlLmNzcz81OGU2Iiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvQXNzZXQvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvUmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL2RiLmpzIiwid2VicGFjazovLy8uL3NyYy9FeHBvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9FeHBvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9FeHBvcnQvRXhwb3J0U2VwYXJhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db2RlR2VuZXJhdG9yL1JlYWN0U3Rvcmllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0xpYnJhcmllcy96aXBGaWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0xpYnJhcmllcy9kb3dubG9hZEZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9FeHBvcnQvbG9nQ29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXhwb3J0L1N0eWxlLmNzcz84YmY1Iiwid2VicGFjazovLy8uL3NyYy9FeHBvcnQvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9IaXN0b3J5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9IaXN0b3J5L1N0eWxlLmNzcz9hNzRhIiwid2VicGFjazovLy8uL3NyYy9IaXN0b3J5L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVmFyaWFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhcmlhbnRzL1ZhcmlhbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhcmlhbnRzL1ZhcmlhbnQvc3R5bGUuY3NzPzAwN2MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZhcmlhbnRzL1ZhcmlhbnQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9WYXJpYW50cy9zdHlsZS5jc3M/YmFlNiIsIndlYnBhY2s6Ly8vLi9zcmMvVmFyaWFudHMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9DZW50ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0NlbnRlci9zdHlsZS5jc3M/YjRlNyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvQ2VudGVyL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvQm90dG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Cb3R0b20vc3R5bGUuY3NzP2MyOGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0JvdHRvbS9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnQvc3R5bGUuY3NzP2E3MTciLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9SaWdodC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvUmlnaHQvc3R5bGUuY3NzPzhlMzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL1JpZ2h0L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0NvbXBvbmVudHMvQ29udGV4dE1lbnUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db21wb25lbnRzL0NvbnRleHRNZW51L3N0eWxlLmNzcz80ZjM1Iiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9Db250ZXh0TWVudS9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0luZGV4L1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL2ZpbmRGb2xkZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfbG9jYWxTdG9yYWdlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkRGF0YSIsIndyaXRlRGF0YSIsInJlYWRDb21wb25lbnQiLCJ3cml0ZUNvbXBvbmVudCIsInBvcEhpc3RvcnkiLCJzYXZlQ29tcG9uZW50c1RvV2luZG93IiwibmVzdGVkQ29tcG9uZW50cyIsImZvckVhY2giLCJjb21wb25lbnQiLCJzdGF0ZSIsInN0eWxlIiwibmFtZSIsIndpbmRvdyIsImFzc2V0cyIsImluY2x1ZGVzIiwiYXNzZXQiLCJzcGxpdCIsInBvcCIsImpvaW4iLCJyZXBsYWNlIiwidG9EZWxldGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwicmVtb3ZlIiwiZHluYW1pY1N0eWxlIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInR5cGUiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVTdHlsZXNoZWV0IiwiX2NyZWF0ZUNvbXBvbmVudCIsImNyZWF0ZUNvbXBvbmVudCIsInNhdmVUb1dpbmRvdyIsImdldENoaWxkcmVuIiwicGFyZW50IiwiY29tcG9uZW50cyIsIl9TdG9yYWdlIiwiY2hlY2tOZXN0ZWRDb21wb25lbnRzIiwibWFya3VwIiwiZmlsdGVyIiwibWFwIiwiZ2V0TmVzdGVkQ29tcG9uZW50cyIsImNoaWxkcmVuIiwiZ3JhbmRLaWRzIiwiZmxhdCIsInB1c2giLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheSIsImxlbmd0aCIsInNhdmVWYXJpYW50IiwiY29tcG9uZW50TmFtZSIsImZpbmQiLCJjb21wb25lbnRTdGF0ZSIsIkpTT04iLCJwYXJzZSIsInVuZGVmaW5lZCIsInZhcmlhbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJ2YXJpYW50cyIsIl9yZWFjdCIsIl9SdW50aW1lIiwiRHluYW1pY0NvbXBvbmVudCIsInByb3BzIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl90aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImNhbGwiLCJDb21wb25lbnQiLCJlIiwiY3VycmVudFRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb250YWlucyIsImxvZyIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZGF0YVRyYW5zZmVyIiwiZ2V0RGF0YSIsInBhcmVudENvbXBvbmVudCIsImNvbXBvbmVudFRhZyIsIm9uU2F2ZSIsIl9yZWFjdDIiLCJkZWZhdWx0Iiwib25EcmFnT3ZlciIsImRyYWdPdmVySGFuZGxlciIsImJpbmQiLCJvbkRyb3AiLCJkcm9wQ29tcG9uZW50IiwiUmVhY3QiLCJjb252ZXJ0VG9SZWFjdCIsImV2ZW50cyIsImV2ZW50IiwiaWQiLCJwcm9wc0luTWFya3VwIiwiYWRkUHJvcHMiLCJzdGF0ZU92ZXJpZGVNYXJrdXAiLCJjb25maWciLCJrZXlzIiwiY2hpbGROYW1lIiwib3ZlcnJpZGUiLCJjaGlsZE1hcmt1cCIsInJlbmRlckxpc3RNYXJrdXAiLCJjaGlsZE1hcmt1cFdpdGhQcm9wcyIsImdldFN0YXRlZE1hcmt1cCIsImNvbXBvbmVudEV2ZW50ZWRNYXJrdXAiLCJnZXRDb21wb25lbnRFdmVudGVkTWFya3VwIiwiZ2V0U2F2ZVZhcmlhbnQiLCJSZWFjdENvbXBvbmVudCIsInB1Ymxpc2hhYmxlIiwicmVkdWNlciIsInB1Ymxpc2hOYW1lIiwiZmluZFBhcmVudCIsImZvbGRlciIsImNvbnRlbnRzIiwiaSIsImNvbnRlbnQiLCJwYXJlbnRGb2xkZXIiLCJfdHlwZW9mIiwiZmluZFBhcmVudEZvbGRlciIsImZvbGRlck5hbWUiLCJmb2xkZXJQYXJlbnRGb2xkZXIiLCJmaW5kRm9sZGVyIiwiZm9sZGVyRm91bmQiLCJvcHRpb25zIiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsImxvY2FscyIsIkNvbXBvbmVudHMiLCJmb2xkZXJzIiwic2hvd0NvbnRyb2xzIiwiQXJyYXkiLCJmcm9tIiwidW5zaGlmdCIsInN0YXR1cyIsInNldFN0YXRlIiwib25PcGVuRWRpdG9yIiwiY2xhc3NOYW1lIiwib25DbGljayIsImFkZENvbXBvbmVudCIsInNlbGVjdGVkQ29tcG9uZW50IiwiYWRkRm9sZGVyIiwiX0ZvbGRlcnMyIiwia2V5IiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJvbkZvbGRlcnNVcGRhdGUiLCJvblNlbGVjdGlvbiIsIl9maW5kRm9sZGVycyIsIl9wcm9jZXNzRm9sZGVyIiwiRm9sZGVycyIsIm9sZFBhcmVudCIsImNvbnRlbnROYW1lIiwib2xkUGFyZW50Rm9sZGVyIiwiZGVsZXRlSW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJyZW1vdmVJbmRleCIsImRhdGEiLCJuZXdQYXJlbnQiLCJlbXB0eUZvbGRlckluZGV4IiwicmVtb3ZlQ29udGVudEZyb21QYXJlbnQiLCJyZW1vdmVGb2xkZXJGcm9tUGFyZW50IiwiZm9sZGVyU3RydWN0dXJlIiwib25Gb2xkZXJVcGRhdGUiLCJvbkZvbGRlclN0YXR1c0NoYW5nZWQiLCJpbml0aWFsaXNlUHJvcHMiLCJwcm9jZXNzRm9sZGVyIiwiY2hlY2tGb2xkZXIiLCJ4IiwiX0ZvbGRlcjIiLCJwcm9jZXNzQ29udGVudCIsIl9Db21wb25lbnR0MiIsIm9uU2VsZWN0aW9uQ2hhbmdlIiwiX1JlZHVjZXIiLCJfRXZlbnRzIiwiRm9sZGVyIiwiaWNvblN0YXR1cyIsImZvbGRlckNsYXNzIiwiX05ld0ZvbGRlcjIiLCJvbk5ld0ZvbGRlciIsIm5ld0ZvbGRlciIsImRhdGEtZm9sZGVyLW5hbWUiLCJkcmFnZ2FibGUiLCJkcm9wSGFuZGxlciIsIm9uRHJhZ0xlYXZlIiwiZHJhZ0xlYXZlSGFuZGxlciIsIm9uRHJhZ1N0YXJ0IiwiZm9sZGVyU3RhcnREcmFnIiwidG9nZ2xlRm9sZGVyIiwicGxhY2Vob2xkZXIiLCJyZWFkT25seSIsInZhbHVlIiwiTmV3Rm9sZGVyIiwibmV3Rm9sZGVyQ2xhc3MiLCJhdXRvRm9jdXMiLCJvbkNoYW5nZSIsImZvbGRlck5hbWVDaGFuZ2VkIiwib25LZXlQcmVzcyIsInNhdmVGb2xkZXJOYW1lT25FbnRlciIsInN0cmluZ2lmeSIsImV2IiwiZHJvcHBlZEZvbGRlciIsImdldEF0dHJpYnV0ZSIsInBhcmVudEVsZW1lbnQiLCJzZXREYXRhIiwiQ29tcG9uZW50dCIsInNlbGVjdGlvbkNoYW5nZWQiLCJvbkNvbnRleHRNZW51IiwiaW5kZXgiLCJkYXRhLW5hbWUiLCJhZGRDb21wb25lbnREZXRhaWxzIiwiX1RodW1ibmFpbFZpZXcyIiwiVGh1bWJuYWlsVmlldyIsIl9EeW5hbWljQ29tcG9uZW50MiIsImluc2VydERpcmVjdGlvbiIsIlBhZ2VYIiwiUGFnZVkiLCJwcmV2UGFnZVgiLCJwcmV2UGFnZVkiLCJjb3VudCIsIm1heENvdW50IiwiX1JlYWN0IiwiY29tcG9uZW50U3RyaW5nIiwiZXZhbCIsIkJhYmVsIiwicHJlc2V0cyIsInBsdWdpbnMiLCJjb2RlIiwiaXNBcnJheSIsImNvbXAiLCJlZGl0b3JIaXN0b3J5IiwibGFzdEl0ZW0iLCJfU2FtcGxlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNhbXBsZSIsImhpc3RvcnkiLCJub1B1c2giLCJzZXRJdGVtIiwicHVzaEhpc3RvcnkiLCJlbWFpbCIsInNob3dNb2RhbCIsImxpc3QiLCJSZXNldFBhc3N3b3JkTW9kYWwiLCJ0aXRsZSIsImZvb3RlciIsInNob3ciLCJpdGVtcyIsImN1cnJlbnQiLCJjb252ZXJ0VG9TdHJpbmciLCJwcm9wZXJ0eSIsInRyaW0iLCJjb252ZXJ0VG9PYmplY3QiLCJydWxlIiwic2VsZWN0b3IiLCJwcm9wZXJ0aWVzIiwicyIsIkJvb2xlYW4iLCJkZWNsYXJhdGlvbnMiLCJydWxlVG9TdHJpbmciLCJkZWNsYXJhdGlvbiIsImdldE9iamVjdEZvcm1hdCIsImNvbnZlcnRUb1N0eWxlU3RyaW5nIiwicnVsZXMiLCJfcmVhY3RDb2RlbWlycm9yIiwiRWRpdG9yIiwiX3RoaXMyIiwic2F2ZUVsZW1lbnQiLCJzYXZlTmFtZSIsIlVuQ29udHJvbGxlZCIsImF1dG9DdXJzb3IiLCJsaW5lTnVtYmVycyIsIm1vZGUiLCJ0aGVtZSIsImluZGVudFdpdGhUYWJzIiwic21hcnRJbmRlbnQiLCJsaW5lV3JhcHBpbmciLCJlZGl0b3IiLCJfZ2V0Tm9kZVRyZWUiLCJFdmVudHMiLCJhc3NpZ24iLCJzZWxlY3RlZFRhZyIsIm5vZGVUcmVlIiwiZ2V0Tm9kZVRyZWUiLCJyZXN1bHQiLCJldmVudHNPZlNlbGVjdGVkVGFnIiwiY29uZmlndXJhdG9yIiwiZXZlbnROYW1lcyIsImNoaWxkQ29tcG9uZW50TmFtZSIsImNoaWxkQ29tcG9uZW50IiwicHVibGlzaGFibGVFdmVudCIsImV2ZW50TmFtZSIsIl9FdmVudDIiLCJzZWxlY3RlZFRhZ0lEIiwidXBkYXRlRXZlbnQiLCJkZWxldGVFdmVudCIsIl9Db25maWd1cmF0b3IyIiwidXBkYXRlQ29uZmlndXJhdGlvbiIsIl9Ob2RlczIiLCJub2RlIiwib25TZWxlY3RlZFRhZ0NoYW5nZWQiLCJzZWxlY3RlZFRhZ0NoYW5nZWQiLCJDb25maWd1cmF0b3IiLCJwYXJlbnROYW1lIiwidG9nZ2VsT3ZlcnJpZGUiLCJjaGVja2VkIiwiTm9kZXMiLCJjaGlsZCIsIkV2ZW50IiwidXBkYXRlUHVibGlzaE5hbWUiLCJjbGFzcyIsInVwZGF0ZUV2ZW50TmFtZSIsInVwZGF0ZUV2ZW50VHlwZSIsInB1Ymxpc2hFdmVudCIsImVsZW1lbnQiLCJjaGFuZ2VkRXZlbnRJbmRleCIsIm9uRXZlbnRzVXBkYXRlIiwib25Db25maWdVcGRhdGUiLCJqc3giLCJfZGVmaW5lUHJvcGVydHkiLCJQcmV2aWV3IiwiZGlzcGxheSIsInJhbmRvbUtleSIsInN3aXRjaFRhYmxldCIsInN3aXRjaE1vYmlsZSIsInN3aXRjaERlc2t0b3AiLCJfZGIiLCJBc3NldHMiLCJpbWFnZVVSTCIsInNlbGVjdGVkQXNzZXQiLCJ3cml0ZVRvREIiLCJmaWxlIiwiYmluIiwibmV3RmlsZSIsInNpemUiLCJpbWciLCJzcmMiLCJhc3NldE5hbWUiLCJfQXNzZXQyIiwic2VsZWN0ZWQiLCJvblNlbGVjdGVkIiwidXBkYXRlZFNlbGVjdGVkIiwiZmV0Y2hGcm9tREIiLCJBc3NldCIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWRlbmQiLCJiIiwiYXBwZW5kVG9Cb2R5IiwiaURCIiwiZ2V0IiwidGhlbiIsImhyZWYiLCJwdXQiLCJnZXRBbGwiLCJpbWFnZSIsIl9pbmRleCIsIkV4cG9ydCIsImV4cG9ydFR5cGUiLCJvbkV4cG9ydFR5cGVDaGFuZ2VkIiwib25FeHBvcnQiLCJFWFBPUlRfVFlQRSIsIl9sb2dDb2RlIiwibG9nQ29kZSIsIl9FeHBvcnRTZXBhcmF0ZSIsImV4cG9ydFNlcGFyYXRlRmlsZSIsInVuaXF1ZUNvbXBvbmVudHMiLCJnZXRVbmlxdWVDb21wb25lbnRzIiwiaW5kaXZpZHVhbENvbXBvbmVudHMiLCJ1cGRhdGVWYXJpYW50cyIsImNoaWxkcmVuSW1wb3J0cyIsImhlYWRlckltcG9ydHMiLCJyZW1vdmVQYXJhbnRoZXNpcyIsImluZGl2aWR1YWxTdG9yaWVzIiwiX1JlYWN0U3RvcmllcyIsImNvbnZlcnRUb1JlYWN0U3RvcmllcyIsIl96aXBGaWxlcyIsInppcEZpbGVzIiwiY29uY2F0IiwiU2V0IiwiY29tIiwiUmVhY3RTdG9yaWVzIiwiYXJyYXkiLCJ6aXAiLCJKU1ppcCIsImdlbmVyYXRlQXN5bmMiLCJfZG93bmxvYWRGaWxlIiwiZG93bmxvYWQiLCJibG9iIiwiZGxpbmsiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJvbmNsaWNrIiwidGhhdCIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJjbGljayIsImRvd25sb2FkRmlsZSIsIm1pbWVfdHlwZSIsIkJsb2IiLCJyZXZlcnNlIiwiSGlzdG9yeSIsInJlZnJlc2hUb1ByZXZpb3VzIiwiVmFyaWFudHMiLCJ2YXJpYW50VG9EZWxldGUiLCJvblVwZGF0ZSIsIl9WYXJpYW50MiIsImRlbGV0ZVZhcmlhbnQiLCJWYXJpYW50IiwiZGlzYWJsZWQiLCJDZW50ZXIiLCJCb3R0b20iLCJMZWZ0IiwiUmlnaHQiLCJpbm5lclRleHQiLCJ1cGRhdGVTZWxlY3RlZFRhYiIsIkNvbnRleHRNZW51Iiwib25NZXNzYWdlIiwicG9zaXRpb24iLCJuZXdFbGVtZW50cyIsImVsZW1lbnRzIiwidXBkYXRlQ29uZmlnIiwibmV3RWxlbWVudCIsImVsZW1lbnRFeGlzdCIsInNlbGVjdGVkSW5kZXgiLCJlbGVtZW50VW5kZXJFZGl0Iiwic2hvd0VkaXRvciIsInVwZGF0ZVNlbGVjdGVkQ29tcG9uZW50Iiwib25EZWxldGVDb21wb25lbnQiLCJjb250ZW50SW5kZXgiLCJvbkRlbGV0ZUZvbGRlciIsIlRZUEUiLCJfbm9Gb2xkZXIkY29udGVudHMiLCJub0ZvbGRlciIsImZvbGRlclRvRGVsZXRlIiwidXBkYXRlRm9sZGVycyIsIl9FdmVudHMzIiwiSW5kZXgiLCJzZWxlY3RlZFRhYiIsIm9ua2V5ZG93biIsImFsdEtleSIsImtleUNvZGUiLCJvcGVuUmlnaHQiLCJwcmV2aWV3Q29tcG9uZW50IiwiY29udGV4dE1lbnVDaGlsZHJlbiIsIm9wZW5FeHBvcnRUYWIiLCJleHRlbmRDb21wb25lbnQiLCJzaG93Q29udGV4dE1lbnUiLCJjb250ZXh0TWVudVBvc2l0aW9uIiwidG9wIiwiY2xpZW50WSIsImxlZnQiLCJjbGllbnRYIiwibWVzc2FnZSIsIm9uU2hvd0NvbnRleHRNZW51IiwiaGlkZUNvbnRleHRNZW51IiwiX0xlZnQyIiwiX0NvbXBvbmVudHMyIiwib3BlbkVkaXRvciIsIl9DZW50ZXIyIiwiX1ByZXZpZXcyIiwiX1JpZ2h0MiIsIl9FdmVudHMyIiwiX0hpc3RvcnkyIiwiX0Fzc2V0czIiLCJfRXhwb3J0MiIsIl9WYXJpYW50czIiLCJfQm90dG9tMiIsIl9FZGl0b3IyIiwiX0NvbnRleHRNZW51MiIsIm9uQ29udGV4dE1lbnVNZXNzYWdlIiwiUmVhY3RET00iLCJyZW5kZXIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6InlGQUFBLElBQUFBLEVBQUFDLEVBQUEsSUFFQUMsRUFBT0MsUUFBVSxDQUNiQyxTQUFVQSxXQUNWQyxVQUFXQSxZQUNYQyxjQUFlQSxnQkFDZkMsZUFBZ0JBLGlCQUNoQkMsV0FBWUEsZSxnRkMyRkFDLHVCQUFULFNBQWlDQyxHQUVwQ0EsRUFBaUJDLFFBQVEsU0FBU0MsR0FDakJBLEVBQVVDLE1BeEIvQixTQUF1QkQsSUEzQnZCLFNBQTBCRSxFQUFPQyxHQUc3QixHQUFHQyxPQUFPQyxPQUdOLEtBQU1ILEVBQU1JLFNBQVMsWUFBVyxDQUU1QixJQUFJQyxFQUFRTCxFQUFNTSxNQUFNLE1BQU0sR0FB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bEUsY0FBQytiLEVBQUE3WCxRQUFELEtBQ0lELEVBQUFDLFFBQUFsRSxjQUFBLFVBQVF3UyxNQUFNLGFBQVk5SyxRQUFTLGtCQUFNa0ksRUFBS3JJLFNBQVMsQ0FBRXVTLFlBQVksTUFBckUsaUJBSVIsS0FFUHBYLEtBQUszRCxNQUFNb2MsZ0JBQWdCbFgsRUFBQUMsUUFBQWxFLGNBQUN5YyxFQUFBdlksUUFBRCxDQUFhL0MsU0FBVXVCLEtBQUszRCxNQUFNaWMsb0JBQXFCMUIsU0FBVTVXLEtBQUszRCxNQUFNcWMsb0JBQXFCL0IsVUFBVzNXLEtBQUtnYSxxQkFBcUJyWSxLQUFLM0IsUUFBUyxVLEtBS2hNUixRQUFRdUIsSUFBSSxvREFDWmtaLFVBQVNDLE9BQU8zWSxFQUFBQyxRQUFBbEUsY0FBQ3lhLEVBQUQsTUFBVzlhLFNBQVNrZCxlQUFlIiwiZmlsZSI6InNyYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVhZERhdGEsIHdyaXRlRGF0YSwgd3JpdGVDb21wb25lbnQsIHJlYWRDb21wb25lbnQsIHBvcEhpc3RvcnkgfSBmcm9tIFwiLi9sb2NhbFN0b3JhZ2VcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVhZERhdGE6IHJlYWREYXRhLFxuICAgIHdyaXRlRGF0YTogd3JpdGVEYXRhLFxuICAgIHJlYWRDb21wb25lbnQ6IHJlYWRDb21wb25lbnQsXG4gICAgd3JpdGVDb21wb25lbnQ6IHdyaXRlQ29tcG9uZW50LFxuICAgIHBvcEhpc3Rvcnk6IHBvcEhpc3Rvcnlcbn0iLCIvLyBEZXBlbmRlbmNpZXMuXG5cbmltcG9ydCB7Y3JlYXRlQ29tcG9uZW50fSBmcm9tIFwiLi4vY3JlYXRlLWNvbXBvbmVudFwiO1xuaW1wb3J0IHtyZWFkRGF0YSwgd3JpdGVEYXRhfSBmcm9tIFwiLi4vU3RvcmFnZVwiO1xuaW1wb3J0IHtnZXRPYmplY3RGb3JtYXQsIGNvbnZlcnRUb1N0eWxlU3RyaW5nfSBmcm9tIFwiLi4vQ29tcG9uZW50cy9TdHlsZUV4cGxvcmVyL1N0eWxlXCI7XG5cbi8qKlxuICogU3RvcmUgY29tcG9uZW50IHN0YXRlIGFzIHZhcmlhbnRzLiBCZWNhdXNlIHZhcmlhbnRzIGFyZSB2aXN1YWxseSBkaWZmZXJlbnQgZm9ybSBvZiBhIGNvbXBvbmVudC5cbiAqIFNpbmNlIHZpc3VhbGx5IGRpZmZlcmVudCBmb3JtcyBhcmUgZHJpdmVuIGJ5IHRoZSBzdGF0ZSwgaXRzIHNpbXBsZSB0byBqdXN0IGtlZXAgdHJhY2sgb2YgdGhlIHN0YXRlcy5cbiAqL1xud2luZG93LnNhdmVWYXJpYW50ID0gZnVuY3Rpb24gc2F2ZVZhcmlhbnQoY29tcG9uZW50TmFtZSwgc3RhdGUpIHtcbiAgICAvLyAxLiBSZWFkIGFsbCBjb21wb25lbnRzLlxuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgLy8gMi4gRmluZCB0aGUgcGFzc2VkIGNvbXBvbmVudC5cbiAgICBsZXQgY29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWUuaW5jbHVkZXMoY29tcG9uZW50TmFtZSkpO1xuICAgIC8vIDMuIEZldGNoIHRoZSBzdGF0ZXN0YXRlLlxuICAgIGxldCBjb21wb25lbnRTdGF0ZSA9IEpTT04ucGFyc2UoY29tcG9uZW50LnN0YXRlKTtcbiAgICAvLyA0LiBUaHJvdyBlcnJvciBpZiBjb21wb25lbnQgZG9lc250IGNvbnRhaW4gYSB2YXJpYW50IHByb3BlcnR5XG4gICAgaWYoY29tcG9uZW50U3RhdGUudmFyaWFudD09PSB1bmRlZmluZWQgfHwgc3RhdGUudmFyaWFudCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFkZCBhIHZhcmlhbnQgcHJvcGVydHkgd2l0aCBhIHRleHQgdmFsdWVcIilcbiAgICB9XG4gICAgLy8gNS4gQ3JlYXRlIGEgbmV3IHZhcmlhbnQuXG4gICAgY29tcG9uZW50LnZhcmlhbnRzID0gY29tcG9uZW50LnZhcmlhbnRzIHx8IFt7XG4gICAgICAgIG5hbWU6IGNvbXBvbmVudFN0YXRlLnZhcmlhbnQsXG4gICAgICAgIHN0YXRlOiBjb21wb25lbnRTdGF0ZVxuICAgIH1dO1xuICAgIC8vIDYuIHB1c2ggc3RhdGUgaW50byBjb21wb25lbnQudmFyaWFudCBpZiBpdCBpcyBuZXdcbiAgICBpZighY29tcG9uZW50LnZhcmlhbnRzLmZpbmQodmFyaWFudD0+dmFyaWFudC5uYW1lPT09c3RhdGUudmFyaWFudCkpe1xuICAgICAgICBjb21wb25lbnQudmFyaWFudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBzdGF0ZS52YXJpYW50LFxuICAgICAgICAgICAgc3RhdGU6c3RhdGVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIDcuIHBlcnNpc3QuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yXCIsIGNvbXBvbmVudHMpXG59O1xuXG4vKipcbiAqIFxuICogQXNzZXQgaW4gc3R5bGUgc2hlZXQgc3ludGF4IC0gJGFzc2V0XG4gKi9cblxuIGZ1bmN0aW9uIHNjb3BlU2VsZWN0b3Moc3R5bGUsbmFtZSl7XG4gICAgbGV0IGRlY2xhcmF0aW9ucyA9IGdldE9iamVjdEZvcm1hdChzdHlsZSk7XG4gICAgZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbGFyYXRpb249PntcbiAgICAgICAgZGVjbGFyYXRpb24uc2VsZWN0b3IgPSBgLiR7bmFtZX0gJHtkZWNsYXJhdGlvbi5zZWxlY3Rvcn1gXG4gICAgfSlcbiAgICByZXR1cm4gY29udmVydFRvU3R5bGVTdHJpbmcoZGVjbGFyYXRpb25zKTtcbiB9XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlc2hlZXQoc3R5bGUsIG5hbWUpIHtcblxuICAgIC8vIGNoZWNrIGlmIHdpbmRvdyBoYXMgJGFzc2V0cyBcbiAgICBpZih3aW5kb3cuYXNzZXRzKXtcblxuICAgICAgICAvLyBDaGVjayBpZiBzdHlsZSBoYXMgJGFzc2V0c1xuICAgICAgICB3aGlsZShzdHlsZS5pbmNsdWRlcyhcIiRhc3NldHNcIikpe1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBpdCB3aXRoIGFzc2V0IGJsb2IgdXJsXG4gICAgICAgICAgICBsZXQgYXNzZXQgPSBzdHlsZS5zcGxpdChcIlsnXCIpWzFdLnNwbGl0KGBdYClbMF0uc3BsaXQoXCJcIik7XG4gICAgICAgICAgICBhc3NldC5wb3AoKTtcbiAgICAgICAgICAgIGFzc2V0ID0gIGFzc2V0LmpvaW4oXCJcIik7XG4gICAgICAgICAgICBzdHlsZSA9IHN0eWxlLnJlcGxhY2UoYCRhc3NldHNbJyR7YXNzZXR9J11gLCBgdXJsKCR7d2luZG93LmFzc2V0c1thc3NldF19KWApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdG9EZWxldGUgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtY29tcG9uZW50LW5hbWU9JyR7bmFtZX0nXWApXTtcbiAgICB0b0RlbGV0ZS5mb3JFYWNoKGl0ZW09PntcbiAgICAgICAgaXRlbS5yZW1vdmUoKVxuICAgIH0pXG4gICAgdmFyIGR5bmFtaWNTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgZHluYW1pY1N0eWxlLnNldEF0dHJpYnV0ZShcImRhdGEtY29tcG9uZW50LW5hbWVcIiwgbmFtZSk7XG4gICAgZHluYW1pY1N0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgIGR5bmFtaWNTdHlsZS5pbm5lckhUTUwgPSBzdHlsZTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR5bmFtaWNTdHlsZSlcbn1cblxuLyoqIFRha2VzIGEgY29tcG9uZW50IGFuZCBjb252ZXJ0cyBpdCBhcyBhIHJlYWN0IGNvbXBvbmVudCAqL1xuZnVuY3Rpb24gc2F2ZVRvV2luZG93KCBjb21wb25lbnQgKSB7XG4gICAgY3JlYXRlU3R5bGVzaGVldChjb21wb25lbnQuc3R5bGUsIGNvbXBvbmVudC5uYW1lKVxuICAgIHdpbmRvd1tjb21wb25lbnQubmFtZV0gPSBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tOZXN0ZWRDb21wb25lbnRzKCBtYXJrdXApIHtcblxuICAgIHZhciBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG5cbiAgICByZXR1cm4gY29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50PT4gbWFya3VwLmluY2x1ZGVzKGNvbXBvbmVudC5uYW1lKSkubGVuZ3RoID4wO1xufVxuXG5mdW5jdGlvbiBoYXNBc3NldHMoKXtcblxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQoKXtcbiAgICBcbn1cblxuLyoqIFRha2VzIGNvbXBvbmVudHMgYW5kIHNhdmVzIHRoZW0gdG8gd2luZG93IGFzIHJlYWN0IE9iamVjdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhdmVDb21wb25lbnRzVG9XaW5kb3coIG5lc3RlZENvbXBvbmVudHMpe1xuICAgIC8vIFRyYW5zcGlsZSB0aGVtIGFuZCBtYWtlIHRoZW0gZ2xvYmFsLlxuICAgIG5lc3RlZENvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgICBpZihoYXNBc3NldHMoY29tcG9uZW50LnN0YXRlKSl7XG4gICAgICAgICAgICByZXNvbHZlQXNzZXQoY29tcG9uZW50KVxuICAgICAgICB9XG4gICAgICAgIHNhdmVUb1dpbmRvdyhjb21wb25lbnQpXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZHJlbiAocGFyZW50KXtcbiAgICBsZXQgY29tcG9uZW50cz0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgaWYoY2hlY2tOZXN0ZWRDb21wb25lbnRzKHBhcmVudC5tYXJrdXApKXtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gY29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50PT4gcGFyZW50Lm1hcmt1cC5pbmNsdWRlcyhjb21wb25lbnQubmFtZSkpLm1hcChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gW107XG59XG5cbi8qKiBUYWtlcyBtYXJrdXAgYW5kIHJldHVybnMgY2hpbGRyZW4gY29tcG9uZW50IG9iamVjdHMuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmVzdGVkQ29tcG9uZW50cyAocGFyZW50KSB7XG4gICAgLy8gU2hvdWxkIGJlIGFibGUgdG8gZGV0ZWN0IG5lc3RlZCBjb21wb25lbnQuXG5cbiAgICBsZXQgY29tcG9uZW50cz0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBbcGFyZW50XTtcbiAgICBpZihjaGVja05lc3RlZENvbXBvbmVudHMocGFyZW50Lm1hcmt1cCkpe1xuICAgICAgICAvLyBmaW5kIGFsbCB0aGUgbmVzdGVkIGNvbXBvbmVudHMgZnJvbSB0aGUgbWFya3VwIGFuZCBwdXNoIGl0IHRvIG5lc3RlZENvbXBvbmVudHMuXG4gICAgICAgIGxldCBjaGlsZHJlbiA9IGNvbXBvbmVudHMuZmlsdGVyKGNvbXBvbmVudD0+IHBhcmVudC5tYXJrdXAuaW5jbHVkZXMoY29tcG9uZW50Lm5hbWUpKTtcbiAgICAgICAgLy8gRmluZCBncmFuZCBraWRzLlxuICAgICAgICBsZXQgZ3JhbmRLaWRzID0gY2hpbGRyZW4ubWFwKGdldE5lc3RlZENvbXBvbmVudHMpLmZsYXQoMylcbiAgICAgICAgbmVzdGVkQ29tcG9uZW50cy5wdXNoKC4uLmdyYW5kS2lkcylcbiAgICB9XG4gICAgcmV0dXJuIG5lc3RlZENvbXBvbmVudHMuZmlsdGVyKGNvbXBvbmVudD0+Y29tcG9uZW50ICYmIGNvbXBvbmVudC5tYXJrdXApO1xufVxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIFV0aWxpdGllcy5cblxuaW1wb3J0IHsgaW5zZXJ0RGlyZWN0aW9uIH0gZnJvbSBcIi4vVXRpbGl0eVwiO1xuXG4vLyBSdW50aW1lIHV0aWxpdGllcy5cblxuaW1wb3J0IHvCoGdldE5lc3RlZENvbXBvbmVudHMsIHNhdmVDb21wb25lbnRzVG9XaW5kb3cgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL1J1bnRpbWVcIjtcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jbGFzcyBEeW5hbWljQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAgZHJhZ092ZXJIYW5kbGVyKGUpe1xuXG4gICAgICAgIC8qKiBpZiBpdCBjb250YWlucyAuY29udGVudCBhcmVhIGhpbnQgaXQgZ3JlZW4gZWxzZSBoaW50IHJlZCovXG4gICAgICAgIGxldCBkcm9wQXJlYSA9IGUuY3VycmVudFRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnRcIik7XG4gICAgICAgIGlmKCFkcm9wQXJlYSl7XG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiaGludE5vRHJvcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjb250ZW50XCIpKXtcbiAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJoaW50RHJhZ092ZXJcIik7XG4gICAgICAgICAgICBpZihlLnRhcmdldC5jaGlsZHJlbi5sZW5ndGg+MSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJZRVNcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBkcm9wQ29tcG9uZW50KGUpe1xuICAgICAgICBsZXQgY29tcG9uZW50TmFtZSA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJjb21wb25lbnQtbmFtZVwiKTtcbiAgICAgICAgbGV0IHBhcmVudENvbXBvbmVudCA9IHRoaXMuc3RhdGUuY29tcG9uZW50O1xuICAgICAgICBsZXQgY29tcG9uZW50VGFnID0gYDwke2NvbXBvbmVudE5hbWV9PjwvJHtjb21wb25lbnROYW1lfT5gXG4gICAgICAgIHBhcmVudENvbXBvbmVudC5tYXJrdXAgPSBwYXJlbnRDb21wb25lbnQubWFya3VwLnJlcGxhY2UoJ2NvbnRlbnRcIj4nLCdjb250ZW50XCI+Jytjb21wb25lbnRUYWcpXG4gICAgICAgIHRoaXMucHJvcHMub25TYXZlKHBhcmVudENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGlmKHRoaXMuc3RhdGUuY29tcG9uZW50Lm5hbWU9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgcmV0dXJuICg8cD5ObyBjb21wb25lbnQgc2VsZWN0ZWQuPC9wPilcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmVzdGVkQ29tcG9uZW50cyA9IGdldE5lc3RlZENvbXBvbmVudHModGhpcy5zdGF0ZS5jb21wb25lbnQpO1xuICAgICAgICBpZiAobmVzdGVkQ29tcG9uZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzYXZlQ29tcG9uZW50c1RvV2luZG93KG5lc3RlZENvbXBvbmVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIXdpbmRvd1t0aGlzLnN0YXRlLmNvbXBvbmVudC5uYW1lXSl7XG4gICAgICAgICAgICByZXR1cm4gKDxkaXY+PC9kaXY+KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgIFxuICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI9eyB0aGlzLmRyYWdPdmVySGFuZGxlci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgIG9uRHJvcD17dGhpcy5kcm9wQ29tcG9uZW50LmJpbmQodGhpcyl9PlxuICAgICAgICAgICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KHdpbmRvd1t0aGlzLnN0YXRlLmNvbXBvbmVudC5uYW1lXSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRHluYW1pY0NvbXBvbmVudDsiLCIvLyBFbGVtZW50cyB0byAgcmVhY3QgY29tcG9uZW50LlxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1JlYWN0IChjb21wb25lbnQpe1xuXG4gICAgbGV0IG1hcmt1cCA9IFwibWFya3VwXCI7XG5cbiAgICBjb21wb25lbnQuZXZlbnRzLmZvckVhY2goZXZlbnQ9PntcbiAgICAgICAgZXZlbnQuaWQgPSBldmVudC5pZC5yZXBsYWNlKFwiLVwiLFwiXCIpO1xuICAgIH0pXG5cbiAgICBsZXQgYWRkUHJvcHM9IChjb21wb25lbnQpPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnRbbWFya3VwXS5yZXBsYWNlKFwiPlwiLGAgey4uLnRoaXMucHJvcHN9Pnt0aGlzLnByb3BzLmNoaWxkcmVufWApXG4gICAgfVxuXG4gICAgbGV0IGdldENvbXBvbmVudEV2ZW50ZWRNYXJrdXAgPSAobWFya3VwLCBldmVudHMpPT57XG4gICAgICAgIGV2ZW50cy5mb3JFYWNoKGV2ZW50PT57XG4gICAgICAgICAgICBsZXQgaWQgPSBgaWQ9XCIke2V2ZW50LmlkfVwiYDtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG1hcmt1cCBjb250YWlucyB0aGUgaWQuXG4gICAgICAgICAgICBpZihtYXJrdXAuaW5jbHVkZXMoaWQpKXtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSBtYXJrdXAucmVwbGFjZShpZCwgYCR7aWR9ICR7ZXZlbnQubmFtZX09e3RoaXMuJHtldmVudC5pZCtldmVudC5uYW1lfS5iaW5kKHRoaXMpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaXRzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSBtYXJrdXAucmVwbGFjZShgPCR7ZXZlbnQuaWR9YCxgPCR7ZXZlbnQuaWR9ICR7ZXZlbnQubmFtZX09e3RoaXMuJHtldmVudC5pZCtldmVudC5uYW1lfS5iaW5kKHRoaXMpfWApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICByZXR1cm4gbWFya3VwLnNwbGl0KFwie3N0YXRlLlwiKS5qb2luKFwie3RoaXMuc3RhdGUuXCIpXG4gICAgfVxuXG4gICAgLy8gY2hlY2tzIGlmIHN0YXRlIG92ZXJyaWRlIGlzIG9uLiB0aGVuIGFkZHMgc3RhdGUgcHJvcCB0byBjaGlsZCBcbiAgICBsZXQgZ2V0U3RhdGVkTWFya3VwID0gKG1hcmt1cCk9PntcbiAgICAgICAgLy8gZm9yIGFsbCB0aGUgY29uZmlnLlxuICAgICAgICAvLyBmaWx0ZXIgY2hpbGQgd2l0aCBvdmVyaWRlIHN0YXRlIGlzIHRydWVcbiAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoY29tcG9uZW50LmNvbmZpZyk7XG4gICAgICAgIGxldCBjaGlsZHJlbkNvbmZpZyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7XG4gICAgICAgIGNoaWxkcmVuQ29uZmlnLmZvckVhY2goY2hpbGROYW1lPT57XG5cbiAgICAgICAgICAgIC8vIFBSRUNBVVRJT046IEVkaXQgbWFya3VwIGZvciByZW5kZXJpbmcgbGlzdC4gU2hvdWxkIG5vdCB1c2Ugb3RoZXIgY29uZmlndXJhdGlvbiB3aGlsZSB1c2luZyB0aGlzLlxuICAgICAgICAgICAgaWYoY29uZmlnW2NoaWxkTmFtZV0ub3ZlcnJpZGUgKXtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRNYXJrdXAgPSBgPCR7Y2hpbGROYW1lfT48LyR7Y2hpbGROYW1lfT5gO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkTWFya3VwV2l0aFByb3BzID0gYDwke2NoaWxkTmFtZX0gc3RhdGU9e2l0ZW19IGtleT17aX0+PC8ke2NoaWxkTmFtZX0+YDtcbiAgICAgICAgICAgICAgICBsZXQgcmVuZGVyTGlzdE1hcmt1cCA9IGB7dGhpcy5zdGF0ZS4ke2NoaWxkTmFtZX0ubWFwKChpdGVtLGkpPT4ke2NoaWxkTWFya3VwV2l0aFByb3BzfSl9YDtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSAgbWFya3VwLnJlcGxhY2UoY2hpbGRNYXJrdXAsIHJlbmRlckxpc3RNYXJrdXApOyAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gbWFya3VwO1xuICAgIH1cblxuICAgIC8vIGtlZXAgc2F2aW5nIHZhcmlhbnQgaW4gYnJvd3NlciwgYnV0IG5vdCBmb3IgY29kZSBleHBvcnRzLlxuICAgIGxldCBnZXRTYXZlVmFyaWFudCA9ICgpPT57XG4gICAgICAgIGlmKHdpbmRvdy5zYXZlVmFyaWFudCl7XG4gICAgICAgICAgICByZXR1cm4gYHdpbmRvdy5zYXZlVmFyaWFudChcIiR7Y29tcG9uZW50Lm5hbWV9XCIsc3RhdGUpYFxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGxldCBwcm9wc0luTWFya3VwID0gYWRkUHJvcHMoY29tcG9uZW50KTtcbiAgICBsZXQgc3RhdGVPdmVyaWRlTWFya3VwID0gZ2V0U3RhdGVkTWFya3VwKHByb3BzSW5NYXJrdXApO1xuICAgIGxldCBjb21wb25lbnRFdmVudGVkTWFya3VwID0gZ2V0Q29tcG9uZW50RXZlbnRlZE1hcmt1cChzdGF0ZU92ZXJpZGVNYXJrdXAsIGNvbXBvbmVudC5ldmVudHMpO1xuICAgIGxldCBzYXZlVmFyaWFudCA9IGdldFNhdmVWYXJpYW50KCk7XG4gICAgXG4gICAgbGV0IFJlYWN0Q29tcG9uZW50ID0gXG5gKFxuY2xhc3MgJHtjb21wb25lbnQubmFtZX0gZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5wcm9wcy5zdGF0ZSB8fCAke2NvbXBvbmVudC5zdGF0ZX07XG5cbiAgICAgICAgdmFyIGR5bmFtaWNTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIGR5bmFtaWNTdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgZHluYW1pY1N0eWxlLmlubmVySFRNTCA9IFxcYCR7Y29tcG9uZW50LnN0eWxlfVxcYDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkeW5hbWljU3R5bGUpXG4gICAgfVxuXG4gICAgJHtjb21wb25lbnQuZXZlbnRzLm1hcChldmVudD0+e1xuICAgICAgICBpZihldmVudC5wdWJsaXNoYWJsZSl7XG4gICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgXG4gICAgJHtldmVudC5pZCtldmVudC5uYW1lfSAoZSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKVxuICAgICAgICAke2V2ZW50LnJlZHVjZXJ9XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICAgICAgZS5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnByb3BzLiR7ZXZlbnQucHVibGlzaE5hbWV9PyB0aGlzLnByb3BzLiR7ZXZlbnQucHVibGlzaE5hbWV9KGUpOm51bGw7XG4gICAgfWBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgXG4gICAgJHtldmVudC5pZCtldmVudC5uYW1lfSAoZSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKVxuICAgICAgICAke2V2ZW50LnJlZHVjZXJ9XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAke3NhdmVWYXJpYW50fVxuICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9XG5gXG4gICAgfSkuam9pbihcIlxcblwiKX1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICgke2NvbXBvbmVudEV2ZW50ZWRNYXJrdXB9KVxuICAgIH1cbn0pXG5gXG4gICAgcmV0dXJuIFJlYWN0Q29tcG9uZW50O1xufVxuIiwibGV0IGZvbGRlckZvdW5kID0gXCJcIjtcbmxldCBwYXJlbnRGb2xkZXIgPSBcIlwiO1xubGV0IGZvbGRlclBhcmVudEZvbGRlciA9IFwiXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFyZW50KGNvbXBvbmVudE5hbWUsIGZvbGRlcil7XG5cbiAgICBsZXQgY29udGVudHMgPSBmb2xkZXIuY29udGVudHM7XG5cbiAgICBmb3IobGV0IGk9MDtpPCBjb250ZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBjb250ZW50ID0gY29udGVudHNbaV07XG4gICAgICAgIGlmKGNvbXBvbmVudE5hbWU9PT1jb250ZW50KXtcbiAgICAgICAgICAgIHBhcmVudEZvbGRlciA9IGZvbGRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZih0eXBlb2YgY29udGVudCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgICAgICBmaW5kUGFyZW50KGNvbXBvbmVudE5hbWUsIGNvbnRlbnQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50Rm9sZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFBhcmVudEZvbGRlcihmb2xkZXJOYW1lLCBmb2xkZXIpe1xuICAgIFxuICAgIGxldCBjb250ZW50cyA9IGZvbGRlci5jb250ZW50cztcblxuICAgIGZvcihsZXQgaT0wO2k8IGNvbnRlbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBjb250ZW50c1tpXTtcblxuICAgICAgICBpZih0eXBlb2YgY29udGVudCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgICAgICBpZihjb250ZW50Lm5hbWUgPT09IGZvbGRlck5hbWUpe1xuICAgICAgICAgICAgICAgIGZvbGRlclBhcmVudEZvbGRlcj0gZm9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluZFBhcmVudEZvbGRlcihmb2xkZXJOYW1lLCBjb250ZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvbGRlclBhcmVudEZvbGRlcjtcbn1cblxuLy8gR2l2ZW4gZm9sZGVycyBhbmQgYSBmb2xkZXJuYW1lLCBmaW5kcyBhIGZvbGRlciBhbmQgcmV0dXJucyBpdC5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRm9sZGVyKGZvbGRlck5hbWUgLCBmb2xkZXIgKXtcblxuICAgIC8vIFJldHVybiBlYXJseSBpZiB0eXBlIGlzIHN0cmluZy5cbiAgICBpZih0eXBlb2YgZm9sZGVyID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIGZvbGRlciA9PT0gXCJvYmplY3RcIil7XG5cbiAgICAgICAgLy8gUmV0dXJuIGZvbGRlciBpZiBuYW1lIG1hdGNoZXMuXG4gICAgICAgIGlmKGZvbGRlci5uYW1lPT09Zm9sZGVyTmFtZSl7XG4gICAgICAgICAgICBmb2xkZXJGb3VuZCA9IGZvbGRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250ZW50cyA9IGZvbGRlci5jb250ZW50cztcblxuICAgICAgICBmb3IobGV0IGk9MDtpPCBjb250ZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGNvbnRlbnRzW2ldO1xuICAgICAgICAgICAgZmluZEZvbGRlcihmb2xkZXJOYW1lLCBjb250ZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvbGRlckZvdW5kO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgICBjb2xvcjogI2Q5ZDlkOTtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJOdW5pdG8gU2Fuc1xcXCIsLWFwcGxlLXN5c3RlbSxcXFwiLlNGTlNUZXh0LVJlZ3VsYXJcXFwiLFxcXCJTYW4gRnJhbmNpc2NvXFxcIixCbGlua01hY1N5c3RlbUZvbnQsXFxcIlNlZ29lIFVJXFxcIixcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbiAgICBtYXJnaW46IDBweDtcXG59XFxuXFxubGkgLCBsYWJlbCwgcCwgLnJ1bGVzICwgaW5wdXQsIHRleHRhcmVhe1xcbiAgICBmb250LXNpemU6IDlweDtcXG59XFxuXFxuaW5wdXQsIHRleHRhcmVhIHsgXFxuICAgIGJhY2tncm91bmQ6ICMyYjJiMmI7XFxuICAgIGNvbG9yOiAjZDlkOWQ5O1xcbiAgICBvcGFjaXR5OiAwLjc1O1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0ge1xcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRhcmVhO1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwwLDAsMC45KTtcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIHBhZGRpbmc6IDdweDtcXG59XFxuXFxudWwgbGFiZWwgaW5wdXQge1xcbiAgICB3aWR0aDogMTBweDtcXG59XFxuXFxudWwsIGxpIHtcXG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxuICAgIG1hcmdpbi10b3A6IDBweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMHB4O1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwwLDAsMC45KTtcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG4gICAgbWFyZ2luLWxlZnQ6IDRweDtcXG59XFxuXFxuYnV0dG9uIGl7XFxuICAgIHBhZGRpbmctcmlnaHQ6NHB4O1xcbn1cXG5cXG5idXR0b246aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZDogcmdiKDQzLCA0MywgNDMpO1xcbn1cXG5cXG51bCxsaSwgdWwgbGFiZWwge1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbn1cXG5cXG51bCBsYWJlbDpob3ZlciwgbGk6aG92ZXIsIC5jb250ZW50OmhvdmVye1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZDogcmdiKDQzLCA0MywgNDMpO1xcbn1cXG5cXG4jaW5kZXh7XFxuICAgIG1hcmdpbjotNHB4O1xcbn1cXG5cXG4uQ29kZU1pcnJvciB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICBtYXJnaW4tdG9wOjVweDtcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzLlxuXG5pbXBvcnQgRm9sZGVycyBmcm9tIFwiLi4vVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVyc1wiO1xuXG5cbmNsYXNzIENvbXBvbmVudHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IHRoaXMucHJvcHMuY29tcG9uZW50cyxcbiAgICAgICAgICAgIGZvbGRlcnM6IHRoaXMucHJvcHMuZm9sZGVycyxcbiAgICAgICAgICAgIHNob3dDb250cm9sczogdGhpcy5wcm9wcy5zaG93Q29udHJvbHNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhZGRGb2xkZXIoKSB7XG4gICAgICAgIGxldCBmb2xkZXJzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmZvbGRlcnMpO1xuICAgICAgICBmb2xkZXJzLnVuc2hpZnQoe1xuICAgICAgICAgICAgdHlwZTogXCJOZXdGb2xkZXJcIixcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICBjb250ZW50czogW10sXG4gICAgICAgICAgICBzdGF0dXM6IFwiY2xvc2VkXCJcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZvbGRlcnMgfSlcbiAgICB9XG5cbiAgICBhZGRDb21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25PcGVuRWRpdG9yKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgZWxlbWVudHMtdGFiXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICBDb21wb25lbnRzXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJDb250cm9sc1wiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkQ29tcG9uZW50LmJpbmQodGhpcyl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWVkaXRcIj48L2k+e3Byb3BzLnNlbGVjdGVkQ29tcG9uZW50ID8gXCJFZGl0XCIgOiBcIkFkZFwifTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkRm9sZGVyLmJpbmQodGhpcyl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWZvbGRlclwiPjwvaT5Gb2xkZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvbGRlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPEZvbGRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHM9e3N0YXRlLmNvbXBvbmVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJzPXtzdGF0ZS5mb2xkZXJzfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb21wb25lbnQ9e3Byb3BzLnNlbGVjdGVkQ29tcG9uZW50fVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZvbGRlcnNVcGRhdGU9e3Byb3BzLm9uRm9sZGVyc1VwZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uPXtwcm9wcy5vblNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50cztcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm92ZXJyaWRlIHtcXG4gICAgbGluZS1oZWlnaHQ6IDAlO1xcbn1cXG5cXG50ZXh0YXJlYSB7XFxuICAgIGhlaWdodDogNzBweDtcXG4gICAgd2lkdGg6IDQ1MHB4O1xcbn1cXG5cXG4udGl0bGV7XFxuICAgIG1hcmdpbi10b3A6IDE1cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDExcHg7XFxuICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIGJhY2tncm91bmQ6IHJnYig2NCwgNjQsIDY0KTtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBmb250LXNpemU6IDEycHg7XFxufVxcblxcbi5lbGVtZW50cy10YWIge1xcbiAgICBsZWZ0OjBweDtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgd2lkdGg6MTkwcHg7O1xcbn1cXG5cXG4uZm9sZGVyc3tcXG4gICAgb3ZlcmZsb3c6IHNjcm9sbDsgIFxcbiAgICBoZWlnaHQ6ODV2aDtcXG59XFxuXFxuLkNvbnRyb2xze1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjJzIGVhc2UtaW47XFxufVxcblxcbi5oaWRlQ29udHJvbHN7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjVzIGVhc2UtaW4tb3V0O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG4vLyBVdGlsaXRpZXMuXG5cbmltcG9ydCB7IGZpbmRGb2xkZXIgfSBmcm9tIFwiLi9maW5kRm9sZGVyc1wiO1xuXG4vLyBTdHlsZXMuXG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbmltcG9ydCB7IGZvbGRlclN0cnVjdHVyZSB9IGZyb20gXCIuL3Byb2Nlc3NGb2xkZXJcIjtcblxuY2xhc3MgRm9sZGVycyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tcG9uZW50czogdGhpcy5wcm9wcy5jb21wb25lbnRzLFxuICAgICAgICAgICAgZm9sZGVyczogdGhpcy5wcm9wcy5mb2xkZXJzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVtb3ZlRm9sZGVyRnJvbVBhcmVudChmb2xkZXJzLCBvbGRQYXJlbnQsIGNvbnRlbnROYW1lKSB7XG4gICAgICAgIGxldCBvbGRQYXJlbnRGb2xkZXIgPSBmaW5kRm9sZGVyKG9sZFBhcmVudCAsIGZvbGRlcnNbMF0gKVxuICAgICAgICBsZXQgZGVsZXRlSW5kZXggPSBvbGRQYXJlbnRGb2xkZXIuY29udGVudHMuZmluZEluZGV4KGNvbnRlbnQ9PnR5cGVvZiBjb250ZW50ID09PSBcIm9iamVjdFwiICYmIGNvbnRlbnQubmFtZT09PWNvbnRlbnROYW1lKTtcbiAgICAgICAgaWYoZGVsZXRlSW5kZXg+LTEpXG4gICAgICAgICAgICBvbGRQYXJlbnRGb2xkZXIuY29udGVudHMuc3BsaWNlKGRlbGV0ZUluZGV4LDEpXG4gICAgfVxuXG4gICAgcmVtb3ZlQ29udGVudEZyb21QYXJlbnQoZm9sZGVycywgb2xkUGFyZW50LCBjb250ZW50TmFtZSkge1xuICAgICAgICBsZXQgb2xkUGFyZW50Rm9sZGVyID0gZmluZEZvbGRlcihvbGRQYXJlbnQgLCBmb2xkZXJzWzBdIClcbiAgICAgICAgbGV0IHJlbW92ZUluZGV4ID0gb2xkUGFyZW50Rm9sZGVyLmNvbnRlbnRzLmZpbmRJbmRleChjb250ZW50PT5jb250ZW50PT09Y29udGVudE5hbWUpXG4gICAgICAgIGlmKHJlbW92ZUluZGV4IT09LTEpXG4gICAgICAgICAgICBvbGRQYXJlbnRGb2xkZXIuY29udGVudHMuc3BsaWNlKHJlbW92ZUluZGV4LDEpXG4gICAgfVxuXG5cbiAgICBvbkZvbGRlclVwZGF0ZShkYXRhLCB0eXBlLCBvbGRQYXJlbnQsIGNvbnRlbnQpIHtcbiAgICAgICAgbGV0IGZvbGRlcnMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuZm9sZGVycyk7XG4gICAgICAgIGxldCBuZXdQYXJlbnQgPSBkYXRhLm5hbWU7XG4gICAgICAgIGxldCBmb2xkZXIgPSBmaW5kRm9sZGVyKG5ld1BhcmVudCwgZm9sZGVyc1swXSlcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJORVdGT0xERVJcIikge1xuICAgICAgICAgICAgbGV0IGVtcHR5Rm9sZGVySW5kZXggPSBmb2xkZXJzLmZpbmRJbmRleChmb2xkZXIgPT4gZm9sZGVyLnR5cGUgPT09IFwiTmV3Rm9sZGVyXCIpO1xuICAgICAgICAgICAgaWYgKGVtcHR5Rm9sZGVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSBuZXdGb2xkZXJcbiAgICAgICAgICAgICAgICBmb2xkZXJzLnNwbGljZShlbXB0eUZvbGRlckluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG5vRm9sZGVyID0gZm9sZGVyc1swXTtcbiAgICAgICAgICAgIG5vRm9sZGVyLmNvbnRlbnRzLnVuc2hpZnQoZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PSBcIkNPTVBPTkVOVFwiKSB7XG4gICAgICAgICAgICBmb2xkZXIuY29udGVudHMgPSBkYXRhLmNvbnRlbnRzO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDb250ZW50RnJvbVBhcmVudChmb2xkZXJzLCBvbGRQYXJlbnQsIGNvbnRlbnQpXG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09IFwiRk9MREVSXCIpIHtcbiAgICAgICAgICAgIGZvbGRlci5jb250ZW50cyA9IGRhdGEuY29udGVudHM7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZvbGRlckZyb21QYXJlbnQoZm9sZGVycywgb2xkUGFyZW50LCBjb250ZW50LCBuZXdQYXJlbnQpXG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3BzLm9uRm9sZGVyc1VwZGF0ZShmb2xkZXJzKTtcblxuICAgIH1cblxuICAgIG9uRm9sZGVyU3RhdHVzQ2hhbmdlZChmb2xkZXIpe1xuICAgICAgICAvLyBmaW5kIGZvbGRlcixcbiAgICAgICAgbGV0IGZvbGRlclRvVXBkYXRlID0gZmluZEZvbGRlcihmb2xkZXIubmFtZSwgdGhpcy5zdGF0ZS5mb2xkZXJzWzBdKVxuICAgICAgICAvLyB1cGRhdGUgaXQgaW4gZm9sZGVycyxcbiAgICAgICAgZm9sZGVyVG9VcGRhdGUuc3RhdHVzID0gZm9sZGVyLnN0YXR1cztcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZvbGRlcnNVcGRhdGUodGhpcy5zdGF0ZS5mb2xkZXJzKVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZvbGRlclN0cnVjdHVyZSh0aGlzLnByb3BzLCB0aGlzLm9uRm9sZGVyVXBkYXRlLmJpbmQodGhpcyksIHRoaXMub25Gb2xkZXJTdGF0dXNDaGFuZ2VkLmJpbmQodGhpcykpXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb2xkZXJzO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubmV3Rm9sZGVye1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLm5ld0ZvbGRlciBpe1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwwLDAsMC45KTtcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIHBhZGRpbmc6IDdweDtcXG59XFxuXFxuLm5ld0ZvbGRlci5kcmFnT3ZlciBpe1xcbiAgICBhbmltYXRpb246IGJsaW5rIC41cyBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBibGlua3tcXG4gICAgZnJvbSB7ICAgIFxcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgfVxcbiAgICB0byB7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG59XFxuLmZhLmZhLWZvbGRlciB+IHVsIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuLmZhLmZhLWZvbGRlci1vcGVuIH4gdWwge1xcbiAgICBkaXNwbGF5OmJsb2NrO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgRm9sZGVyIGZyb20gXCIuL0ZvbGRlclwiO1xuaW1wb3J0IENvbXBvbmVudHQgZnJvbSBcIi4uLy4uLy4uL0NvbXBvbmVudHMvQ29tcG9uZW50dFwiO1xuXG5sZXQgc2VsZWN0ZWRDb21wb25lbnQsIG9uU2VsZWN0aW9uLCBvbkZvbGRlclVwZGF0ZSwgY29tcG9uZW50cywgZm9sZGVycywgb25Gb2xkZXJTdGF0dXNDaGFuZ2VkO1xuXG5mdW5jdGlvbiBpbml0aWFsaXNlUHJvcHMocHJvcHMsIGNoZWNrRm9sZGVyLCB4KXtcbiAgICBmb2xkZXJzID0gcHJvcHMuZm9sZGVycztcbiAgICBzZWxlY3RlZENvbXBvbmVudCA9IHByb3BzLnNlbGVjdGVkQ29tcG9uZW50O1xuICAgIG9uU2VsZWN0aW9uID0gcHJvcHMub25TZWxlY3Rpb247XG4gICAgY29tcG9uZW50cyA9IHByb3BzLmNvbXBvbmVudHM7XG4gICAgb25Gb2xkZXJVcGRhdGUgPSBjaGVja0ZvbGRlcjtcbiAgICBvbkZvbGRlclN0YXR1c0NoYW5nZWQ9eDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZvbGRlciAoZm9sZGVyLCBpKXtcbiAgICBsZXQgY29udGVudHMgPSBmb2xkZXIuY29udGVudHM7XG5cbiAgICByZXR1cm4gPEZvbGRlclxuICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICBmb2xkZXI9e2ZvbGRlcn1cbiAgICAgICAgICAgICAgICBmb2xkZXJzPXtmb2xkZXJzfVxuICAgICAgICAgICAgICAgIGNvbnRlbnRzPXtjb250ZW50cy5tYXAoIHByb2Nlc3NDb250ZW50ICl9XG4gICAgICAgICAgICAgICAgb25Gb2xkZXJTdGF0dXNDaGFuZ2VkPXtvbkZvbGRlclN0YXR1c0NoYW5nZWR9XG4gICAgICAgICAgICAgICAgb25Gb2xkZXJVcGRhdGU9e29uRm9sZGVyVXBkYXRlfS8+XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb250ZW50IChjb250ZW50LCBpKXtcblxuICAgIC8vIENoZWNrIGlmIGNvbnRlbnQgaXMgYSBjb21wb25lbnQgbmFtZS5cbiAgICBpZih0eXBlb2YgY29udGVudCA9PT0gXCJzdHJpbmdcIiApe1xuXG4gICAgICAgIHJldHVybiA8Q29tcG9uZW50dCBcbiAgICAgICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09Y29udGVudCl9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ29tcG9uZW50PXtzZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Rpb25DaGFuZ2U9e29uU2VsZWN0aW9ufVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgIH1cbiAgICAvLyBlbHNlIGl0cyBhIGZvbGRlciB0eXBlLlxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZm9sZGVyID0gY29udGVudDtcbiAgICAgICAgcmV0dXJuIDxGb2xkZXJcbiAgICAgICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICBmb2xkZXI9e2ZvbGRlcn1cbiAgICAgICAgICAgICAgICAgICAgZm9sZGVycz17Zm9sZGVyc31cbiAgICAgICAgICAgICAgICAgICAgY29udGVudHM9e2ZvbGRlci5jb250ZW50cy5tYXAoIHByb2Nlc3NDb250ZW50ICl9XG4gICAgICAgICAgICAgICAgICAgIG9uRm9sZGVyU3RhdHVzQ2hhbmdlZD17b25Gb2xkZXJTdGF0dXNDaGFuZ2VkfVxuICAgICAgICAgICAgICAgICAgICBvbkZvbGRlclVwZGF0ZT17b25Gb2xkZXJVcGRhdGV9Lz5cbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZvbGRlclN0cnVjdHVyZShwcm9wcywgb25Gb2xkZXJVcGRhdGUsIG9uRm9sZGVyU3RhdHVzQ2hhbmdlZCl7XG4gICAgbGV0IGZvbGRlcnMgPSBwcm9wcy5mb2xkZXJzO1xuXG4gICAgaW5pdGlhbGlzZVByb3BzKHByb3BzLCBvbkZvbGRlclVwZGF0ZSwgb25Gb2xkZXJTdGF0dXNDaGFuZ2VkKTtcblxuICAgIHJldHVybihmb2xkZXJzLm1hcChwcm9jZXNzRm9sZGVyKSlcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG4vLyBTdHlsZXMuXG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5pbXBvcnQgTmV3Rm9sZGVyIGZyb20gXCIuLi9OZXdGb2xkZXJcIjtcblxuaW1wb3J0IHsgdG9nZ2xlRm9sZGVyfSBmcm9tIFwiLi9SZWR1Y2VyXCI7XG5pbXBvcnQge2Ryb3BIYW5kbGVyLCBkcmFnT3ZlckhhbmRsZXIsIGRyYWdMZWF2ZUhhbmRsZXIsIGZvbGRlclN0YXJ0RHJhZ30gZnJvbSBcIi4vRXZlbnRzXCI7XG5cbmNsYXNzIEZvbGRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaWNvblN0YXR1czogXCJmYSBmYS1mb2xkZXJcIixcbiAgICAgICAgICAgIGZvbGRlckNsYXNzOiBcIm5ld0ZvbGRlclwiLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5mb2xkZXIubmFtZSxcbiAgICAgICAgICAgIGNvbnRlbnRzOiB0aGlzLnByb3BzLmZvbGRlci5jb250ZW50cyxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMucHJvcHMuZm9sZGVyLnR5cGUsXG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMucHJvcHMuZm9sZGVyLnN0YXR1c1xuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgbmV3Rm9sZGVyKGZvbGRlcil7XG4gICAgICAgIHRoaXMucHJvcHMub25Gb2xkZXJVcGRhdGUoZm9sZGVyLCBcIk5FV0ZPTERFUlwiKVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgZm9sZGVyID0gdGhpcy5wcm9wcy5mb2xkZXI7XG4gICAgICAgIGxldCBjb250ZW50cyA9IHRoaXMucHJvcHMuY29udGVudHM7XG4gICAgICAgIGxldCBpY29uU3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXMgPT09IFwib3BlblwiID8gXCJmYSBmYS1mb2xkZXItb3BlblwiIDogXCJmYSBmYS1mb2xkZXJcIjtcbiAgICAgICAgaWYoZm9sZGVyLnR5cGU9PVwiTmV3Rm9sZGVyXCIpe1xuICAgICAgICAgICAgcmV0dXJuICg8TmV3Rm9sZGVyIG9uTmV3Rm9sZGVyPXt0aGlzLm5ld0ZvbGRlci5iaW5kKHRoaXMpfS8+KVxuICAgICAgICB9XG4gICAgICAgIGlmKGZvbGRlci50eXBlPT1cImZvbGRlclwiKXtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLmZvbGRlckNsYXNzfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLWZvbGRlci1uYW1lPXtmb2xkZXIubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Ecm9wPXtkcm9wSGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXtkcmFnT3ZlckhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnTGVhdmU9e2RyYWdMZWF2ZUhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ9e2ZvbGRlclN0YXJ0RHJhZy5iaW5kKHRoaXMpfSA+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17aWNvblN0YXR1c30gb25DbGljaz17dG9nZ2xlRm9sZGVyLmJpbmQodGhpcyl9PjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwiZm9sZGVyXCIgcGxhY2Vob2xkZXI9XCJFbnRlciBmb2xkZXIgbmFtZVwiIHJlYWRPbmx5IHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9Lz5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc3RhdHVzID09PSBcIm9wZW5cIiA/IGNvbnRlbnRzIDogbnVsbH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZm9sZGVyLnR5cGU9PVwibm9Gb2xkZXJcIil7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5mb2xkZXJDbGFzc31cbiAgICAgICAgICAgICAgICAgICAgZGF0YS1mb2xkZXItbmFtZT17Zm9sZGVyLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJvcD17ZHJvcEhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnT3Zlcj17ZHJhZ092ZXJIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ0xlYXZlPXtkcmFnTGVhdmVIYW5kbGVyLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ9e2ZvbGRlclN0YXJ0RHJhZy5iaW5kKHRoaXMpfSAgPlxuICAgICAgICAgICAgICAgICAgICB7Y29udGVudHN9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb2xkZXI7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImlucHV0LmZvbGRlcntcXG4gICAgYm9yZGVyOm5vbmU7XFxuICAgIGJhY2tncm91bmQ6bm9uZTtcXG4gICAgcGFkZGluZy1ib3R0b206IDEzcHg7XFxuICAgIHdpZHRoOiAxNTVweDtcXG59XFxuXFxuLm5ld0ZvbGRlcntcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5uZXdGb2xkZXIgaXtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA3cHg7XFxufVxcblxcbi5uZXdGb2xkZXIuZHJhZ092ZXIgaXtcXG4gICAgYW5pbWF0aW9uOiBibGluayAuNXMgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgYmxpbmt7XFxuICAgIGZyb20geyAgICBcXG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIH1cXG4gICAgdG8ge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxufVxcbi5mYS5mYS1mb2xkZXIgfiB1bCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5mYS5mYS1mb2xkZXItb3BlbiB+IHVsIHtcXG4gICAgZGlzcGxheTpibG9jaztcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzLlxuXG5jbGFzcyBOZXdGb2xkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXR1czogXCJmYSBmYS1mb2xkZXJcIixcbiAgICAgICAgICAgIG5ld0ZvbGRlckNsYXNzOiBcIm5ld0ZvbGRlclwiLFxuICAgICAgICAgICAgZm9sZGVyTmFtZTogXCJcIlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvbGRlck5hbWVDaGFuZ2VkKGUpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvbGRlck5hbWU6IGUuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHNhdmVGb2xkZXJOYW1lT25FbnRlcihlKXtcbiAgICAgICAgaWYoZS5rZXk9PT1cIkVudGVyXCIpe1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk5ld0ZvbGRlcih7XG4gICAgICAgICAgICAgICAgbmFtZTp0aGlzLnN0YXRlLmZvbGRlck5hbWUsXG4gICAgICAgICAgICAgICAgY29udGVudHM6W10sXG4gICAgICAgICAgICAgICAgdHlwZTpcImZvbGRlclwiLFxuICAgICAgICAgICAgICAgIHN0YXR1czpcImNsb3NlZFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLm5ld0ZvbGRlckNsYXNzfT5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5zdGF0dXN9PjwvaT5cbiAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvbGRlclwiIFxuICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17dHJ1ZX0gXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBmb2xkZXIgbmFtZVwiXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB7dGhpcy5zdGF0ZS5mb2xkZXJOYW1lfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmZvbGRlck5hbWVDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5zYXZlRm9sZGVyTmFtZU9uRW50ZXIuYmluZCh0aGlzKX0vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5ld0ZvbGRlcjtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5ld0ZvbGRlciBpe1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwwLDAsMC45KTtcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIHBhZGRpbmc6IDdweDtcXG59XFxuXFxuLm5ld0ZvbGRlci5kcmFnT3ZlciBpe1xcbiAgICBhbmltYXRpb246IGJsaW5rIC41cyBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBibGlua3tcXG4gICAgZnJvbSB7ICAgIFxcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgfVxcbiAgICB0byB7XFxuICAgICAgICBjb2xvcjogZ3JlZW47XFxuICAgIH1cXG59XCIsIFwiXCJdKTtcblxuIiwiZnVuY3Rpb24gb3BlbkZvbGRlcigpe1xuICAgIGxldCBzdGF0ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSkpO1xuICAgIHN0YXRlLnN0YXR1cyA9IFwib3BlblwiO1xuICAgIHRoaXMucHJvcHMub25Gb2xkZXJTdGF0dXNDaGFuZ2VkKHN0YXRlKVxufVxuXG5mdW5jdGlvbiBjbG9zZUZvbGRlcigpe1xuICAgIGxldCBzdGF0ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSkpO1xuICAgIHN0YXRlLnN0YXR1cyA9IFwiY2xvc2VkXCI7XG4gICAgdGhpcy5wcm9wcy5vbkZvbGRlclN0YXR1c0NoYW5nZWQoc3RhdGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVGb2xkZXIoKXtcbiAgICBpZih0aGlzLnN0YXRlLnN0YXR1cyA9PT0gXCJjbG9zZWRcIikge1xuICAgICAgICBvcGVuRm9sZGVyLmNhbGwodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VGb2xkZXIuY2FsbCh0aGlzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBmaW5kRm9sZGVyIH0gZnJvbSBcIi4uL2ZpbmRGb2xkZXJzXCI7XG5cbmZ1bmN0aW9uIGhhbmRsZUNvbXBvbmVudERyb3AoY29tcG9uZW50TmFtZSwgb2xkUGFyZW50KXtcbiAgICBsZXQgY29udGVudHMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuY29udGVudHMpO1xuICAgIFxuICAgIGNvbnRlbnRzLnB1c2goY29tcG9uZW50TmFtZSlcblxuICAgIHRoaXMucHJvcHMub25Gb2xkZXJVcGRhdGUoe1xuICAgICAgICBuYW1lOiB0aGlzLnN0YXRlLm5hbWUsXG4gICAgICAgIGNvbnRlbnRzOiBjb250ZW50cyxcbiAgICAgICAgdHlwZTogXCJmb2xkZXJcIixcbiAgICAgICAgc3RhdHVzOiBcIm9wZW5cIlxuICAgIH0sXG4gICAgXCJDT01QT05FTlRcIixcbiAgICBvbGRQYXJlbnQsXG4gICAgY29tcG9uZW50TmFtZSlcbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9sZGVyRHJvcChmb2xkZXJOYW1lLCBvbGRQYXJlbnQpe1xuICAgIGxldCBjb250ZW50cyA9IEFycmF5LmZyb20odGhpcy5zdGF0ZS5jb250ZW50cyk7XG5cbiAgICAvLyAxLiBGaW5kIGZvbGRlciBvYmplY3QuXG4gICAgbGV0IGRyb3BwZWRGb2xkZXIgPSBmaW5kRm9sZGVyKGZvbGRlck5hbWUsIHRoaXMucHJvcHMuZm9sZGVyc1swXSlcblxuICAgIGNvbnRlbnRzLnB1c2goZHJvcHBlZEZvbGRlcilcblxuICAgIC8vIDIuIFJlbW92ZSBpdCBmcm9tIGl0cyBwYXJlbnQgKHBhcmVudEZvbGRlck5hbWUpXG4gICAgLy8gZG8gc29tZXdoZXJlIGVsc2UuIGhlYWQgaHVydHNcblxuICAgIC8vIENoZWNrIGlmIGl0IGlzIGEgZm9sZGVyLiBBbHNvIGNoZWNrIGlmIHdlIGFyZSBub3QgZHJvcHBpbmcgb24gdGhlIG9yaWdpbmFsIGZvbGRlci4gbWF5IGJlIHJlbW92ZSBpdCBmcm9tIHRoZSBkb20uIE5PUEUuIFxuICAgIGlmIChmb2xkZXJOYW1lICYmIGZvbGRlck5hbWUgIT09IHRoaXMuc3RhdGUubmFtZSkge1xuICAgICAgICB0aGlzLnByb3BzLm9uRm9sZGVyVXBkYXRlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIGNvbnRlbnRzOiBjb250ZW50cyxcbiAgICAgICAgICAgIHR5cGU6IFwiZm9sZGVyXCIsXG4gICAgICAgICAgICBzdGF0dXM6IFwib3BlblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiRk9MREVSXCIsXG4gICAgICAgIG9sZFBhcmVudCxcbiAgICAgICAgZm9sZGVyTmFtZSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcm9wSGFuZGxlcihldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IGNvbXBvbmVudE5hbWUgPSBldi5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcImNvbXBvbmVudC1uYW1lXCIpO1xuICAgIGxldCBmb2xkZXJOYW1lID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJmb2xkZXItbmFtZVwiKTtcbiAgICBsZXQgb2xkUGFyZW50ID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJwYXJlbnQtZm9sZGVyLW5hbWVcIilcbiAgICBsZXQgbmV3UGFyZW50ID0gdGhpcy5zdGF0ZS5uYW1lO1xuXG4gICAgaWYob2xkUGFyZW50ID09PSBuZXdQYXJlbnQgKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmb2xkZXJDbGFzczogXCJuZXdGb2xkZXJcIixcbiAgICAgICAgICAgIHN0YXR1czogXCJjbG9zZWRcIlxuICAgICAgICB9KVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgY29tcG9uZW50IG5hbWUgaXMgbnVsbCwgdGhlbiBpdCBpcyBhIGZvbGRlciBkcm9wcGVkIG9uIGZvbGRlclxuICAgIGlmIChjb21wb25lbnROYW1lID09PSBcIlwiKSB7XG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIGhhcHBlbi5cbiAgICAgICAgaWYgKGZvbGRlck5hbWUgPT0gXCJudWxsXCIgfHwgZm9sZGVyTmFtZSA9PSBcIlwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRm9sZGVyIGNhbm5vdCBiZSBlbXB0eVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhbmRsZUZvbGRlckRyb3AuY2FsbCh0aGlzLCBmb2xkZXJOYW1lLCBvbGRQYXJlbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaGFuZGxlQ29tcG9uZW50RHJvcC5jYWxsKHRoaXMsIGNvbXBvbmVudE5hbWUsIG9sZFBhcmVudCk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCJEcm9wIGZyb20gZm9sZGVyXCIpO1xuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmFnT3ZlckhhbmRsZXIoZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2xkZXJDbGFzczogXCJuZXdGb2xkZXIgZHJhZ092ZXJcIixcbiAgICAgICAgc3RhdHVzOiBcIm9wZW5cIlxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmFnTGVhdmVIYW5kbGVyKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9sZGVyQ2xhc3M6IFwibmV3Rm9sZGVyXCIsXG4gICAgICAgIHN0YXR1czogXCJjbG9zZWRcIlxuICAgIH0pXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZvbGRlclN0YXJ0RHJhZyhlKSB7XG4gICAgbGV0IG5hbWUgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2xkZXItbmFtZVwiKVxuICAgIGxldCBwYXJlbnQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZvbGRlci1uYW1lXCIpXG4gICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcImZvbGRlci1uYW1lXCIsIG5hbWUpO1xuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJwYXJlbnQtZm9sZGVyLW5hbWVcIiwgcGFyZW50KTtcbiAgICBjb25zb2xlLmxvZyhgRm9sZGVyICR7bmFtZX0gZHJhZ2VkIHdpdGggcGFyZW50ICR7cGFyZW50fWApXG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG4vLyBFdmVudHMuXG5cbmltcG9ydCB7c2VsZWN0aW9uQ2hhbmdlZH0gZnJvbSBcIi4vRXZlbnRzXCI7XG5cbi8vIENvbXBvbmVudHMuXG5cbmltcG9ydCBUaHVtYm5haWxWaWV3IGZyb20gXCIuL1RodW1ibmFpbFZpZXdcIjtcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgIFwiLi9TdHlsZS5jc3NcIjtcblxuY2xhc3MgQ29tcG9uZW50dCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2VsZWN0ZWRDb21wb25lbnQ6IHRoaXMucHJvcHMuc2VsZWN0ZWRDb21wb25lbnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhZGRDb21wb25lbnREZXRhaWxzKGUpe1xuXG4gICAgICAgIC8qKiBQYXNzIGRldGFpbHMgYWJvdXQgY29tcG9uZW50IG9yIGZvbGRlciBpbiB0aGUgZHJhZyBldmVudCAqL1xuICAgICAgICBcbiAgICAgICAgbGV0IG5hbWUgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIpXG5cbiAgICAgICAgZS50YXJnZXQucXVlcnlTZWxlY3RvcignLnRodW1ibmFpbCcpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgICAgIGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5jb21wb25lbnROYW1lJykuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJTRVRUSU5HIERBVEFcIilcblxuICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwiY29tcG9uZW50LW5hbWVcIiwgbmFtZSk7XG4gICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJwYXJlbnQtZm9sZGVyLW5hbWVcIiwgZS5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2xkZXItbmFtZVwiKSlcblxuICAgICAgICBjb25zb2xlLmxvZyhlLmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiY29tcG9uZW50LW5hbWVcIikpXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIGxldCBzZWxlY3RlZENvbXBvbmVudCA9IHByb3BzLnNlbGVjdGVkQ29tcG9uZW50O1xuICAgICAgICBsZXQgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8bGkgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHtzZWxlY3RlZENvbXBvbmVudCAmJiBwcm9wcy5jb21wb25lbnQubmFtZT09PXNlbGVjdGVkQ29tcG9uZW50Lm5hbWUgPyBcInNlbGVjdGVkIGNvbXBvbmVudCBiYWNrZ3JvdW5kXCI6IFwiY29tcG9uZW50IGJhY2tncm91bmRcIn1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljayA9IHtzZWxlY3Rpb25DaGFuZ2VkLmJpbmQodGhpcyxjb21wb25lbnQubmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ29udGV4dE1lbnUgPSB7c2VsZWN0aW9uQ2hhbmdlZC5iaW5kKHRoaXMsY29tcG9uZW50Lm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHtwcm9wcy5pbmRleH1cbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlPVwidHJ1ZVwiIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9e2NvbXBvbmVudC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICBvbkRyYWdTdGFydD17dGhpcy5hZGRDb21wb25lbnREZXRhaWxzLmJpbmQodGhpcyl9PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjb21wb25lbnROYW1lIFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge2NvbXBvbmVudC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImhpZGRlbiB0aHVtYm5haWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUaHVtYm5haWxWaWV3IGNvbXBvbmVudD17Y29tcG9uZW50fS8+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50dDtcbiIsIlxuLy8gUHVibGljIGZ1bmN0aW9uc1xuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0aW9uQ2hhbmdlZChjb21wb25lbnROYW1lLCBlKSB7XG5cbiAgICAvKiogUGFzcyBtZXNzYWdlIHRvIENvbXBvbmVudHMgYWJvdXQgc2VsZWN0aW9uIGNoYW5nZSAgKi9cblxuICAgIHRoaXMucHJvcHMub25TZWxlY3Rpb25DaGFuZ2UoY29tcG9uZW50TmFtZSwgZSk7XG59IiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIENvbXBvbmVudHMuXG5pbXBvcnQgRHluYW1pY0NvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vUHJldmlldy9EeW5hbWljQ29tcG9uZW50XCI7XG5cblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgVGh1bWJuYWlsVmlldyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lIHx8IFwiXCIsXG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5wcm9wcy5zdGF0ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgY29tcG9uZW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnByb3BzLmNvbXBvbmVudCkpXG5cbiAgICAgICAgaWYoIGNvbXBvbmVudC5uYW1lPT1cIlwiKXtcbiAgICAgICAgICAgIHJldHVybiAoPGRpdj48L2Rpdj4pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGh1bWJuYWlsVmlld1wiPlxuICAgICAgICAgICAgICAgIDxEeW5hbWljQ29tcG9uZW50IGNvbXBvbmVudD17Y29tcG9uZW50fS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGh1bWJuYWlsVmlldzsiLCJsZXQgcHJldlBhZ2VYLCBwcmV2UGFnZVk7XG5sZXQgbWF4Q291bnQgPSA1MDtcbmxldCBjb3VudCA9IDAgO1xuXG5mdW5jdGlvbiBtb3Zlc0Fib3ZlKFBhZ2VYLCBQYWdlWSkge1xuXG4gICAgcmV0dXJuIHByZXZQYWdlWSA8IFBhZ2VZID8gdHJ1ZSA6IGZhbHNlXG59XG5cbmZ1bmN0aW9uIG1vdmVzQmVsb3coUGFnZVgsIFBhZ2VZKSB7XG5cbiAgICByZXR1cm4gcHJldlBhZ2VZID4gUGFnZVkgPyBmYWxzZSA6IHRydWVcbn1cblxuZnVuY3Rpb24gbW92ZXNSaWdodChQYWdlWCwgUGFnZVkpIHtcbiAgICBcbiAgICByZXR1cm4gcHJldlBhZ2VZIDwgUGFnZVkgPyB0cnVlOiBmYWxzZVxuXG59XG5cbmZ1bmN0aW9uIG1vdmVzTGVmdChQYWdlWCwgUGFnZVkpIHtcbiAgICByZXR1cm4gcHJldlBhZ2VZID4gUGFnZVkgPyB0cnVlOiBmYWxzZVxuXG59XG5cbi8qKiBSZXR1cm5zIHRoZSBkaXJlY3Rpb24gb2YgbmV3IGNvbXBvbmVudCBpbnNlcnRpb24gKi9cblxuZXhwb3J0IGZ1bmN0aW9uICBpbnNlcnREaXJlY3Rpb24oUGFnZVgsIFBhZ2VZKXtcbiAgICBwcmV2UGFnZVggPSBwcmV2UGFnZVggfHwgUGFnZVg7XG4gICAgcHJldlBhZ2VZID0gcHJldlBhZ2VZIHx8IFBhZ2VZO1xuXG4gICAgY291bnQrKztcbiAgICBpZihjb3VudD09PW1heENvdW50KXtcblxuICAgICAgICAvLyBDaGVjayBtYXggZGlmZmVyZW5jZS5cblxuICAgICAgICBjb25zb2xlLmxvZyhwcmV2UGFnZVgsIFBhZ2VYKTtcblxuICAgICAgICBjb3VudCA9MDtcbiAgICAgICAgcHJldlBhZ2VZID0gUGFnZVk7XG4gICAgICAgIHByZXZQYWdlWCA9IFBhZ2VYO1xuXG4gICAgICAgIC8vIGlmKHhEaWZmPnlEaWZmKXtgYFxuICAgICAgICAvLyAgICAgaWYobW92ZXNSaWdodChQYWdlWCwgUGFnZVkpKXtcbiAgICAgICAgLy8gICAgICAgICBwcmV2UGFnZVkgPSBQYWdlWTtcbiAgICAgICAgLy8gICAgICAgICBwcmV2UGFnZVggPSBQYWdlWDtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gXCJJTlNFUlRfUklHSFRcIjtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIGlmKG1vdmVzTGVmdChQYWdlWCwgUGFnZVkpKXtcbiAgICAgICAgLy8gICAgICAgICBwcmV2UGFnZVkgPSBQYWdlWTtcbiAgICAgICAgLy8gICAgICAgICBwcmV2UGFnZVggPSBQYWdlWDtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gXCJJTlNFUlRfTEVGVFwiO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gaWYoeURpZmY+eERpZmYpe1xuICAgICAgICAvLyAgICAgaWYobW92ZXNBYm92ZShQYWdlWCwgUGFnZVkpKXtcbiAgICAgICAgLy8gICAgICAgICBwcmV2UGFnZVkgPSBQYWdlWTtcbiAgICAgICAgLy8gICAgICAgICBwcmV2UGFnZVggPSBQYWdlWDtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gXCJJTlNFUlRfQUJPVkVcIjtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIGlmKG1vdmVzQmVsb3coUGFnZVgsIFBhZ2VZKSl7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VZID0gUGFnZVk7XG4gICAgICAgIC8vICAgICAgICAgcHJldlBhZ2VYID0gUGFnZVg7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIFwiSU5TRVJUX0JFTE9XXCI7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge2NvbnZlcnRUb1JlYWN0fSBmcm9tIFwiLi9Db2RlR2VuZXJhdG9yL1JlYWN0XCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudChjb21wb25lbnQpe1xuXG4gICAgbGV0IGNvbXBvbmVudFN0cmluZyA9IGNvbnZlcnRUb1JlYWN0KGNvbXBvbmVudCk7XG5cbiAgICAvLyBldmFsIGRvZXMgbm90IGV2YWx1YXRlIGNsYXNzIGlmIG5vdCBleGNsb3NlZCBpbiBwYXJhbnRoZXNpcy5cbiAgICByZXR1cm4gZXZhbChCYWJlbC50cmFuc2Zvcm0oY29tcG9uZW50U3RyaW5nLCB7IHByZXNldHM6IFsncmVhY3QnXSwgcGx1Z2luczogW1widHJhbnNmb3JtLWVzMjAxNS1jbGFzc2VzXCJdICB9KS5jb2RlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjcmVhdGVDb21wb25lbnRcbn0iLCJpbXBvcnQge3NhbXBsZX0gZnJvbSBcIi4vU2FtcGxlXCI7XG5cbmZ1bmN0aW9uIHB1c2hIaXN0b3J5KGNvbXBvbmVudHMpe1xuXG4gICAgd2luZG93LmVkaXRvckhpc3RvcnkgPSByZWFkRGF0YShcInVpLWVkaXRvci1oaXN0b3J5XCIpO1xuICAgIGVkaXRvckhpc3RvcnkucHVzaChjb21wb25lbnRzKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVpLWVkaXRvci1oaXN0b3J5XCIsSlNPTi5zdHJpbmdpZnkoZWRpdG9ySGlzdG9yeSkgKTtcbn1cblxuLy8gSWYgZW1wdHksIHJldHVybiBlbXB0eSBhcnJheS5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWREYXRhKGtleSl7XG5cbiAgICBpZihrZXkgPT09XCJ1aS1lZGl0b3JcIil7XG4gICAgICAgIGlmKCF3aW5kb3cuY29tcG9uZW50cyApe1xuICAgICAgICAgICAgd2luZG93LmNvbXBvbmVudHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpIHx8IHNhbXBsZTtcbiAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkod2luZG93LmNvbXBvbmVudHMpKTtcbiAgICB9XG4gICAgaWYoa2V5PT09XCJ1aS1lZGl0b3ItaGlzdG9yeVwiKXtcbiAgICAgICAgbGV0IGhpc3RvcnkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBcbiAgICAgICAgaWYoaGlzdG9yeSlcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGhpc3RvcnkpO1xuICAgIH1cbiAgICBpZihrZXkgPT09XCJmb2xkZXJzXCIpe1xuICAgICAgICBsZXQgZm9sZGVycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XG5cbiAgICAgICAgaWYoZm9sZGVycyA9PT0gbnVsbCl7XG4gICAgICAgICAgICByZXR1cm4gIFt7XCJ0eXBlXCI6XCJub0ZvbGRlclwiLFwiY29udGVudHNcIjpbe1wibmFtZVwiOlwiVGVtcGxhdGVzXCIsXCJjb250ZW50c1wiOltcIlBhZ2VcIl0sXCJ0eXBlXCI6XCJmb2xkZXJcIixcInN0YXR1c1wiOlwiY2xvc2VkXCJ9LHtcIm5hbWVcIjpcIkNvbXBvbmVudHNcIixcImNvbnRlbnRzXCI6W1wiTW9kYWxcIixcIlJlc2V0UGFzc3dvcmRNb2RhbFwiLFwiRm9yZ290UGFzc3dvcmRcIixcIkxheW91dENvbXBvbmVudFwiLFwiUHJvZHVjdENvbXBvbmVudFwiXSxcInR5cGVcIjpcImZvbGRlclwiLFwic3RhdHVzXCI6XCJjbG9zZWRcIn0se1wibmFtZVwiOlwiRWxlbWVudHNcIixcImNvbnRlbnRzXCI6W1wiRW1haWxJbnB1dFwiLFwiVGVybXNBbmRTZXJ2aWNlXCIsXCJTdWJtaXRCdXR0b25cIixcIkNhbmNlbEJ1dHRvblwiLFwiUHJpdmFjeUFuZFBvbGljeVwiLFwiUmVzZXRQYXNzd29yZEZvcm1cIixcIkZvcm1cIl0sXCJ0eXBlXCI6XCJmb2xkZXJcIixcInN0YXR1c1wiOlwiY2xvc2VkXCJ9XSxcIm5hbWVcIjpcIm5vRm9sZGVyXCIsXCJzdGF0dXNcIjpcIm9wZW5cIn1dXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvbGRlcnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZURhdGEoa2V5LCBjb21wb25lbnRzLCBub1B1c2gpe1xuXG4gICAgaWYoa2V5PT1cImZvbGRlcnNcIil7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50cykpO1xuICAgIH1cbiAgICBpZihrZXk9PVwidWktZWRpdG9yXCIpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIldSSVRFXCIpXG4gICAgICAgIHdpbmRvdy5jb21wb25lbnRzID0gY29tcG9uZW50cztcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShjb21wb25lbnRzKSk7XG4gICAgICAgIGlmKCFub1B1c2gpe1xuICAgICAgICAgICAgcHVzaEhpc3RvcnkoY29tcG9uZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkQ29tcG9uZW50KGNvbXBvbmVudE5hbWUpe1xuXG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBpZighY29tcG9uZW50cyl7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZT09PWNvbXBvbmVudE5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVDb21wb25lbnQocGFyZW50KSB7XG5cbiAgICBpZighQXJyYXkuaXNBcnJheShwYXJlbnQpICYmIHBhcmVudC5uYW1lKXtcbiAgICAgICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YSggXCJ1aS1lZGl0b3JcIik7XG4gICAgICAgIGxldCBpbmRleCA9IGNvbXBvbmVudHMuZmluZEluZGV4KGNvbXA9PmNvbXAubmFtZSA9PT0gcGFyZW50Lm5hbWUpO1xuICAgICAgICBjb21wb25lbnRzW2luZGV4XSA9IHBhcmVudDtcbiAgICAgICAgd3JpdGVEYXRhKFwidWktZWRpdG9yXCIsIGNvbXBvbmVudHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcEhpc3RvcnkoKXtcbiAgICBcbiAgICBsZXQgZWRpdG9ySGlzdG9yeSA9IHJlYWREYXRhKFwidWktZWRpdG9yLWhpc3RvcnlcIik7XG4gICAgaWYoIWVkaXRvckhpc3Rvcnkpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxhc3RJdGVtID0gZWRpdG9ySGlzdG9yeS5wb3AoKTtcbiAgICBcbiAgICBpZighZWRpdG9ySGlzdG9yeSl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3ItaGlzdG9yeVwiLCBlZGl0b3JIaXN0b3J5LCB0cnVlKTtcblxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBsYXN0SXRlbSwgdHJ1ZSk7XG59IiwibGV0IHNhbXBsZSA9IFtcbiAge1xuICAgIFwibmFtZVwiOiBcIkZvcmdvdFBhc3N3b3JkXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT1cXFwidnNCdXR0b25cXFwiPjxidXR0b24gaWQ9XFxcImYxMjNcXFwiPntzdGF0ZS5idXR0b25UZXh0fTwvYnV0dG9uPjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5zaG93XCIsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uUGFzc3dvcmRGb3Jnb3R0ZW5cIixcbiAgICAgICAgXCJpZFwiOiBcImYxMjNcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwiYnV0dG9uVGV4dFxcXCI6XFxcIkZvcmdvdCBQYXNzd29yZFxcXCJ9XCIsXG4gICAgXCJzdHlsZVwiOiBcIi52c0J1dHRvbntcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XFxuXFxuXFxuLnZzQnV0dG9uIGJ1dHRvbntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjZWY1Zjk2O1xcbmJvcmRlcjogMXB4IHNvbGlkO1xcbn1cXG5cXG4udnNCdXR0b24gYnV0dG9uOmhvdmVye1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG59XCIsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW11cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIk1vZGFsXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuPGhlYWRlcj5cXG4gIDxoMz5Gb3Jnb3QgUGFzc3dvcmQ8L2gzPlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwiY2xvc2VCdXR0b25cXFwiIGlkPVxcXCJ4XFxcIj54PC9idXR0b24+XFxuPC9oZWFkZXI+XFxuPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcbjwvc2VjdGlvbj5cXG48Zm9vdGVyPmZvb3RlcjwvZm9vdGVyPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5uYW1lPVxcXCJcXFwiO1wiLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IHRydWUsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJvbkNsb3NlTW9kYWxcIixcbiAgICAgICAgXCJpZFwiOiBcInhcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwidmFyaWFudFxcXCI6XFxcImluaXRpYWxcXFwifVwiLFxuICAgIFwic3R5bGVcIjogXCIubW9kYWx7XFxuICB3aWR0aDo0MDBweDtcXG4gIGZvbnQtc2l6ZToyMnB4O1xcbiAgcG9zaXRpb246cmVsYXRpdmU7XFxuYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuY29sb3I6IGJsYWNrO1xcbiAgZm9udC1mYW1pbHk6IEJlbnRvblNhbnNMaWdodCxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OjQwMDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuXFxufVxcblxcbi5tb2RhbCBoM3tcXG4gIHBhZGRpbmc6MXJlbTtcXG5mb250LXNpemU6MjZweDtcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNvbnRlbnR7XFxucGFkZGluZzoxcmVtO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCBmb290ZXJ7XFxucGFkZGluZzoxcmVtO1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG4ubW9kYWwgaGVhZGVye1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNsb3NlQnV0dG9ue1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB0b3A6IDIwcHg7XFxufVxcblxcbi5tb2RhbCAuY29udGVudHtcXG4gICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiQ2FuY2VsQnV0dG9uXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT1cXFwidnNCdXR0b25cXFwiPjxidXR0b24+e3N0YXRlLmNhbmNlbEJ1dHRvbn08L2J1dHRvbj48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcXCJjYW5jZWxCdXR0b25cXFwiOlxcXCJDYW5jZWxcXFwifVwiLFxuICAgIFwic3R5bGVcIjogXCIudnNCdXR0b257XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmNvbG9yOiByZ2IoMCwgMCwgMCk7XFxufVxcblxcblxcbi52c0J1dHRvbiBidXR0b257XFxuYm9yZGVyLWNvbG9yOiAjYmYyMTVkO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZDogI2VmNWY5NjtcXG5ib3JkZXI6IDFweCBzb2xpZDtcXG5wYWRkaW5nOiAuNXJlbSAycmVtO1xcbn1cXG5cXG4udnNCdXR0b24gYnV0dG9uOmhvdmVye1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG59XCIsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW11cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIlN1Ym1pdEJ1dHRvblwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInZzQnV0dG9uXFxcIj48YnV0dG9uPntzdGF0ZS5zdWJtaXRCdXR0b259PC9idXR0b24+PC9kaXY+XCIsXG4gICAgXCJldmVudHNcIjogW10sXG4gICAgXCJzdGF0ZVwiOiBcIntcXFwic3VibWl0QnV0dG9uXFxcIjpcXFwiU3VibWl0XFxcIn1cIixcbiAgICBcInN0eWxlXCI6IFwiLnZzQnV0dG9ue1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5jb2xvcjogcmdiKDAsIDAsIDApO1xcbn1cXG5cXG5cXG4udnNCdXR0b24gYnV0dG9ue1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6ICNlZjVmOTY7XFxuYm9yZGVyOiAxcHggc29saWQ7XFxucGFkZGluZzogLjVyZW0gMnJlbTtcXG59XFxuXFxuLnZzQnV0dG9uIGJ1dHRvbjpob3ZlcntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJQcml2YWN5QW5kUG9saWN5XCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJwcml2YWN5UG9saWN5XFxcIj5cXG5cXHR7c3RhdGUuY29udGVudH1cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcblxcdFxcXCJjb250ZW50XFxcIjpcXFwiUGxlYXNlIGVudGVyIHRoZSBlbWFpbCBhZGRyZXNzIHlvdSB1c2VkIHRvIGNyZWF0ZSB5b3VyIGFjY291bnQgYW5kIHdlIHdpbGwgc2VuZCB5b3UgYSBsaW5rIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuIFNlZSBQcml2YWN5IFBvbGljeVxcXCJcXG59XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5wcml2YWN5UG9saWN5e1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5mb250LXNpemU6IDExcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW07XFxuICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiVGVybXNBbmRTZXJ2aWNlXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJwcml2YWN5UG9saWN5XFxcIj5cXG57c3RhdGUudmFyaWFudH1cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwiVGhpcyBzaXRlIGlzIHByb3RlY3RlZCBieSByZUNBUFRDSEEgYW5kIHRoZSBHb29nbGUgUHJpdmFjeSBQb2xpY3kgYW5kIFRlcm1zIG9mIFNlcnZpY2UgYXBwbHkuXFxcIn1cIixcbiAgICBcInN0eWxlXCI6IFwiLnByaXZhY3lQb2xpY3l7XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmZvbnQtc2l6ZTogMTFweDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJGb3JtXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8Zm9ybSBjbGFzc05hbWU9XFxcInZzZnJtXFxcIj5cXG48L2Zvcm0+XCIsXG4gICAgXCJldmVudHNcIjogW10sXG4gICAgXCJzdGF0ZVwiOiBcInt9XCIsXG4gICAgXCJzdHlsZVwiOiBcIi52c2ZybXtcXG5oZWlnaHQ6NDAwcHg7XFxud2lkdGg6NDAwcHg7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJFbWFpbElucHV0XCIsXG4gICAgXCJtYXJrdXBcIjogXCI8c3BhbiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnQrXFxcIiBlbWFpbElucHV0XFxcIn0+XFxuXFx0XFxuICAgIDxpbnB1dCBpZD1cXFwiaW5wdXRcXFwiIGNsYXNzTmFtZT1cXFwiZW1haWxcXFwiIHR5cGU9XFxcImVtYWlsXFxcIiBcXHR2YWx1ZT17c3RhdGUuZW1haWx9IC8+U09NRVxcblxcdFxcbiAgICA8bGFiZWw+e3N0YXRlLnBsYWNlaG9sZGVyfTwvbGFiZWw+XFxuICAgIFxcbjwvc3Bhbj5cIixcbiAgICBcImV2ZW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2hhbmdlXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLmVtYWlsID0gZS50YXJnZXQudmFsdWVcIixcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJpbnB1dFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkZvY3VzXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLnZhcmlhbnQgPSBcXFwiZm9jdXNzZWRcXFwiXCIsXG4gICAgICAgIFwiaW5kZXhcIjogMSxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJpbnB1dFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkJsdXJcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwiaWYoc3RhdGUuZW1haWwubGVuZ3RoPT0wKXtcXG4gICAgc3RhdGUucGxhY2Vob2xkZXIgPVxcXCJQbGVhc2UgZW50ZXIgYW4gRW1haWwgQWRkcmVzc1xcXCJcXG4gICAgc3RhdGUudmFyaWFudCA9IFxcXCJwcm9tcHRfaW5wdXRcXFwiXFxufVxcbmVsc2UgaWYoIXN0YXRlLmVtYWlsLmluY2x1ZGVzKFxcXCJAXFxcIikpe1xcbiAgICBzdGF0ZS5wbGFjZWhvbGRlciA9XFxcIlBsZWFzZSBjb3JyZWN0IHRoZSBFbWFpbCBBZGRyZXNzXFxcIlxcblxcdHN0YXRlLnZhcmlhbnQgPSBcXFwicHJvbXB0X2NvcnJlY3RfaW5wdXRcXFwiO1xcbn1cXG5lbHNle1xcblxcdHN0YXRlLnBsYWNlaG9sZGVyID0gXFxcIkVtYWlsIEFkZHJlc3NcXFwiO1xcbiAgICBzdGF0ZS52YXJpYW50ID0gXFxcInZhbGlkX2lucHV0XFxcIlxcbn1cXG5cIixcbiAgICAgICAgXCJpbmRleFwiOiAyLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcImlucHV0XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxuXFx0XFxcImVtYWlsXFxcIjpcXFwiXFxcIixcXG4gICAgXFxcInZhcmlhbnRcXFwiOlxcXCJpbml0aWFsXFxcIixcXG4gICAgXFxcInBsYWNlaG9sZGVyXFxcIjpcXFwiRW1haWwgQWRkcmVzc1xcXCJcXG59XCIsXG4gICAgXCJzdHlsZVwiOiBcIi5lbWFpbElucHV0e1xcblxcdGZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5cXHRwb3NpdGlvbjpyZWxhdGl2ZTtcXG59XFxuXFxuLmVtYWlsSW5wdXQgLmVtYWlse1xcblxcdHBhZGRpbmc6IDE3cHg7XFxuXFx0cGFkZGluZy10b3A6IDI1cHg7XFxuXFx0Ym9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmVtYWlsSW5wdXQgbGFiZWx7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgIGxlZnQ6IDE1cHg7XFxuICAgIHRvcDogLTE4cHg7XFxufVxcblxcbi5wcm9tcHRfaW5wdXQuZW1haWxJbnB1dCBsYWJlbHtcXG5cXHRmb250LXNpemU6IDExcHg7XFxuICAgXFx0bGVmdDogMTVweDtcXG4gICAgdG9wOiAtMThweDtcXG4gICAgY29sb3I6ICNkOTE1NjA7XFxufVxcblxcbi5wcm9tcHRfaW5wdXQgLmVtYWlse1xcbiAgICBjb2xvcjogI2Q5MTU2MDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZWY1Zjk2O1xcbn1cXG5cXG4ucHJvbXB0X2NvcnJlY3RfaW5wdXQgbGFiZWx7XFxuICAgIGNvbG9yOiAjZDkxNTYwO1xcblxcdGZvbnQtc2l6ZTogMTFweDtcXG4gICAgdG9wOiAtMjhweDtcXG4gICAgbGVmdDogOXB4O1xcbn1cXG5cXG4ucHJvbXB0X2NvcnJlY3RfaW5wdXQgLmVtYWlse1xcbiAgIGNvbG9yOiAjZDkxNTYwO1xcbiAgICBib3JkZXItY29sb3I6ICNlZjVmOTY7XFxufVxcblxcbi5mb2N1c3NlZC5lbWFpbElucHV0IGxhYmVse1xcblxcdGZvbnQtc2l6ZTogMTFweDtcXG4gICAgdG9wOiAtMjhweDtcXG4gICAgbGVmdDogOXB4O1xcbn1cXG5cXG4udmFsaWRfaW5wdXQgbGFiZWx7XFxuXFx0Zm9udC1zaXplOiAxMXB4O1xcbiAgICB0b3A6IC0yOHB4O1xcbiAgICBsZWZ0OiA5cHg7XFxufVxcblxcbi5lbWFpbElucHV0IGxhYmVsIHtcXG5cXHR0cmFuc2l0aW9uOiB0b3AgLjNzO1xcbn1cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcImZvY3Vzc2VkXCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwiZW1haWxcIjogXCJcIixcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJmb2N1c3NlZFwiLFxuICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJFbWFpbCBBZGRyZXNzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwicHJvbXB0X2lucHV0XCIsXG4gICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgIFwiZW1haWxcIjogXCJcIixcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJwcm9tcHRfaW5wdXRcIixcbiAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IFwiUGxlYXNlIGVudGVyIGFuIEVtYWlsIEFkZHJlc3NcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJwcm9tcHRfY29ycmVjdF9pbnB1dFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcImVtYWlsXCI6IFwiYVwiLFxuICAgICAgICAgIFwidmFyaWFudFwiOiBcInByb21wdF9jb3JyZWN0X2lucHV0XCIsXG4gICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIlBsZWFzZSBjb3JyZWN0IHRoZSBFbWFpbCBBZGRyZXNzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidmFsaWRfaW5wdXRcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJlbWFpbFwiOiBcImFAXCIsXG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwidmFsaWRfaW5wdXRcIixcbiAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IFwiRW1haWwgQWRkcmVzc1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJSZXNldFBhc3N3b3JkRm9ybVwiLFxuICAgIFwibWFya3VwXCI6IFwiPGZvcm0+PFRlcm1zQW5kU2VydmljZT48L1Rlcm1zQW5kU2VydmljZT48RW1haWxJbnB1dD48L0VtYWlsSW5wdXQ+PFN1Ym1pdEJ1dHRvbj48L1N1Ym1pdEJ1dHRvbj48Q2FuY2VsQnV0dG9uPjwvQ2FuY2VsQnV0dG9uPjxUZXJtc0FuZFNlcnZpY2U+PFByaXZhY3lBbmRQb2xpY3k+PC9Qcml2YWN5QW5kUG9saWN5PjwvVGVybXNBbmRTZXJ2aWNlPlxcbjwvZm9ybT5cIixcbiAgICBcImV2ZW50c1wiOiBbXSxcbiAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwidGV4dFxcXCJ9XCIsXG4gICAgXCJzdHlsZVwiOiBcImZvcm17XFxuaGVpZ2h0OjQwMHB4O31cIixcbiAgICBcImNvbmZpZ1wiOiBcInt9XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiUGFnZVwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInBhZ2VcXFwiPlxcblxcdDxGb3Jnb3RQYXNzd29yZD48L0ZvcmdvdFBhc3N3b3JkPlxcbiAgICA8UmVzZXRQYXNzd29yZE1vZGFsPjwvUmVzZXRQYXNzd29yZE1vZGFsPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25QYXNzd29yZEZvcmdvdHRlblwiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5SZXNldFBhc3N3b3JkTW9kYWwgPSBbXFxuXFx0e1xcbiAgICBcXHR0aXRsZTogXFxcIkZvcmdvdCBQYXNzd29yZFxcXCIsXFxuICAgICAgICBmb290ZXI6IFxcXCJDb3B5cmlndHNcXFwiLFxcbiAgICAgICAgc2hvdzogXFxcInNkXFxcIlxcbiAgICB9XFxuXTtcXG5cXG5zdGF0ZS52YXJpYW50ID0gXFxcIm1vZGFsX29wZW5lZFxcXCI7XCIsXG4gICAgICAgIFwiaW5kZXhcIjogMCxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJGb3Jnb3RQYXNzd29yZFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJvbkNsb3NlXCIsXG4gICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLlJlc2V0UGFzc3dvcmRNb2RhbCA9IFtdO1xcbnN0YXRlLnZhcmlhbnQgPSBcXFwibW9kYWxfY2xvc2VkXFxcIjtcIixcbiAgICAgICAgXCJpbmRleFwiOiAwLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcIlJlc2V0UGFzc3dvcmRNb2RhbFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInN0YXRlXCI6IFwie1xcblxcdFxcXCJzaG93TW9kYWxcXFwiOiBmYWxzZSxcXG4gICAgXFxcImxpc3RcXFwiOiBbMSwyLDMsNCw1XSxcXG4gICAgXFxcIlJlc2V0UGFzc3dvcmRNb2RhbFxcXCI6IFtdLFxcbiAgICBcXFwidmFyaWFudFxcXCI6IFxcXCJpbml0aWFsXFxcIlxcbn1cIixcbiAgICBcInN0eWxlXCI6IFwiLnBhZ2V7XFxuXFx0aGVpZ2h0OiA3MDBweDtcXG5cXHR3aWR0aDogNTAwcHg7XFxufVwiLFxuICAgIFwiY29uZmlnXCI6IFwie1xcXCJWYXJpYW50TW9kYWxcXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwic2hvd01vZGFsXFxcIixcXFwib3ZlcnJpZGVcXFwiOmZhbHNlfSxcXFwiRm9yZ290UGFzc3dvcmRCdXR0b25cXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwiXFxcIixcXFwib3ZlcnJpZGVcXFwiOmZhbHNlfSxcXFwiRm9yZ290UGFzc3dvcmRcXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwiXFxcIixcXFwib3ZlcnJpZGVcXFwiOmZhbHNlLFxcXCJyZW5kZXJMaXN0UHJvcFxcXCI6XFxcIlxcXCJ9LFxcXCJSZXNldFBhc3N3b3JkTW9kYWxcXFwiOntcXFwic2hvd0hpZGVQcm9wXFxcIjpcXFwic2hvd01vZGFsXFxcIixcXFwib3ZlcnJpZGVcXFwiOnRydWUsXFxcInJlbmRlckxpc3RQcm9wXFxcIjpcXFwiXFxcIn19XCIsXG4gICAgXCJ2YXJpYW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm1vZGFsX29wZW5lZFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcInNob3dNb2RhbFwiOiBmYWxzZSxcbiAgICAgICAgICBcImxpc3RcIjogW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDVcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiUmVzZXRQYXNzd29yZE1vZGFsXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZvcmdvdCBQYXNzd29yZFwiLFxuICAgICAgICAgICAgICBcImZvb3RlclwiOiBcIkNvcHlyaWd0c1wiLFxuICAgICAgICAgICAgICBcInNob3dcIjogXCJzZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJtb2RhbF9vcGVuZWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJtb2RhbF9jbG9zZWRcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJzaG93TW9kYWxcIjogZmFsc2UsXG4gICAgICAgICAgXCJsaXN0XCI6IFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA1XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcIlJlc2V0UGFzc3dvcmRNb2RhbFwiOiBbXSxcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJtb2RhbF9jbG9zZWRcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiUmVzZXRQYXNzd29yZE1vZGFsXCIsXG4gICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuPGhlYWRlcj5cXG4gIDxoMz57c3RhdGUudGl0bGV9PC9oMz5cXG4gICAgPGJ1dHRvbiBpZD1cXFwiY2xvc2VcXFwiIGNsYXNzTmFtZT1cXFwiY2xvc2VCdXR0b25cXFwiPng8L2J1dHRvbj5cXG48L2hlYWRlcj5cXG48c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudFxcXCI+PFJlc2V0UGFzc3dvcmRGb3JtPjwvUmVzZXRQYXNzd29yZEZvcm0+XFxuPC9zZWN0aW9uPlxcbjxmb290ZXI+e3N0YXRlLmZvb3Rlcn08L2Zvb3Rlcj5cXG48L2Rpdj5cIixcbiAgICBcImV2ZW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUuc2hvdyA9IFxcXCJzZFxcXCI7XCIsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uQ2xvc2VcIixcbiAgICAgICAgXCJpZFwiOiBcImNsb3NlXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxcInRpdGxlXFxcIjpcXFwiRm9yZ290IFBhc3N3b3JkXFxcIixcXFwiZm9vdGVyXFxcIjpcXFwiQ29weXJpZ3RzXFxcIn1cIixcbiAgICBcInN0eWxlXCI6IFwiLm1vZGFse1xcbiAgd2lkdGg6NDAwcHg7XFxuICBmb250LXNpemU6MjJweDtcXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xcbmJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbmNvbG9yOiBibGFjaztcXG4gIGZvbnQtZmFtaWx5OiBCZW50b25TYW5zTGlnaHQsSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDo0MDA7XFxuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW07XFxuICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcblxcbn1cXG5cXG4ubW9kYWwgaDN7XFxuICBwYWRkaW5nOjFyZW07XFxuZm9udC1zaXplOjI2cHg7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLm1vZGFsIC5jb250ZW50e1xcbnBhZGRpbmc6MXJlbTtcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgZm9vdGVye1xcbnBhZGRpbmc6MXJlbTtcXG4gIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuLm1vZGFsIGhlYWRlcntcXG4gIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLm1vZGFsIC5jbG9zZUJ1dHRvbntcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgdG9wOiAyMHB4O1xcbn1cXG5cXG4ubW9kYWwgLmNvbnRlbnR7XFxuICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XCIsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW11cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIkxheW91dENvbXBvbmVudFwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnR9PlxcblxcdDxidXR0b24gY2xhc3NOYW1lPVxcXCJsZWZ0XFxcIiBpZD1cXFwicHJldmlvdXNcXFwiPntcXFwiPFxcXCJ9PC9idXR0b24+XFxuICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJ3aW5kb3dcXFwiPlxcbiAgICBcXHQ8ZGl2IGNsYXNzTmFtZT1cXFwiY29udGVudFxcXCI+XFxuICAgICAgICAgIHs8ZGl2PntzdGF0ZS5jdXJyZW50fTwvZGl2Pn1cXG5cXHQgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwicmlnaHRcXFwiIGlkPVxcXCJuZXh0XFxcIj57XFxcIj5cXFwifTwvYnV0dG9uPlxcbjwvZGl2PlwiLFxuICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJpZihzdGF0ZS5jdXJyZW50PT09c3RhdGUuaXRlbXMubGVuZ3RoKXtcXG5cXHRzdGF0ZS5jdXJyZW50ID0gMTtcXG59XFxuXFxuZWxzZSB7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLmN1cnJlbnQgKzE7XFxufVwiLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcIm5leHRcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJpZihzdGF0ZS5jdXJyZW50PT09MSl7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLml0ZW1zLmxlbmd0aDtcXG59XFxuXFxuZWxzZSB7XFxuXFx0c3RhdGUuY3VycmVudCA9IHN0YXRlLmN1cnJlbnQgLTE7XFxufVwiLFxuICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJpZFwiOiBcInByZXZpb3VzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwic3RhdGVcIjogXCJ7XFxuXFx0XFxcInZhcmlhbnRcXFwiOlxcXCJpbml0aWFsIGxheW91dENvbXBvbmVudFxcXCIsXFxuICAgIFxcXCJpdGVtc1xcXCI6WzEsMiwzLDQsNSw2XSxcXG4gICAgXFxcImN1cnJlbnRcXFwiOiAxXFxufVwiLFxuICAgIFwic3R5bGVcIjogXCIubGF5b3V0Q29tcG9uZW50IGJ1dHRvbntcXG5cXHRjb2xvcjpyZWQ7XFxuICAgIGhlaWdodDoxMDAlO1xcbiAgICB3aWR0aDogNDBweDtcXG59XFxuXFxuLmxheW91dENvbXBvbmVudCB7XFxuXFx0d2lkdGg6MTAwJTtcXG4gICAgaGVpZ2h0OjIyMHB4O1xcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG59XFxuXFxuLmxheW91dENvbXBvbmVudCAqe1xcbiAgXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmxheW91dENvbXBvbmVudCAud2luZG93IHtcXG5cXHR3aWR0aDogNTAlO1xcbiAgICBoZWlnaHQ6MjIwcHg7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luOmF1dG87XFxuXFx0b3ZlcmZsb3c6aGlkZGVuO1xcbn1cXG5cXG4ubGF5b3V0Q29tcG9uZW50IC5jb250ZW50e1xcblxcdGhlaWdodDoyMjBweDtcXG59XFxuXFxuLmxheW91dENvbXBvbmVudCAuY29udGVudCA+IGRpdntcXG5cXHRkaXNwbGF5OmlubGluZS1ibG9jaztcXG4gICAgaGVpZ2h0OjIwMHB4O1xcbiAgICB3aWR0aDoyMjBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjpncmVlbjtcXG4gICAgbWFyZ2luOjdweDtcXG59XFxuXFxuLmxheW91dENvbXBvbmVudCAubGVmdHtcXG5cXHRwb3NpdGlvbjphYnNvbHV0ZTtcXG4gICAgbGVmdDowcHg7XFxuICAgIHRvcDowcHg7XFxufVxcblxcbi5sYXlvdXRDb21wb25lbnQgLnJpZ2h0e1xcblxcdHBvc2l0aW9uOmFic29sdXRlO1xcbiAgICByaWdodDowcHg7XFxuICAgIHRvcDowcHg7XFxufVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpZFwiOiAzMTQsXG4gICAgXCJjb25maWdcIjogXCJ7fVwiLFxuICAgIFwidmFyaWFudHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpbml0aWFsIGxheW91dENvbXBvbmVudFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJpbml0aWFsIGxheW91dENvbXBvbmVudFwiLFxuICAgICAgICAgIFwiaXRlbXNcIjogW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImN1cnJlbnRcIjogNlxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiUHJvZHVjdENvbXBvbmVudFwiLFxuICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9e3N0YXRlLnZhcmlhbnR9IGlkPVxcXCJwcm9kdWN0XFxcIj5cXG5cXHR7c3RhdGUubmFtZX1cXG48L2Rpdj5cXG5cIixcbiAgICBcImV2ZW50c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uTW91c2VFbnRlclwiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS52YXJpYW50ID0gXFxcIml0ZW0gb25faG92ZXJcXFwiO1xcbnN0YXRlLm5hbWUgPSBcXFwiQnV5IG5vd1xcXCI7XCIsXG4gICAgICAgIFwiaW5kZXhcIjogMCxcbiAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiaWRcIjogXCJwcm9kdWN0XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIm9uTW91c2VMZWF2ZVwiLFxuICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS52YXJpYW50ID0gXFxcIml0ZW0gaW5pdGlhbFxcXCI7XFxuc3RhdGUubmFtZSA9IFxcXCJQcm9kdWN0IG9uZVxcXCI7XCIsXG4gICAgICAgIFwicHVibGlzaGFibGVcIjogXCJcIixcbiAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICBcImlkXCI6IFwicHJvZHVjdFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInN0YXRlXCI6IFwie1xcblxcdFxcXCJuYW1lXFxcIiA6IFxcXCJQcm9kdWN0IG9uZVxcXCIsXFxuICAgIFxcXCJ2YXJpYW50XFxcIiA6IFxcXCJpdGVtIGluaXRpYWxcXFwiXFxufVwiLFxuICAgIFwic3R5bGVcIjogXCIuaXRlbS5pbml0aWFsIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOmRhcmtjeWFuO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtcXG59XFxuXFxuLml0ZW0ub25faG92ZXIge1xcblxcdGJhY2tncm91bmQtY29sb3I6dGVhbDtcXG4gICAgYmFja2dyb3VuZC1zaXplOmF1dG87XFxufVxcblxcbi5pdGVte1xcbiAgIFxcdGJhY2tncm91bmQtaW1hZ2U6ICRhc3NldHNbJzEuanBlZyddO1xcblxcdGhlaWdodDoyMDBweDtcXG4gICAgd2lkdGg6MjAwcHg7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblxcdHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuXFx0bGluZS1oZWlnaHQ6IDIwMHB4O1xcbn1cIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaWRcIjogOTQ5LFxuICAgIFwiY29uZmlnXCI6IFwie31cIixcbiAgICBcInZhcmlhbnRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib25faG92ZXJcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiQnV5IG5vd1wiLFxuICAgICAgICAgIFwidmFyaWFudFwiOiBcIm9uX2hvdmVyXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaXRlbXMgb25faG92ZXJcIixcbiAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiQnV5IG5vd1wiLFxuICAgICAgICAgIFwidmFyaWFudFwiOiBcIml0ZW1zIG9uX2hvdmVyXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiaXRlbSBvbl9ob3ZlclwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJCdXkgbm93XCIsXG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwiaXRlbSBvbl9ob3ZlclwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIml0ZW0gaW5pdGlhbFwiLFxuICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICBcInZhcmlhbnRcIjogXCJpdGVtIGluaXRpYWxcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNhbXBsZTogc2FtcGxlXG59IiwiXG5mdW5jdGlvbiBjb252ZXJ0VG9TdHJpbmcocHJvcGVydHkpe1xuICAgIHJldHVybiBgXCIke3Byb3BlcnR5LnNwbGl0KFwiOlwiKVswXS50cmltKCl9XCI6XCIke3Byb3BlcnR5LnNwbGl0KFwiOlwiKVsxXS50cmltKCl9XCJgXG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb09iamVjdChydWxlKXtcblxuICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc3BsaXQoXCJ7XCIpWzBdLnRyaW0oKTtcbiAgICB2YXIgcHJvcGVydGllcyA9ICd7JytydWxlLnNwbGl0KFwie1wiKVsxXS5zcGxpdChcIn1cIilbMF0uc3BsaXQoXCI7XCIpLm1hcChzPT5zLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pLm1hcChjb252ZXJ0VG9TdHJpbmcpLmpvaW4oXCIsXCIpICsnfSc7XG5cbiAgICB2YXIgZGVjbGFyYXRpb25zID0gSlNPTi5wYXJzZShwcm9wZXJ0aWVzKVxuXG4gICAgdmFyIHJ1bGUgPSB7XG4gICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgZGVjbGFyYXRpb25zOiBPYmplY3Qua2V5cyhkZWNsYXJhdGlvbnMpLm1hcChrZXk9PntcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGVjbGFyYXRpb25zW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJ1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPYmplY3RGb3JtYXQoc3R5bGUpe1xuICAgIGlmKCFzdHlsZSB8fCBzdHlsZS5sZW5ndGg9PTApe1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciBydWxlcyA9IHN0eWxlLnNwbGl0KFwifVwiKS5maWx0ZXIoQm9vbGVhbikubWFwKGl0ZW09Pml0ZW0rXCJ9XCIpO1xuICAgIHJldHVybiBydWxlcy5tYXAoY29udmVydFRvT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gcnVsZVRvU3RyaW5nKHJ1bGUpe1xuXHRyZXR1cm4gYCR7cnVsZS5zZWxlY3Rvcn0gICAge1xcbiR7ZGVjbGFyYXRpb25Ub1N0cmluZyhydWxlLmRlY2xhcmF0aW9ucyl9XFxufWBcbn1cbmZ1bmN0aW9uIGRlY2xhcmF0aW9uVG9TdHJpbmcoZGVjbGFyYXRpb25zKXtcblx0cmV0dXJuIGRlY2xhcmF0aW9ucy5tYXAoZGVjbGFyYXRpb249PmAgICAgJHtkZWNsYXJhdGlvbi5wcm9wZXJ0eX06ICAgICAke2RlY2xhcmF0aW9uLnZhbHVlfTtgKS5qb2luKFwiXFxuXCIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9TdHlsZVN0cmluZyhydWxlcyl7XG4gICAgcmV0dXJuIHJ1bGVzLm1hcChydWxlVG9TdHJpbmcpLmpvaW4oXCJcXG5cIik7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaGludHtcXG4gICAgaGVpZ2h0OjEwMHB4O1xcbiAgICB3aWR0aDoxMDAlO1xcbiAgICBib3JkZXI6IDFweCBkYXNoZWQgZ3JlZW47XFxufVxcblxcbi5oaW50RHJhZ092ZXJ7XFxuICAgIGFuaW1hdGlvbjogYmxpbmsgMXMgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgYmxpbmsge1xcbiAgICBmcm9tIHtcXG4gICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCBncmVlbjtcXG4gICAgfVxcbiAgXFxuICAgIHRvIHtcXG4gICAgICAgIGJvcmRlcjogMnB4IGRhc2hlZCBncmVlbjtcXG4gICAgfVxcbiAgfVxcblxcbi5oaW50Tm9Ecm9we1xcbiAgICBhbmltYXRpb246IGJsaW5rUmVkIDFzIGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGJsaW5rUmVkIHtcXG4gICAgZnJvbSB7XFxuICAgICAgICBib3JkZXI6IDFweCBkYXNoZWQgcmVkO1xcbiAgICB9XFxuICBcXG4gICAgdG8ge1xcbiAgICAgICAgYm9yZGVyOiAycHggZGFzaGVkIHJlZDtcXG4gICAgfVxcbiAgfVwiLCBcIlwiXSk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRodW1ibmFpbFZpZXcge1xcbiAgICB6b29tOiAwLjc7XFxufVxcblxcbi50aHVtYm5haWxWaWV3ID4gZGl2IHtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVwiLCBcIlwiXSk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogU2hvdyBncmVlbiB3aGVuIGNvbXBvbmVudCBpcyBzZWxlY3RlZCovXFxuXFxuLnNlbGVjdGVkLCAuZ3JlZW4ge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmVlbjtcXG4gICAgYmFja2dyb3VuZDogcmdiKDQzLCA0MywgNDMpO1xcbn1cXG5cXG4vKiBTaG93IGRhcmsgYmFja2dyb3VuZCB0byBjb21wb25lbnRzICovXFxuXFxuLmJhY2tncm91bmQge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzMzMzM7XFxufVxcblxcbi8qIFNob3cgc29tZSBzcGFjaW5nIGJlZm9yZSB0aGUgY29tcG9uZW50IG5hbWUgKi9cXG5cXG4uY29tcG9uZW50IC5jb21wb25lbnROYW1le1xcbiAgICBwYWRkaW5nOjdweDtcXG59XFxuXFxuLmNvbXBvbmVudCB7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG59XFxuXFxuLyogU2hvdyBjb21vcG5lbnQgcHJldmlldyBvbkRyYWcqL1xcblxcbi5kcmFnU3RhcnRlZCBzcGFuOm5vdCguY29tcG9uZW50TmFtZSl7XFxuICAgIGRpc3BsYXk6bm9uZTtcXG59XFxuXFxuLmhpZGRlbntcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XCIsIFwiXCJdKTtcblxuIiwiXG4vLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbmltcG9ydCB7cmVhZENvbXBvbmVudH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmltcG9ydCB7VW5Db250cm9sbGVkIGFzIENvZGVNaXJyb3J9IGZyb20gJ3JlYWN0LWNvZGVtaXJyb3IyJztcblxuLyoqXG4gKiBTaG93cyBDb25maWd1cmF0b3Igb24gc2VsZWN0IG9mIHZhbGlkIGNoaWxkIGNvbXBvbmVudCBuYW1lIGluIHRoZSBtYXJrdXAgYW5kIG1vdXNlT3V0IGZyb20gbWFya3VwXG4gKiBIaWRlcyBDb25maWd1cmF0b3Igb24gbW91c2VMZWF2ZSBmcm9tIHRoZSBlZGl0b3IuXG4gKi9cbmNsYXNzIEVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gcmVhZENvbXBvbmVudCh0aGlzLnByb3BzLm5hbWUpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuYW1lOiBjb21wb25lbnQ/IGNvbXBvbmVudC5uYW1lIDogXCJcIixcbiAgICAgICAgICAgIG1hcmt1cDogY29tcG9uZW50PyBjb21wb25lbnQubWFya3VwIDogXCJcIixcbiAgICAgICAgICAgIHN0YXRlOiBjb21wb25lbnQ/IGNvbXBvbmVudC5zdGF0ZSA6IFwiXCIsXG4gICAgICAgICAgICBzdHlsZTogY29tcG9uZW50PyBjb21wb25lbnQuc3R5bGUgOiBcIlwiXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBzYXZlRWxlbWVudCAoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25TYXZlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogdGhpcy5zdGF0ZS5tYXJrdXAsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5zdGF0ZS5zdHlsZSxcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLnN0YXRlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNhdmVOYW1lKGUpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG5hbWU6IGUuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgbmFtZT0gdGhpcy5zdGF0ZS5uYW1lO1xuICAgICAgICBsZXQgbWFya3VwPSB0aGlzLnN0YXRlLm1hcmt1cDtcbiAgICAgICAgbGV0IHN0eWxlPSB0aGlzLnN0YXRlLnN0eWxlO1xuICAgICAgICBsZXQgc3RhdGU9IHRoaXMuc3RhdGUuc3RhdGU7XG5cbiAgICAgICAgLy8gVE9ETzogU2hvdWxkIHBhc3MgdGhlIGN1cnJlbnQgZGF0YS4gSW5zdGVhZCBvZiBhY2Nlc3NpbmcgaXQgZnJvbSBnbG9iYWxcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGVkaXRvci10YWJcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2F2ZUVsZW1lbnQuYmluZCh0aGlzKX0gaWQ9XCJzYXZlXCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNhdmVcIj48L2k+U2F2ZSAmIGNsb3NlPC9idXR0b24+ICAgIFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yIG5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5Db21wb25lbnQgTmFtZTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbnRlciBlbGVtZW50IG5hbWVcIiB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfSBvbkNoYW5nZT17dGhpcy5zYXZlTmFtZS5iaW5kKHRoaXMpfSBpZD1cImVsZW1lbnROYW1lXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yIG1hcmt1cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkNvbXBvbmVudCBNYXJrdXA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2RlTWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0N1cnNvcj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e21hcmt1cH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IFwiZGFyY3VsYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0SW5kZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV3JhcHBpbmc6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZWRpdG9yLCBkYXRhLCBtYXJrdXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrdXA6IG1hcmt1cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3IgY3NzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+Q29tcG9uZW50IENTUzwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENvZGVNaXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3Vyc29yPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c3R5bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwidGV4dC9qYXZhc2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOiBcImRhcmN1bGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFydEluZGVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdyYXBwaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGVkaXRvciwgZGF0YSwgc3R5bGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3Igc3RhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5Db21wb25lbnQgU3RhdGU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2RlTWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0N1cnNvcj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInRleHQvamF2YXNjcmlwdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZTogXCJkYXJjdWxhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hcnRJbmRlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlZGl0b3IsIGRhdGEsIHN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcjtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmVkaXRvci10YWIge1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIGFuaW1hdGlvbjogc2xpZGUtdXAgMC4ycyBlYXNlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXVwIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgIH1cXG59XFxuXFxuaW5wdXQuZm9sZGVyOnJlYWQtb25seSB7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG5cXG4uZWRpdG9yLXRhYiBidXR0b24ge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogLTUlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbn1cXG5cXG4uc2hvd0VkaXRvcntcXG4gICAgbWFyZ2luLWJvdHRvbTozMHB4O1xcbn1cXG5cXG4uZWRpdG9yLm5hbWV7XFxuICAgIHdpZHRoOjEwJTtcXG59XFxuXFxuLmVkaXRvcntcXG4gICAgd2lkdGg6IDI5JTtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBtYXJnaW46IDVweDtcXG4gICAgbWFyZ2luLXRvcDogMnB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gRGVwZW5kZW5jaWVzLlxuXG5cbi8vIENvbXBvbmVudHMuIFxuXG5pbXBvcnQgQ29uZmlndXJhdG9yIGZyb20gXCIuL0NvbmZpZ3VyYXRvclwiO1xuaW1wb3J0IE5vZGVzIGZyb20gXCIuLi91dGlsaXRpZXMvQ29tcG9uZW50cy9Ob2Rlc1wiO1xuaW1wb3J0IEV2ZW50IGZyb20gXCIuL0V2ZW50XCI7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gUmVkdWNlcnMuXG5cbmltcG9ydCB7IHVwZGF0ZUV2ZW50LCBzZWxlY3RlZFRhZ0NoYW5nZWQsIGRlbGV0ZUV2ZW50LCB1cGRhdGVDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4vUmVkdWNlclwiO1xuXG5cbi8vIFV0aWxzLlxuXG5pbXBvcnQgeyBnZXROb2RlVHJlZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2V0LW5vZGUtdHJlZS5qc1wiO1xuaW1wb3J0IHsgcmVhZERhdGEgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuY2xhc3MgRXZlbnRzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZFRhZyA9IHRoaXMucHJvcHMuc2VsZWN0ZWRUYWc7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLnByb3BzLmNvbXBvbmVudDtcblxuICAgICAgICAvLyBSZXBvcnQgaWYgbm8gY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbXBvbmVudHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImNvbnRhaW5lciBldmVudHMtdGFiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5FdmVudHM8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+TG9va3MgbGlrZSB5b3UgZG8gbm90IGhhdmUgYW55IFdlYiBjb21wb25lbnQgY3JlYXRlZC4gVHlwZSBzb21lIFwiaHRtbFwiIG9uIHRoZSByaWdodCBcIkVkaXRvclwiIHRhYjwvcD5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcG9ydCBpZiBubyBjb21wb25lbnQgaXMgc2VsZWN0ZWQuXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuc3RhdGUuY29tcG9uZW50cy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiY29udGFpbmVyIGV2ZW50cy10YWJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkV2ZW50czwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8cD5Mb29rcyBsaWtlIHlvdSBoYXZlIG5vdCBzZWxlY3RlZCBhbnkgY29tcG9uZW50LiBDbGljayBvbiBhbnkgb2YgdGhlIGNvbXBvbmVudCBpbiB0aGUgbGVmdCBwYW5lLjwvcD5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgbm9kZVRyZWUgPSBnZXROb2RlVHJlZShjb21wb25lbnQsIGNvbXBvbmVudC5tYXJrdXAsIGNvbXBvbmVudC5zdHlsZSwgSlNPTi5wYXJzZShjb21wb25lbnQuc3RhdGUpLCBjb21wb25lbnQuZXZlbnRzKTtcblxuICAgICAgICAvLyBSZXBvcnQgZXJyb3IuXG4gICAgICAgIGlmIChub2RlVHJlZS5lcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVRyZWUuZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXBvcnQgZXJyb3IgaWYgY29tcG9uZW50IGlzIG5vdCBcbiAgICAgICAgaWYgKG5vZGVUcmVlLnJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIHRoaXMuc3RhdGUuY29tcG9uZW50cy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiY29udGFpbmVyIGV2ZW50cy10YWJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkV2ZW50czwvZGl2PlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRUYWcgPSB0aGlzLnN0YXRlLnNlbGVjdGVkVGFnIHx8IFwiXCI7XG4gICAgICAgIGxldCBldmVudHNPZlNlbGVjdGVkVGFnLCBjb25maWd1cmF0b3IsIGV2ZW50TmFtZXMgPSBbXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgICAgaWYgKHNlbGVjdGVkVGFnLmluY2x1ZGVzKFwiY2hpbGQtY29tcG9uZW50LVwiKSkge1xuICAgICAgICAgICAgLy8gR2V0IGxpc3Qgb2YgY29tcG9uZW50cy5cbiAgICAgICAgICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG5cbiAgICAgICAgICAgIC8vIEdldCBjaGlsZCBjb21wb25lbnQgbmFtZSBmcm9tIHRoZSBzZWxlY3RlZCB0YWcuXG4gICAgICAgICAgICBsZXQgY2hpbGRDb21wb25lbnROYW1lID0gc2VsZWN0ZWRUYWcuc3BsaXQoXCJjaGlsZC1jb21wb25lbnQtXCIpWzFdO1xuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjaGlsZCBjb21wb25lbnQgZnJvbSB0aGUgbGlzdCBvZiBjb21wb25lbnRzLlxuICAgICAgICAgICAgbGV0IGNoaWxkQ29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQubmFtZSA9PT0gY2hpbGRDb21wb25lbnROYW1lKTtcblxuICAgICAgICAgICAgLy8gRmluZCBldmVudHMgdGhhdCBhcmUgcHVibGlzaGFibGUgZnJvbSB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgICAgICAgZXZlbnROYW1lcyA9IGNoaWxkQ29tcG9uZW50LmV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gZXZlbnQucHVibGlzaGFibGUgPT09IHRydWUpLm1hcChwdWJsaXNoYWJsZUV2ZW50ID0+IHB1Ymxpc2hhYmxlRXZlbnQucHVibGlzaE5hbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgZXZlbnQgdmlldyBmb3IgbGlzdCBvZiBhbGwgZXZlbnRzXG4gICAgICAgICAgICBsZXQgZXZlbnRzID0gY29tcG9uZW50LmV2ZW50cy5maWx0ZXIoZXZlbnQ9PmV2ZW50TmFtZXMuZmluZChldmVudE5hbWUgPT5ldmVudE5hbWUgID09PSBldmVudC5uYW1lICYmIGV2ZW50LmlkPT09Y2hpbGRDb21wb25lbnQubmFtZSkpXG4gICAgICAgICAgICBldmVudHMgPSBldmVudHMubWFwKChldmVudCwgaW5kZXgpID0+IDxFdmVudCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fSBldmVudD17ZXZlbnR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZ0lEPXtzZWxlY3RlZFRhZ30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZXM9e2V2ZW50TmFtZXN9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNhdmU9e3VwZGF0ZUV2ZW50LmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVFdmVudD17ZGVsZXRlRXZlbnQuYmluZCh0aGlzKX0gLz4pO1xuXG4gICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGV2ZW50cyB0aGF0IGFyZSBub3QgcGFydCBvZiBzZWxlY3RlZFRhZ1xuICAgICAgICAgICAgZXZlbnRzT2ZTZWxlY3RlZFRhZyA9IHNlbGVjdGVkVGFnID8gZXZlbnRzIDogbnVsbDtcblxuICAgICAgICAgICAgY29uZmlndXJhdG9yID0gPENvbmZpZ3VyYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlQ29uZmlndXJhdGlvbi5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROYW1lPXtjaGlsZENvbXBvbmVudE5hbWV9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ9e2NvbXBvbmVudH0gLz47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSBjb21wb25lbnQuZXZlbnRzXG4gICAgICAgICAgICAgICAgLm1hcCgoZXZlbnQsIGluZGV4KSA9PiA8RXZlbnQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50PXtldmVudH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnSUQ9e3NlbGVjdGVkVGFnfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lcz17ZXZlbnROYW1lc30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZT17dXBkYXRlRXZlbnQuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUV2ZW50PXtkZWxldGVFdmVudC5iaW5kKHRoaXMpfSAvPik7XG4gICAgICAgICAgICBldmVudHNPZlNlbGVjdGVkVGFnID0gc2VsZWN0ZWRUYWcgPyBldmVudHMuZmlsdGVyKGV2ZW50ID0+IHNlbGVjdGVkVGFnLmluY2x1ZGVzKGV2ZW50LnByb3BzLmV2ZW50LmlkKSkgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJjb250YWluZXIgZXZlbnRzLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFnc1wiPlxuICAgICAgICAgICAgICAgICAgICA8Tm9kZXMgbm9kZT17bm9kZVRyZWUucmVzdWx0fSBvblNlbGVjdGVkVGFnQ2hhbmdlZD17c2VsZWN0ZWRUYWdDaGFuZ2VkLmJpbmQodGhpcyl9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge2NvbmZpZ3VyYXRvcn1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c09mU2VsZWN0ZWRUYWcgJiYgZXZlbnRzT2ZTZWxlY3RlZFRhZy5sZW5ndGg+MFxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGlzdGluZyBFdmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PntldmVudHNPZlNlbGVjdGVkVGFnfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHtzZWxlY3RlZFRhZz9cbiAgICAgICAgICAgICAgICAgICA8ZGl2PjxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5BZGQgRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PEV2ZW50IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2NvbXBvbmVudC5ldmVudHMubGVuZ3RofSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lcz17ZXZlbnROYW1lc30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnSUQ9e3NlbGVjdGVkVGFnfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TYXZlPXt1cGRhdGVFdmVudC5iaW5kKHRoaXMpfSAvPjwvZGl2PiBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgbnVsbH1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudHM7XG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIlxuXG5cbmNsYXNzIENvbmZpZ3VyYXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHRoaXMucHJvcHMucGFyZW50LmNvbmZpZylbdGhpcy5wcm9wcy5jaGlsZE5hbWVdIHx8IHsgb3ZlcnJpZGU6IGZhbHNlfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG92ZXJyaWRlOiBjb25maWcub3ZlcnJpZGUsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnZWxPdmVycmlkZSgpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG92ZXJyaWRlOiAhdGhpcy5zdGF0ZS5vdmVycmlkZVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGU6ICF0aGlzLnN0YXRlLm92ZXJyaWRlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGROYW1lOiB0aGlzLnByb3BzLmNoaWxkTmFtZSxcbiAgICAgICAgICAgIHBhcmVudE5hbWU6IHRoaXMucHJvcHMucGFyZW50Lm5hbWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2F2ZUNvbmZpZygpe1xuICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIG92ZXJyaWRlOiB0aGlzLnN0YXRlLm92ZXJyaWRlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkTmFtZTogdGhpcy5wcm9wcy5jaGlsZE5hbWUsXG4gICAgICAgICAgICBwYXJlbnROYW1lOiB0aGlzLnByb3BzLnBhcmVudC5uYW1lXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5DaGlsZCBDb25maWd1cmF0aW9uczwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2luZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+T3ZlcnJpZGUgc3RhdGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgb25DaGFuZ2U9e3RoaXMudG9nZ2VsT3ZlcnJpZGUuYmluZCh0aGlzKX0gY2hlY2tlZD17dGhpcy5zdGF0ZS5vdmVycmlkZSA/IFwiY2hlY2tlZFwiIDogXCJcIn0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25maWd1cmF0b3I7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5lcnJvciB7XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbi5pbmZvIHtcXG4gICAgY29sb3I6IHllbGxvd2dyZWVuO1xcbn1cXG5cXG5sYWJlbCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5jb25maWd1cmF0b3Ige1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLnNwYWNpbmd7XFxuICAgIG1hcmdpbjogMTBweDtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmNsYXNzIE5vZGVzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZTtcblxuXG4gICAgICAgIGlmKCFub2RlKXtcbiAgICAgICAgICAgIHJldHVybiAoPHNwYW4+bnVsbDwvc3Bhbj4pXG4gICAgICAgIH1cbiAgICAgICAgaWYodHlwZW9mIG5vZGU9PT1cInN0cmluZ1wiKXtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxsaT57bm9kZX08L2xpPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWQgPSBub2RlLnByb3BzLmlkID8gKFwiLVwiK25vZGUucHJvcHMuaWQpIDogXCJcIjtcblxuICAgICAgICAvLyBDaGVjayBpZiBpdCBjb250YWlucyBjaGlsZHJlbi5cbiAgICAgICAgaWYobm9kZS5wcm9wcyAmJiBBcnJheS5pc0FycmF5KG5vZGUucHJvcHMuY2hpbGRyZW4pKXtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUucHJvcHMuY2hpbGRyZW4ubWFwKChjaGlsZCxpbmRleCk9PjxOb2RlcyBrZXk9e2luZGV4fSBub2RlPXtjaGlsZH0gb25TZWxlY3RlZFRhZ0NoYW5nZWQ9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9Lz4pO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwic2VsZWN0ZWRFbGVtZW50XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtub2RlLnR5cGUgKyBpZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAge25vZGUudHlwZSAraWR9XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBub2RlIGNvbnRhaW5zIG9ubHkgb25lIGNoaWxkcmVuLCBqc3ggZ2V0IHRyYW5zcGlsZWQgdG8gb2JqZWN0IHJhdGhlciB0aGFuIGFycmF5LlxuICAgICAgICBlbHNlIGlmKHR5cGVvZiBub2RlLnByb3BzLmNoaWxkcmVuID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IG5vZGUucHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzZWxlY3RlZEVsZW1lbnRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9eyhub2RlLnR5cGUubmFtZSB8fCBub2RlLnR5cGUpK2lkfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7KG5vZGUudHlwZS5uYW1lIHx8IG5vZGUudHlwZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxOb2RlcyBrZXk9e2luZGV4fSBub2RlPXtjaGlsZH0gb25TZWxlY3RlZFRhZ0NoYW5nZWQ9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9Lz5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBuZXN0ZWQgY29tcG9uZW50LlxuICAgICAgICBlbHNlIGlmKHR5cGVvZiBub2RlLnR5cGUgPT09IFwiZnVuY3Rpb25cIil7XG4gICAgICAgICAgICByZXR1cm4gKDx1bD5cbiAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiIFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInNlbGVjdGVkRWxlbWVudFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e1wiY2hpbGQtY29tcG9uZW50LVwiK25vZGUudHlwZS5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAge25vZGUudHlwZS5uYW1lfVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwic2VsZWN0ZWRFbGVtZW50XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bm9kZS50eXBlK2lkfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25TZWxlY3RlZFRhZ0NoYW5nZWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAge25vZGUudHlwZSAraWR9XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVzOyIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiXG5cbi8vIENvbXBvbmVudHMuXG5cbmltcG9ydCB7VW5Db250cm9sbGVkIGFzIENvZGVNaXJyb3J9IGZyb20gJ3JlYWN0LWNvZGVtaXJyb3IyJztcblxuLy8gUmVkdWNlcnMuIFxuXG5pbXBvcnQge3VwZGF0ZUV2ZW50TmFtZSwgdXBkYXRlRXZlbnRUeXBlLCB1cGRhdGVQdWJsaXNoTmFtZX0gZnJvbSBcIi4vUmVkdWNlclwiO1xuXG4vLyBFdmVudHMuXG5cbmltcG9ydCB7cHVibGlzaEV2ZW50LCBkZWxldGVFdmVudH0gZnJvbSAnLi9FdmVudHMnO1xuXG5jbGFzcyBFdmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5ldmVudCA/IHRoaXMucHJvcHMuZXZlbnQubmFtZSA6IFwiXCIsXG4gICAgICAgICAgICByZWR1Y2VyOiB0aGlzLnByb3BzLmV2ZW50ID8gdGhpcy5wcm9wcy5ldmVudC5yZWR1Y2VyIDogXCJcIixcbiAgICAgICAgICAgIHB1Ymxpc2hhYmxlOiB0aGlzLnByb3BzLmV2ZW50ID8gdGhpcy5wcm9wcy5ldmVudC5wdWJsaXNoYWJsZSA6IFwiXCIsXG4gICAgICAgICAgICBwdWJsaXNoTmFtZTogdGhpcy5wcm9wcy5ldmVudCA/IHRoaXMucHJvcHMuZXZlbnQucHVibGlzaE5hbWUgOiBcIlwiLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkVGFnSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiU2VsZWN0IElEXCI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHVibGlzaE5hbWUgPSB0aGlzLnN0YXRlLnB1Ymxpc2hhYmxlPyA8aW5wdXQgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dXBkYXRlUHVibGlzaE5hbWUuYmluZCh0aGlzKX0gdmFsdWU9e3RoaXMuc3RhdGUucHVibGlzaE5hbWV9IHBsYWNlaG9sZGVyPVwiRW50ZXIgZXZlbnQgcHVibGlzaCBuYW1lIGZvciBvdGhlciBjb21wb25lbnRzIHRvIHN1YnNjcmliZSB0b1wiLz4gOiBudWxsO1xuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IHRoaXMucHJvcHMuZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lPT48b3B0aW9uIHZhbHVlPXtldmVudE5hbWV9Pjwvb3B0aW9uPilcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJldmVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGFjaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5FdmVudCBuYW1lPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGxpc3Q9XCJldmVudHNcIiB0eXBlPVwidGV4dFwiIG9uQ2hhbmdlPXt1cGRhdGVFdmVudE5hbWUuYmluZCh0aGlzKX0gdmFsdWU9e3RoaXMuc3RhdGUubmFtZX0gdGl0bGU9XCJFdmVudCBOYW1lXCIvPlxuICAgICAgICAgICAgICAgICAgICA8ZGF0YWxpc3QgaWQ9XCJldmVudHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtldmVudE5hbWVzfVxuICAgICAgICAgICAgICAgICAgICA8L2RhdGFsaXN0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwYWNpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgUHVibGlzaGFibGVcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG9uQ2hhbmdlPXt1cGRhdGVFdmVudFR5cGUuYmluZCh0aGlzKX0gY2hlY2tlZD17dGhpcy5zdGF0ZS5wdWJsaXNoYWJsZT8gXCJjaGVja2VkXCI6IFwiXCJ9Lz5cblxuICAgICAgICAgICAgICAgICAgICB7cHVibGlzaE5hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3BhY2luZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+RXZlbnQgcmVkdWNlcjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxDb2RlTWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucmVkdWNlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3Vyc29yPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IFwiZGFyY3VsYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0SW5kZW50OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGVkaXRvciwgZGF0YSwgcmVkdWNlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZHVjZXI6IHJlZHVjZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17cHVibGlzaEV2ZW50LmJpbmQodGhpcyl9IGlkPVwic2F2ZUV2ZW50XCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNhdmVcIj48L2k+U2F2ZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2RlbGV0ZUV2ZW50LmJpbmQodGhpcyl9IGlkPVwiZGVsZXRlRXZlbnRcIj48aSBjbGFzc05hbWU9XCJmYXMgZmEtdHJhc2hcIj48L2k+RGVsZXRlPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZXJyb3Ige1xcbiAgICBjb2xvcjogcmVkO1xcbn1cXG5cXG5cXG4uaW5mbyB7XFxuICAgIGNvbG9yOiB5ZWxsb3dncmVlbjtcXG59XFxuXFxubGFiZWwge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG4uZXZlbnQgaW5wdXQge1xcbiAgICBtYXJnaW4tbGVmdDo1cHg7XFxuICAgIHdpZHRoOjE1MHB4O1xcbn1cXG5cXG4uZXZlbnQgdGV4dGFyZWEge1xcbiAgICBtYXJnaW4tdG9wOiA4cHg7XFxuICAgIHdpZHRoOiAzMDBweDtcXG59XFxuXFxuLmlucHV0IHtcXG4gICAgcGFkZGluZzogNXB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbiAgZnVuY3Rpb24gIHVwZGF0ZUV2ZW50TmFtZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbmFtZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG4gICAgXG4gZnVuY3Rpb24gICB1cGRhdGVQdWJsaXNoTmFtZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcHVibGlzaE5hbWU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gIGZ1bmN0aW9uICB1cGRhdGVFdmVudFR5cGUoZSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcHVibGlzaGFibGU6IGUuY3VycmVudFRhcmdldC5jaGVja2VkXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHVwZGF0ZUV2ZW50TmFtZSxcbiAgICAgICAgdXBkYXRlRXZlbnRUeXBlLFxuICAgICAgICB1cGRhdGVQdWJsaXNoTmFtZSxcbiAgICAgICAgdXBkYXRlRXZlbnRUeXBlXG4gICAgfSIsImV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoRXZlbnQoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25TYXZlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIHJlZHVjZXI6IHRoaXMuc3RhdGUucmVkdWNlcixcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICAgICAgcHVibGlzaGFibGU6IHRoaXMuc3RhdGUucHVibGlzaGFibGUsXG4gICAgICAgICAgICBwdWJsaXNoTmFtZTogdGhpcy5zdGF0ZS5wdWJsaXNoTmFtZVxuICAgICAgICB9KVxuICAgIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUV2ZW50KCl7XG4gICAgICAgIHRoaXMucHJvcHMuZGVsZXRlRXZlbnQodGhpcy5wcm9wcy5pbmRleCk7XG4gICAgfSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmV2ZW50cyB7XFxuICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLmVycm9yIHtcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuLnRhZ3MudGFncyB1bCB7XFxuICAgIGJvcmRlcjogMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcXG4gICAgcGFkZGluZzo1cHg7XFxufVxcblxcbi50YWdzIHVsOmZpcnN0LWNoaWxkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IC0ycHg7XFxufVwiLCBcIlwiXSk7XG5cbiIsIlxuICAgIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFdmVudChldmVudCkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5jb21wb25lbnQpKVxuXG4gICAgICAgIC8vIEtlZXAgdGhlIGNoaWxkIGNvbXBvbmVudCBuYW1lIGFzIHRoZSBJRC4gV2lsbCBjYXVzZSBwcm9ibGVtIGluIGZ1dHVyZSBmb3IgbGlzdCByZW5kZXJpbmcgYm95LlxuICAgICAgICBpZih0aGlzLnN0YXRlLnNlbGVjdGVkVGFnLmluY2x1ZGVzKFwiY2hpbGQtY29tcG9uZW50LVwiKSl7XG4gICAgICAgICAgICBldmVudC5pZCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRUYWcuc3BsaXQoXCJjaGlsZC1jb21wb25lbnQtXCIpWzFdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGV2ZW50LmlkID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFRhZy5zcGxpdChcIi1cIilbMV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIFxuICAgICAgICBpZiAoZXZlbnQuaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWxlbWVudC5ldmVudHMucHVzaChldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAxLiBGaW5kIHRoZSBldmVudFxuICAgICAgICAgICAgbGV0IGNoYW5nZWRFdmVudEluZGV4ID0gZWxlbWVudC5ldmVudHMuZmluZEluZGV4KGU9PmUubmFtZT09PWV2ZW50Lm5hbWUpO1xuICAgICAgICAgICAgaWYoY2hhbmdlZEV2ZW50SW5kZXg9PS0xKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2hhbmdpbmcgZXZlbnQgbmFtZSB3aWxsIG5vdCBoZWxwLiBDcmVhdGUgYSBuZXcgZXZlbnRcIik7IC8vIEZlYXR1cmUgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LmV2ZW50c1tjaGFuZ2VkRXZlbnRJbmRleF0gPSBldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJvcHMub25FdmVudHNVcGRhdGUoZWxlbWVudC5ldmVudHMpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZWxlY3RlZFRhZ0NoYW5nZWQoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGVkVGFnOiBlLmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZGVsZXRlRXZlbnQoaW5kZXgpIHtcblxuICAgICAgICAvLyBHZXQgY3VycmVudCBjb21wb25lbnQuXG4gICAgICAgIGxldCBjb21wb25lbnQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuY29tcG9uZW50KSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBldmVudCB0byBiZSBkZWxldGVkLlxuICAgICAgICBjb21wb25lbnQuZXZlbnRzID0gY29tcG9uZW50LmV2ZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBlbGVtZW50cyB3aXRoIG5ldyBldmVudHMuXG4gICAgICAgIHRoaXMucHJvcHMub25FdmVudHNVcGRhdGUoY29tcG9uZW50LmV2ZW50cyk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZ3VyYXRpb24oY29uZmlnKXtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNvbmZpZ1VwZGF0ZShjb25maWcpO1xuICAgIH0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7wqBzYXZlQ29tcG9uZW50c1RvV2luZG93LCBnZXROZXN0ZWRDb21wb25lbnRzIH0gZnJvbSBcIi4vUnVudGltZVwiO1xuXG4vLyBXaHk/IEJlY2F1c2UgaW1wb3J0aW5nIFJlYWN0IGFzIHZhcmlhYmxlIGF0IGxpbmUjMiB3aWxsIGJlIGFsdGVydGVkIGJ5IGJhYmVsLiBLZWVwIGl0IGFzIGEgcHJvcGVydHksIGJhYmVsIHdpbGwgaWdub3JlIGl0Llxud2luZG93LlJlYWN0ID0gUmVhY3Q7XG53aW5kb3cuQ29tcG9uZW50ID0gUmVhY3QuQ29tcG9uZW50O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm9kZVRyZWUoZWxlbWVudCwganN4LCBzdHlsZSwgc3RhdGUsIGV2ZW50cykge1xuICAgIFxuICAgIGxldCByZXN1bHQsIGVycm9yO1xuICAgIHRyeXtcbiAgICAgICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKGVsZW1lbnQpO1xuICAgICAgICBpZiAobmVzdGVkQ29tcG9uZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzYXZlQ29tcG9uZW50c1RvV2luZG93KG5lc3RlZENvbXBvbmVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGV2YWwoQmFiZWwudHJhbnNmb3JtKGpzeCwgeyBwcmVzZXRzOiBbJ3JlYWN0J10gfSkuY29kZSlcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICBlcnJvciA9IGU7XG4gICAgfVxuICAgIGZpbmFsbHl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICByZXN1bHQsIHJlc3VsdFxuICAgICAgICB9O1xuICAgIH1cbn0iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuaW1wb3J0IER5bmFtaWNDb21wb25lbnQgZnJvbSBcIi4vRHluYW1pY0NvbXBvbmVudFwiO1xuXG4vLyBVdGlsaXRpZXMuXG5cbmltcG9ydCB7IHJlYWRDb21wb25lbnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuY2xhc3MgUHJldmlldyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLnByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICAgIGRpc3BsYXk6IFwibW9iaWxlXCJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZnJlc2goICl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29tcG9uZW50OiByZWFkQ29tcG9uZW50KHRoaXMuc3RhdGUuY29tcG9uZW50Lm5hbWUpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3dpdGNoVGFibGV0KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRpc3BsYXk6IFwidGFibGV0XCJcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzd2l0Y2hNb2JpbGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZGlzcGxheTogXCJtb2JpbGVcIlxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN3aXRjaERlc2t0b3AoKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImRlc2t0b3BcIlxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICAvLyBIZWxwcyB0byByZXJlbmRlciB3aGVuIGNoYW5nZXMgdG8gbWFya3VwL2V2ZW50cyBhcmUgbWFkZSB0byB0aGUgY29tcG9uZW50IGFuZCBwcmV2aWV3IHRoZW0uXG4gICAgICAgIGxldCByYW5kb21LZXkgPSB0aGlzLnByb3BzLmNvbXBvbmVudC5pZCoofn4oTWF0aC5yYW5kb20oKSoxMCkpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiAgY2xhc3NOYW1lPXtgY29udGFpbmVyIHByZXZpZXcgJHt0aGlzLnN0YXRlLmRpc3BsYXl9YH0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICBQcmV2aWV3XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQ29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5zd2l0Y2hUYWJsZXQuYmluZCh0aGlzKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFibGV0LWFsdFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5zd2l0Y2hNb2JpbGUuYmluZCh0aGlzKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbW9iaWxlLWFsdFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5zd2l0Y2hEZXNrdG9wLmJpbmQodGhpcyl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWRlc2t0b3BcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHluYW1pY0NvbXBvbmVudFwiPlxuICAgICAgICAgICAgICAgICAgICA8RHluYW1pY0NvbXBvbmVudCBvblNhdmU9e3RoaXMucHJvcHMub25TYXZlfSBrZXk9e3JhbmRvbUtleX0gY29tcG9uZW50PXt0aGlzLnN0YXRlLmNvbXBvbmVudH0vPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZXZpZXc7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY29udGFpbmVye1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJhY2tncm91bmQ6ICMyQzMxMzQ7XFxufVxcblxcbi8qIENlbnRlciBhbGlnbiB0aGUgdGl0bGUgKi9cXG5cXG4ucHJldmlldyAudGl0bGV7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLyogRml4IHRoZSBoZWlnaHQgYW5kIHdpZHRoIG9mIHRoZSBwcmV2aWV3IC0gZGVmYXVsdCovXFxuXFxuLnByZXZpZXcgLmR5bmFtaWNDb21wb25lbnQge1xcbiAgICB3aWR0aDozMHZ3O1xcbiAgICBoZWlnaHQ6IDYwMHB4O1xcbiAgICBvdmVyZmxvdzpzY3JvbGw7XFxufVxcblxcbi8qIEZpeCB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiBwcmV2aWV3IC0gbW9iaWxlIGRpc3BsYXkgKi9cXG5cXG4ucHJldmlldy5tb2JpbGUgLmR5bmFtaWNDb21wb25lbnQge1xcbiAgICB3aWR0aDo0NzlweDtcXG4gICAgdHJhbnNpdGlvbjogd2lkdGggLjJzO1xcbn1cXG5cXG4vKiBGaXggdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgcHJldmlldyAtIHRhYmxldCBkaXNwbGF5ICovXFxuXFxuLnByZXZpZXcudGFibGV0IC5keW5hbWljQ29tcG9uZW50e1xcbiAgICB3aWR0aDo3NjdweDtcXG4gICAgdHJhbnNpdGlvbjogd2lkdGggLjJzO1xcbn1cXG5cXG4vKiBGaXggdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgcHJldmlldyAtIGRlc2t0b3AgZGlzcGxheSAqL1xcblxcbi5wcmV2aWV3LmRlc2t0b3AgLmR5bmFtaWNDb21wb25lbnQge1xcbiAgICB3aWR0aDo5OTFweDtcXG4gICAgdHJhbnNpdGlvbjogd2lkdGggLjJzO1xcbn1cXG5cXG4vKiogSGlnaGxpZ2h0IG1vYmlsZSB3aGVuIGRpc3BsYXkgbW9kZSBpcyBtb2JpbGUgKi9cXG5cXG4ucHJldmlldy5tb2JpbGUgLmZhLW1vYmlsZS1hbHQge1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgdHJhbnNpdGlvbjogZm9udC1zaXplIC4xcyxwYWRkaW5nIC4xcyA7XFxufVxcblxcbi8qKiBIaWdobGlnaHQgdGFibGV0IHdoZW4gZGlzcGxheSBtb2RlIGlzIHRhYmxldCAqL1xcblxcbi5wcmV2aWV3LnRhYmxldCAuZmEtdGFibGV0LWFsdCB7XFxuXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICB0cmFuc2l0aW9uOiBmb250LXNpemUgLjFzLHBhZGRpbmcgLjFzIDtcXG59XFxuXFxuLyoqIEhpZ2hsaWdodCBkZXNrdG9wIHdoZW4gZGlzcGxheSBtb2RlIGlzIGRlc2t0b3AgKi9cXG5cXG4ucHJldmlldy5kZXNrdG9wIC5mYS1kZXNrdG9wIHtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIHRyYW5zaXRpb246IGZvbnQtc2l6ZSAuMXMscGFkZGluZyAuMXMgO1xcblxcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG4vLyBTdHlsZXMuXG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbi8vIENvbXBvbmVudHMuXG5cbmltcG9ydCBBc3NldCBmcm9tIFwiLi9Bc3NldFwiO1xuXG4vLyBFdmVudHMuXG5cbmltcG9ydCB7ZHJvcEhhbmRsZXIsIGRyYWdPdmVySGFuZGxlciwgZHJhZ0xlYXZlSGFuZGxlcn0gZnJvbSBcIi4vUmVkdWNlclwiO1xuXG4vLyBVdGlsaXRpZXMuXG5cbmltcG9ydCB7ZmV0Y2hGcm9tREIsIHdyaXRlVG9EQn0gZnJvbSBcIi4vZGJcIjtcblxuY2xhc3MgQXNzZXRzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjbGFzczogXCJkcm9wX3pvbmVcIixcbiAgICAgICAgICAgIGltYWdlVVJMOlwiXCIsXG4gICAgICAgICAgICBhc3NldHM6IFtdLFxuICAgICAgICAgICAgc2VsZWN0ZWRBc3NldDpcIlwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLyogU3RvcmUgdGhlIGFzc2V0cyBpbiBsb2NhbCBEQiAqL1xuXG4gICAgICAgIHRoaXMud3JpdGVUb0RCID0gd3JpdGVUb0RCLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgYXBwZW5kVG9Cb2R5KGZpbGUpe1xuICAgICAgICB2YXIgYmluID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIHZhciBuZXdGaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG5ld0ZpbGUuaW5uZXJIVE1MID0gJ0xvYWRlZCA6ICcgKyBmaWxlLm5hbWUgKyAnIHNpemUgJyArIGZpbGUuc2l6ZSArICcgQic7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobmV3RmlsZSk7XG5cblxuICAgICAgICAvKiBLZWVwIHRoZSBpbWFnZSBpbiBET00gYXMgY2FjaGUuICovXG5cbiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgIGltZy5maWxlID0gZmlsZTtcbiAgICAgICAgaW1nLnNyYyA9IGJpbjtcbiAgICAgICAgbmV3RmlsZS5hcHBlbmRDaGlsZChpbWcpO1xuICAgIH1cblxuICAgIHVwZGF0ZWRTZWxlY3RlZChlKSB7XG5cbiAgICAgICAgLyogS2VlcCB0cmFjayBvZiBzZWxlY3RlZCBhc3NldCBpbiB0aGUgc3RhdGUgKi9cblxuICAgICAgICBsZXQgYXNzZXROYW1lID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIpOyBcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3RlZEFzc2V0OiBhc3NldE5hbWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgLyogQ3JlYXRlIGFuIGFzc2V0IGNvbXBvbmVudCBmb3IgZWFjaCBhc3NldHMuICovXG5cbiAgICAgICAgbGV0IGFzc2V0cyA9IHRoaXMuc3RhdGUuYXNzZXRzLm1hcChhc3NldD0+IDxBc3NldCBhc3NldD17YXNzZXR9IHNlbGVjdGVkPXt0aGlzLnN0YXRlLnNlbGVjdGVkQXNzZXR9IG9uU2VsZWN0ZWQ9e3RoaXMudXBkYXRlZFNlbGVjdGVkLmJpbmQodGhpcyl9Lz4pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJhc3NldHNcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2ZldGNoRnJvbURCLmJpbmQodGhpcyl9PkxvYWQgQXNzZXRzPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLmNsYXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Ecm9wPXtkcm9wSGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI9e2RyYWdPdmVySGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ0xlYXZlPXtkcmFnTGVhdmVIYW5kbGVyLmJpbmQodGhpcyl9PlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPHA+RHJhZyBvbmUgb3IgbW9yZSBmaWxlcyB0byB0aGlzIERyb3AgWm9uZSAuLi48L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2VsZWN0ZWRBc3NldC5uYW1lfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHthc3NldHN9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXNzZXRzO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4vKiBTaG93IGRhc2hlZCBvdXRsaW5lIGZvciB0aGUgZHJvcCB6b25lLiovXFxuXFxuLmRyb3Bfem9uZSB7XFxuICBib3JkZXI6IDFweCBsaWdodGdyYXkgZGFzaGVkO1xcbiAgd2lkdGg6ICAyMDBweDtcXG4gIGhlaWdodDogMTAwcHg7XFxufVxcblxcbi8qIFNob3cgZGFzaGVkIG91dGxpbmUgZHVyaW5nIGRyYWcgb3Zlci4gKi9cXG5cXG4uZHJhZ19vdmVyIHtcXG4gIGJvcmRlcjogMnB4IGxpZ2h0Z3JheSBkYXNoZWQ7XFxuICB3aWR0aDogIDIwMHB4O1xcbiAgaGVpZ2h0OiAxMDBweDtcXG59XFxuXFxuLyogR2l2ZSBzb21lIHNwYWNpbmcgYXJvdW5kIGFzc2V0IG5hbWUuICovXFxuXFxuLmFzc2V0cyBwe1xcbiAgcGFkZGluZzoxNXB4OyBcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgIFwiLi9TdHlsZS5jc3NcIjtcblxuY2xhc3MgQXNzZXQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxwIGRhdGEtbmFtZT17dGhpcy5wcm9wcy5hc3NldC5uYW1lfSBvbkNsaWNrPXt0aGlzLnByb3BzLm9uU2VsZWN0ZWR9Pnt0aGlzLnByb3BzLmFzc2V0Lm5hbWV9PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBc3NldDtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLyogU2hvdyBzZWxlY3RlZCBhc3NldCB3aXRoIGEgbGlnaHQgZGFzaGVkIG91dGxpbmUgKi9cXG5cXG4uc2VsZWN0ZWRBc3NldHtcXG4gICAgYm9yZGVyOiAxcHggbGlnaHRncmF5IGRhc2hlZDtcXG59XCIsIFwiXCJdKTtcblxuIiwiXG4vLyBQdWJsaWMgZnVuY3Rpb25zLlxuXG5leHBvcnQgZnVuY3Rpb24gZHJvcEhhbmRsZXIoZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLyogU3RvcmUgdGhlIGltYWdlIGluIERCIGFuZCBpbiBET00gYWZ0ZXIgZHJvcCAqL1xuXG4gICAgW10uZm9yRWFjaC5jYWxsKGV2LmRhdGFUcmFuc2Zlci5maWxlcywgKGZpbGUpPT57XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICBmdW5jdGlvbiAoZXZlbnQsYikge1xuICAgICAgICAgICAgLy8gMS4gYXBwZW5kIHRvIGJvZHlcbiAgICAgICAgICAgIC8vIDIuIHdyaXRlIHRvIGRiLlxuICAgICAgICAgICAgdGhpcy5hcHBlbmRUb0JvZHkoZmlsZSk7XG4gICAgICAgICAgICB0aGlzLndyaXRlVG9EQihldmVudC50YXJnZXQucmVzdWx0LCBmaWxlLm5hbWUpO1xuXG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNsYXNzOiBcImRyb3Bfem9uZVwiXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYWdPdmVySGFuZGxlcihldikge1xuICAgIGNvbnNvbGUubG9nKCdGaWxlKHMpIGluIGRyb3Agem9uZScpO1xuXG4gICAgLyogU2hvdyBkcmFnIG92ZXIgdmlzdWFscyAqL1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNsYXNzOiBcImRyYWdfb3ZlclwiXG4gICAgfSlcblxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmFnTGVhdmVIYW5kbGVyKGUpIHtcblxuICAgIC8qIFNob3cgZHJvcCB2aXN1YWxzICovXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2xhc3M6IFwiZHJvcF96b25lXCJcbiAgICB9KVxufSIsIlxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVG9EQihyZXN1bHQsIG5hbWUpIHtcbiAgICB3aW5kb3cuaURCLmdldChuYW1lKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgaW1nLmhyZWYgPSBkYXRhLnJlc3VsdDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpbWFnZVVSTDogZGF0YS5yZXN1bHRcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIHdpbmRvdy5pREIucHV0KHsgbmFtZTogbmFtZSwgcmVzdWx0OiByZXN1bHQgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoRnJvbURCKCkge1xuICAgIHdpbmRvdy5pREIuZ2V0QWxsKCkudGhlbihkYXRhID0+IHtcbiAgICAgICAgLy8gc2F2ZSBpdCB0byB3aW5kb3dcbiAgICAgICAgd2luZG93LmFzc2V0cyA9IHt9O1xuICAgICAgICBkYXRhLmZvckVhY2goaW1hZ2UgPT4ge1xuICAgICAgICAgICAgd2luZG93LmFzc2V0c1tpbWFnZS5uYW1lXSA9IGltYWdlLnJlc3VsdFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGFzc2V0czogZGF0YVxuICAgICAgICB9KVxuICAgIH0pO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgb25FeHBvcnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL0V4cG9ydC9pbmRleFwiO1xuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuXG5jbGFzcyBFeHBvcnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGV4cG9ydFR5cGU6IFwiU0lNUExFXCJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRXhwb3J0VHlwZUNoYW5nZWQoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGV4cG9ydFR5cGU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzLnByb3BzLmluZGV4LCBpbnN0ZWFkIHVzZSB0aGlzIGVsZW1lbnQgaW5zdGFuY2UgaW5kZXguIFJlbW92ZXMgZHVwbGljYXRlIGNvZGVcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJFeHBvcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cImxvZ0NvZGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmV4cG9ydFR5cGUgPT09IFwibG9nQ29kZVwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkV4cG9ydFR5cGVDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdEpTIC0gbG9ncyBvdXRwdXQgdG8geW91ciBjb25zb2xlLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPC9saT4uXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIkV4cG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiU1RPUllCT09LXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5leHBvcnRUeXBlID09PSBcIlNUT1JZQk9PS1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkV4cG9ydFR5cGVDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5SZWFjdEpTIHdpdGggU3Rvcnlib29rIC0gQ29kZWJhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e29uRXhwb3J0LmJpbmQobnVsbCwgdGhpcy5zdGF0ZS5leHBvcnRUeXBlLCB0aGlzLnByb3BzLmNvbXBvbmVudC5uYW1lKX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWZpbGUtZXhwb3J0XCI+PC9pPkV4cG9ydDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cG9ydDtcbiIsImltcG9ydCB7ZXhwb3J0U2VwYXJhdGVGaWxlfSBmcm9tIFwiLi9FeHBvcnRTZXBhcmF0ZVwiO1xuaW1wb3J0IHsgbG9nQ29kZSB9IGZyb20gXCIuL2xvZ0NvZGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uRXhwb3J0KEVYUE9SVF9UWVBFLCBjb21wb25lbnROYW1lKXtcbiAgICBzd2l0Y2ggKEVYUE9SVF9UWVBFKSB7XG4gICAgICAgIGNhc2UgXCJTSU1QTEVcIjogXG4gICAgICAgICAgICBsb2dDb2RlKGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIlNUT1JZQk9PS1wiOlxuICAgICAgICAgICAgZXhwb3J0U2VwYXJhdGVGaWxlKGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGxvZ0NvZGUoY29tcG9uZW50TmFtZSk7XG4gICAgfVxufSIsImltcG9ydCB7IGNvbnZlcnRUb1JlYWN0U3RvcmllcyB9IGZyb20gXCIuLi8uLi9Db2RlR2VuZXJhdG9yL1JlYWN0U3Rvcmllc1wiO1xuaW1wb3J0IHsgY29udmVydFRvUmVhY3QgfSBmcm9tIFwiLi4vLi4vQ29kZUdlbmVyYXRvci9SZWFjdFwiO1xuXG5pbXBvcnQge8KgZ2V0TmVzdGVkQ29tcG9uZW50cywgZ2V0Q2hpbGRyZW4gfSBmcm9tIFwiLi4vLi4vUnVudGltZVwiO1xuaW1wb3J0IHsgcmVhZERhdGEgfSBmcm9tIFwiLi4vLi4vU3RvcmFnZVwiO1xuaW1wb3J0IHsgemlwRmlsZXMgfSBmcm9tIFwiLi4vLi4vTGlicmFyaWVzL3ppcEZpbGVzXCI7XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUNvbXBvbmVudHMobmVzdGVkQ29tcG9uZW50cyl7XG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KG5lc3RlZENvbXBvbmVudHMubWFwKGNvbT0+Y29tLm5hbWUpKV0ubWFwKG5hbWU9PntcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMuZmluZChlbGVtZW50PT5lbGVtZW50Lm5hbWU9PT1uYW1lKVxuICAgIH0pXG59XG5cbmNvbnN0IHJlbW92ZVBhcmFudGhlc2lzID0gKGNvbXBvbmVudCk9PntcbiAgICByZXR1cm4gY29tcG9uZW50LnJlcGxhY2UoXCIoXCIsXCJcIikucmVwbGFjZShcIn0pXCIsXCJ9XCIpXG59XG5cbmxldCBoZWFkZXJJbXBvcnRzID0gYCAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5gO1xuXG5mdW5jdGlvbiB1cGRhdGVWYXJpYW50cyhjb21wb25lbnRzKXtcblxuXG4gICAgIC8qKlxuICAgICAgKiBpZiBjb21wb25lbnQudmFyaWFudHMgaXMgZW1wdHlcbiAgICAgICogdGFrZSBpdHMgc3RhdGUgXG4gICAgICAqIHB1c2ggaXQgdG8gdmFyaWFudCB3aXRoIG5hbWUgYXMgXCJpbml0aWFsXCJcbiAgICAgICovXG5cblxuICAgIGNvbXBvbmVudHMuZm9yRWFjaChjb21wb25lbnQ9PntcbiAgICAgICAgaWYoY29tcG9uZW50LnZhcmlhbnRzLmxlbmd0aD09PTApe1xuICAgICAgICAgICAgY29tcG9uZW50LnZhcmlhbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiaW5pdGlhbFwiLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBKU09OLnBhcnNlKGNvbXBvbmVudC5zdGF0ZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgIH0pXG4gICAgcmV0dXJuIGNvbXBvbmVudHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydFNlcGFyYXRlRmlsZShjb21wb25lbnROYW1lKSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgXG4gICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHNlbGVjdGVkQ29tcG9uZW50KTtcbiAgICBsZXQgdW5pcXVlQ29tcG9uZW50cyA9IGdldFVuaXF1ZUNvbXBvbmVudHMobmVzdGVkQ29tcG9uZW50cylcbiAgICB1bmlxdWVDb21wb25lbnRzID0gdXBkYXRlVmFyaWFudHModW5pcXVlQ29tcG9uZW50cylcbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCB1bmlxdWUgY29tcG9uZW50c1xuICAgICAqIGNvbnZlcnQgaXQgdG8gaW1wb3J0IHJlYWN0ICsgaW1wb3J0IGNoaWxkcmVuIGRlcGVuZGVuY2llcyArIGV4cG9ydC5cbiAgICAgKiBcbiAgICAgKiBGb3IgZWFjaCB1bmlxdWUgY29tcG9uZW50c1xuICAgICAqIGNvbnZlcnQgdGhlIHN0b3JpZXMuXG4gICAgICovXG5cblxuXG5cblxuICAgIGxldCBpbmRpdmlkdWFsQ29tcG9uZW50cyA9IHVuaXF1ZUNvbXBvbmVudHMubWFwKGZ1bmN0aW9uKGNvbXBvbmVudCl7XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IGdldENoaWxkcmVuKGNvbXBvbmVudCk7XG4gICAgICAgIGxldCBjaGlsZHJlbkltcG9ydHMgPSBjaGlsZHJlbi5tYXAoY2hpbGQ9PmBpbXBvcnQgJHtjaGlsZH0gZnJvbSBcIi4vJHtjaGlsZH1cIjtgKS5qb2luKFwiXFxuXCIpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6Y29tcG9uZW50Lm5hbWUrXCIuanNcIixcbiAgICAgICAgICAgIGNvbnRlbnQ6YCR7aGVhZGVySW1wb3J0c31cXG4ke2NoaWxkcmVuSW1wb3J0c31cXG4gJHtyZW1vdmVQYXJhbnRoZXNpcyhjb252ZXJ0VG9SZWFjdChjb21wb25lbnQpKX0gXFxuZXhwb3J0IGRlZmF1bHQgJHtjb21wb25lbnQubmFtZX07YFxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGxldCBpbmRpdmlkdWFsU3RvcmllcyA9IHVuaXF1ZUNvbXBvbmVudHMubWFwKGZ1bmN0aW9uKGNvbXBvbmVudCl7XG4gICAgICAgIHJldHVybntcbiAgICAgICAgICAgIG5hbWU6IGNvbXBvbmVudC5uYW1lK1wiLnN0b3JpZXMuanNcIixcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnZlcnRUb1JlYWN0U3Rvcmllcyhjb21wb25lbnQpXG4gICAgICAgIH1cbiAgICB9KTtcblxuXG5cbiAgICB6aXBGaWxlcyhbLi4uaW5kaXZpZHVhbENvbXBvbmVudHMsLi4uaW5kaXZpZHVhbFN0b3JpZXNdKVxufTsiLCIvLyBFbGVtZW50cyB0byAgcmVhY3QgY29tcG9uZW50LlxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1JlYWN0U3RvcmllcyAoY29tcG9uZW50KXtcblxuICAgIGxldCBSZWFjdFN0b3JpZXMgPSBcbiAgICBgaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuICAgIGltcG9ydCAke2NvbXBvbmVudC5uYW1lfSBmcm9tIFwiLi8ke2NvbXBvbmVudC5uYW1lfVwiO1xuICAgIFxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgdGl0bGU6ICcke2NvbXBvbmVudC5uYW1lfScsXG4gICAgICAgIGNvbXBvbmVudDogJHtjb21wb25lbnQubmFtZX1cbiAgICB9XG4gICAgXG4gICAgJHtjb21wb25lbnQudmFyaWFudHMubWFwKGZ1bmN0aW9uICh2YXJpYW50KXtcbiAgICAgICAgcmV0dXJuIGBleHBvcnQgY29uc3QgJHt2YXJpYW50Lm5hbWV9ID0gKCkgPT4gPCR7Y29tcG9uZW50Lm5hbWV9IHN0YXRlPXske0pTT04uc3RyaW5naWZ5KHZhcmlhbnQuc3RhdGUpfX0+PC8ke2NvbXBvbmVudC5uYW1lfT47YFxuICAgIH0pLmpvaW4oXCJcXG5cXG5cIil9YFxuXG4gICAgcmV0dXJuIFJlYWN0U3Rvcmllcztcbn1cbiIsImltcG9ydCB7ZG93bmxvYWR9IGZyb20gXCIuL2Rvd25sb2FkRmlsZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gemlwRmlsZXMgKGFycmF5KXtcbiAgICB2YXIgemlwID0gbmV3IEpTWmlwKCk7XG5cbiAgICAvLyBHZW5lcmF0ZSBhIGRpcmVjdG9yeSB3aXRoaW4gdGhlIFppcCBmaWxlIHN0cnVjdHVyZVxuICAgIHZhciBzcmMgPSB6aXAuZm9sZGVyKFwic3JjXCIpO1xuXG4gICAgYXJyYXkuZm9yRWFjaChpdGVtPT57XG4gICAgICAgIHNyYy5maWxlKGl0ZW0ubmFtZSwgaXRlbS5jb250ZW50KVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIHRoZSB6aXAgZmlsZSBhc3luY2hyb25vdXNseVxuICAgIHppcC5nZW5lcmF0ZUFzeW5jKHt0eXBlOlwiYmxvYlwifSlcbiAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgIC8vIEZvcmNlIGRvd24gb2YgdGhlIFppcCBmaWxlXG4gICAgICAgIGRvd25sb2FkKGNvbnRlbnQsIFwiYXJjaGl2ZS56aXBcIik7XG4gICAgfSk7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkRmlsZShuYW1lLCBjb250ZW50cywgbWltZV90eXBlKSB7XG4gICAgbWltZV90eXBlID0gbWltZV90eXBlIHx8IFwidGV4dC9wbGFpblwiO1xuXG4gICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbY29udGVudHNdLCB7dHlwZTogbWltZV90eXBlfSk7XG5cbiAgICBkb3dubG9hZChibG9iLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkKGJsb2IsIG5hbWUpe1xuICAgIHZhciBkbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBkbGluay5kb3dubG9hZCA9IG5hbWU7XG4gICAgZGxpbmsuaHJlZiA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIGRsaW5rLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vIHJldm9rZU9iamVjdFVSTCBuZWVkcyBhIGRlbGF5IHRvIHdvcmsgcHJvcGVybHlcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodGhhdC5ocmVmKTtcbiAgICAgICAgfSwgMTUwMCk7XG4gICAgfTtcblxuICAgIGRsaW5rLmNsaWNrKCk7XG4gICAgZGxpbmsucmVtb3ZlKCk7XG59IiwiaW1wb3J0IHvCoGdldE5lc3RlZENvbXBvbmVudHMgfSBmcm9tIFwiLi4vLi4vUnVudGltZVwiO1xuaW1wb3J0IHsgY29udmVydFRvUmVhY3QgfSBmcm9tIFwiLi4vLi4vQ29kZUdlbmVyYXRvci9SZWFjdFwiO1xuaW1wb3J0IHsgcmVhZERhdGEgfSBmcm9tIFwiLi4vLi4vU3RvcmFnZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9nQ29kZShjb21wb25lbnROYW1lKSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHNlbGVjdGVkQ29tcG9uZW50KTtcblxuICAgIGxldCB1bmlxdWVDb21wb25lbnRzID0gWy4uLm5ldyBTZXQobmVzdGVkQ29tcG9uZW50cy5tYXAoY29tPT5jb20ubmFtZSkpXS5tYXAobmFtZT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PW5hbWUpXG4gICAgfSlcbiAgICBjb25zdCByZW1vdmVQYXJhbnRoZXNpcyA9IChjb21wb25lbnQpPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnQucmVwbGFjZShcIihcIixcIlwiKS5yZXBsYWNlKFwifSlcIixcIn1cIilcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdW5pcXVlQ29tcG9uZW50cy5tYXAoY29udmVydFRvUmVhY3QpLm1hcChyZW1vdmVQYXJhbnRoZXNpcykucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgY29uc29sZS5sb2cocmVzdWx0KTtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zZWxlY3RlZCwgLmdyZWVuIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW47XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuLnNlbGVjdGVkQXNzZXR7XFxuICAgIGJvcmRlcjogMXB4IGxpZ2h0Z3JheSBkYXNoZWQ7XFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHBvcEhpc3RvcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuY2xhc3MgSGlzdG9yeSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgfVxuXG4gICAgcmVmcmVzaFRvUHJldmlvdXMoKSB7XG4gICAgICAgIHBvcEhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnJlZnJlc2hUb1ByZXZpb3VzLmJpbmQodGhpcyl9PkdvIGJhY2s8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIaXN0b3J5O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2VsZWN0ZWQsIC5ncmVlbiB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZWVuO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNDMsIDQzLCA0Myk7XFxufVxcbi5zZWxlY3RlZEFzc2V0e1xcbiAgICBib3JkZXI6IDFweCBsaWdodGdyYXkgZGFzaGVkO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IFZhcmlhbnQgZnJvbSBcIi4vVmFyaWFudFwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jbGFzcyBWYXJpYW50cyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICBsZXQgY29tcG9uZW50ID0gdGhpcy5wcm9wcy5jb21wb25lbnQ7XG4gICAgICAgIHRoaXMuc3RhdGU9IHtcbiAgICAgICAgICAgIHZhcmlhbnRzOiBjb21wb25lbnQudmFyaWFudHMsXG4gICAgICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsZXRlVmFyaWFudChkYXRhKXtcbiAgICAgICAgbGV0IHZhcmlhbnRzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLnZhcmlhbnRzKTtcbiAgICAgICAgbGV0IHZhcmlhbnRUb0RlbGV0ZSA9IHZhcmlhbnRzLmZpbmRJbmRleCh2YXJpYW50PT4gdmFyaWFudC5uYW1lLmluY2x1ZGVzKGRhdGEubmFtZSkpXG4gICAgICAgIGlmKHZhcmlhbnRUb0RlbGV0ZSE9PS0xKXtcbiAgICAgICAgICAgIHZhcmlhbnRzLnNwbGljZSh2YXJpYW50VG9EZWxldGUsMSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5jb21wb25lbnQpKVxuICAgICAgICBjb21wb25lbnQudmFyaWFudHMgPSB2YXJpYW50cztcbiAgICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZShjb21wb25lbnQpXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBjb21wb25lbnQgPSB0aGlzLnN0YXRlLmNvbXBvbmVudDtcbiAgICAgICAgbGV0IHZhcmlhbnRzID0gdGhpcy5zdGF0ZS52YXJpYW50cztcblxuICAgICAgICBpZiggY29tcG9uZW50Lm5hbWU9PVwiXCIpe1xuICAgICAgICAgICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciB2YXJpYW50c1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgVmFyaWFudHNcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8cD5ObyBjb21wb25lbnQgc2VsZWN0ZWQ8L3A+PC9kaXY+KVxuICAgICAgICB9XG4gICAgICAgIGlmKCFjb21wb25lbnQudmFyaWFudHMpe1xuICAgICAgICAgICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciB2YXJpYW50c1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgVmFyaWFudHNcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8cD5ObyB2YXJpYW50cyBmb3VuZC48L3A+XG4gICAgICAgICAgICA8L2Rpdj4pXG4gICAgICAgIH1cblxuICAgICAgICAgICAgdmFyaWFudHMgPSB2YXJpYW50cy5tYXAoKHZhcmlhbnQsIGluZGV4KT0+IDxWYXJpYW50IFxuICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgICBzdGF0ZT17SlNPTi5zdHJpbmdpZnkodmFyaWFudC5zdGF0ZSl9XG4gICAgICAgICAgICAgICAgbmFtZT17dmFyaWFudC5uYW1lfSBcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ9e2NvbXBvbmVudH0gXG4gICAgICAgICAgICAgICAgZGVsZXRlVmFyaWFudD17dGhpcy5kZWxldGVWYXJpYW50LmJpbmQodGhpcyl9Lz4pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIHZhcmlhbnRzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICBWYXJpYW50c1xuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFyaWFudHNMaXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIHt2YXJpYW50c31cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBWYXJpYW50czsiLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gQ29tcG9uZW50cy5cbmltcG9ydCBEeW5hbWljQ29tcG9uZW50IGZyb20gXCIuLi8uLi9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnRcIjtcblxuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jbGFzcyBWYXJpYW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnByb3BzLm5hbWUgfHwgXCJcIixcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnByb3BzLnN0YXRlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGVWYXJpYW50KCl7XG4gICAgICAgIGxldCB2YXJpYW50ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5wcm9wcy5kZWxldGVWYXJpYW50KHZhcmlhbnQpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHJhbmRvbUtleSA9IHRoaXMucHJvcHMuY29tcG9uZW50LmlkKih+fihNYXRoLnJhbmRvbSgpKjEwKSk7XG5cbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wcm9wcy5jb21wb25lbnQpKVxuICAgICAgICBpZiggY29tcG9uZW50Lm5hbWU9PVwiXCIpe1xuICAgICAgICAgICAgcmV0dXJuICg8ZGl2PjwvZGl2PilcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQuc3RhdGUgPSB0aGlzLnByb3BzLnN0YXRlO1xuICAgICAgICBjb25zb2xlLmxvZyhjb21wb25lbnQuc3RhdGUpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZhcmlhbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZhcmlhbnQtY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkLz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmRlbGV0ZVZhcmlhbnQuYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdHJhc2hcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgIDxEeW5hbWljQ29tcG9uZW50IGtleT17cmFuZG9tS2V5fSBjb21wb25lbnQ9e2NvbXBvbmVudH0vPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZhcmlhbnQ7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudmFyaWFudCB7XFxuICAgIGJvcmRlcjogMXB4IGRvdHRlZCBibGFjaztcXG4gICAgcGFkZGluZzoxMHB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4udmFyaWFudCAudmlldyA+IGRpdntcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIHpvb206IC4zO1xcbn1cXG5cXG5cXG4udmFyaWFudC1jb250cm9scyBpbnB1dCB7XFxuICAgIHdpZHRoOiA4MHB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi52YXJpYW50c0xpc3R7XFxuICAgIG92ZXJmbG93OiBzY3JvbGw7XFxuICAgIG1heC1oZWlnaHQ6IDg2JTtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIENlbnRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2VudGVyOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNlbnRlcntcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIEJvdHRvbSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQm90dG9tXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm90dG9tOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmJvdHRvbXtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3R0b206MHB4O1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIGFuaW1hdGlvbjogc2xpZGUtdXAgMC40cyBlYXNlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXVwIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgIH1cXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIExlZnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZnRcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMZWZ0OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkxlZnR7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDowcHg7XFxuICAgIGFuaW1hdGlvbjogc2xpZGUtdG8tc2NyZWVuIDAuN3MgZWFzZTtcXG59XFxuXFxuQGtleWZyYW1lcyBzbGlkZS10by1zY3JlZW4ge1xcbiAgICAwJSB7XFxuICAgICAgICBsZWZ0Oi0zMDBweDtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIGxlZnQ6IDBweDtcXG4gICAgfVxcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgUmlnaHQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNlbGVjdGVkOnRoaXMucHJvcHMuc2VsZWN0ZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVNlbGVjdGVkVGFiKGV2ZW50KXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3RlZDpldmVudC50YXJnZXQuaW5uZXJUZXh0XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIC8qKiBSZWFjdCBkZXNpZ24gY2FuIGJlIG1hZGUgc2xpY2sgaWYgaXQgdGFrZXMgY2FyZSBvZiBNYXRoLlJhbmQgYW5kIHRoaXMgY29uZGl0aW9uYWwgY2hlY2sgKi9cbiAgICAgICAgLyoqIE1vcmUgb3Bwb3J0dW5pdHkgdG8gbW92ZSB0b3dhcmRzIHN0YXRlIGRyaXZlbiBjb21wb25lbnQgZGV2ZWxvcG1lbnQgKi9cblxuICAgICAgICBpZih0aGlzLnN0YXRlLnNlbGVjdGVkIT09dGhpcy5wcm9wcy5zZWxlY3RlZCl7XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodCBjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbi5tYXAoY2hpbGQ9PntcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgKDxkaXYgY2xhc3NOYW1lPXtjaGlsZC5wcm9wcy50aXRsZT09PXRoaXMuc3RhdGUuc2VsZWN0ZWQ/IFwidGFicyB0aXRsZVwiOiBcInRhYnNcIn0gb25DbGljaz17dGhpcy51cGRhdGVTZWxlY3RlZFRhYi5iaW5kKHRoaXMpfT5cbiAgICAgICAgICAgICAgICAgICAge2NoaWxkLnByb3BzLnRpdGxlfVxuICAgICAgICAgICAgICAgIDwvZGl2PilcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhYi1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVuLmZpbHRlcihjaGlsZD0+Y2hpbGQucHJvcHMudGl0bGU9PT10aGlzLnN0YXRlLnNlbGVjdGVkKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSaWdodDsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5SaWdodHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICByaWdodDowcHg7XFxuICAgIGFuaW1hdGlvbjogc2xpZGUtcmlnaHQgMC4ycyBlYXNlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBzY3JvbGw7XFxuICAgIHdpZHRoOjQwMHB4O1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXJpZ2h0IHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHJpZ2h0Oi0xMDBweDtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICByaWdodDogMHB4O1xcbiAgICB9XFxufVxcblxcbi50YWItY29udGVudHtcXG4gICAgaGVpZ2h0OjkxJTtcXG4gICAgYm9yZGVyOiAxcHggIzQwNDA0MCBzb2xpZDtcXG59XFxuXFxuLnRhYi1jb250ZW50IHVsIHtcXG4gICAgcGFkZGluZzogMTJweDtcXG59XFxuXFxuLnRhYnMge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgXFxuICAgIG1hcmdpbi10b3A6IDE1cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDExcHg7XFxuICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgQ29udGV4dE1lbnUgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgfVxuXG4gICAgY2xvc2VDb250ZXh0TWVudSgpe1xuICAgICAgICB0aGlzLnByb3BzLm9uTWVzc2FnZShcIkhJREVcIik7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkNvbnRleHRNZW51XCIgc3R5bGU9e3RoaXMucHJvcHMucG9zaXRpb259PlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRleHRNZW51OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkNvbnRleHRNZW51e1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig2NCwgNjQsIDY0KTtcXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAzMHB4IGJsYWNrO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIHBhZGRpbmc6MHB4O1xcbn1cXG4uY29udGV4dE1lbnVPcHRpb25zIGxpIHtcXG4gICAgcGFkZGluZzogMTVweDtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5jb250ZXh0TWVudU9wdGlvbnN7XFxuICAgIHBhZGRpbmctbGVmdDowcHg7XFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCB7d3JpdGVEYXRhfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRXZlbnQgKGV2ZW50cykge1xuICAgIC8vIENyZWF0ZSBuZXcgc3RhdGUuXG4gICAgbGV0IG5ld0VsZW1lbnRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSkuY29tcG9uZW50cztcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBuZXdFbGVtZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PXRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQubmFtZSlcblxuICAgIHNlbGVjdGVkQ29tcG9uZW50LmV2ZW50cyA9IGV2ZW50cztcblxuICAgIC8vIFNldCBzdGF0ZSB0byB0aGUgbmV3IHN0YXRlLlxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlbGVtZW50czogbmV3RWxlbWVudHNcbiAgICB9KTtcblxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBuZXdFbGVtZW50cylcblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDb25maWcoY29uZmlnKXtcbiAgICBcbiAgICBsZXQgbmV3RWxlbWVudHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlKS5jb21wb25lbnRzO1xuICAgIFxuICAgIGxldCBwYXJlbnQgPSBuZXdFbGVtZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PWNvbmZpZy5wYXJlbnROYW1lKTtcbiAgICBsZXQgY2hpbGQgPSBuZXdFbGVtZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PWNvbmZpZy5jaGlsZE5hbWUpO1xuXG4gICAgcGFyZW50LnN0YXRlID0gSlNPTi5wYXJzZShwYXJlbnQuc3RhdGUpO1xuXG4gICAgaWYocGFyZW50LmNvbmZpZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgcGFyZW50LmNvbmZpZyA9IHt9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGFyZW50LmNvbmZpZyA9IEpTT04ucGFyc2UocGFyZW50LmNvbmZpZyk7XG4gICAgfVxuICAgIHBhcmVudC5jb25maWdbY2hpbGQubmFtZV0gPSBjb25maWcuY29uZmlnO1xuICAgIGlmKHBhcmVudC5jb25maWdbY2hpbGQubmFtZV0ub3ZlcnJpZGUpIHsgICAgXG4gICAgICAgIHBhcmVudC5zdGF0ZVtjaGlsZC5uYW1lXSA9IFtKU09OLnBhcnNlKGNoaWxkLnN0YXRlKV07XG4gICAgfSBcbiAgICBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHBhcmVudC5zdGF0ZVtjaGlsZC5uYW1lXTtcbiAgICB9XG5cblxuICAgIHBhcmVudC5zdGF0ZSA9IEpTT04uc3RyaW5naWZ5KHBhcmVudC5zdGF0ZSlcbiAgICBwYXJlbnQuY29uZmlnPSBKU09OLnN0cmluZ2lmeShwYXJlbnQuY29uZmlnKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGVsZW1lbnRzOiBuZXdFbGVtZW50c1xuICAgIH0pXG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgbmV3RWxlbWVudHMpXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVFbGVtZW50IChlbGVtZW50KSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuY29tcG9uZW50cyk7XG4gICAgbGV0IG5ld0VsZW1lbnQ7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBleGlzdC5cbiAgICBsZXQgZWxlbWVudEV4aXN0ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1lbGVtZW50Lm5hbWUpO1xuICAgIGxldCBzZWxlY3RlZENvbXBvbmVudCA9IGNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudC5uYW1lKTtcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IGNvbXBvbmVudHMuZmluZEluZGV4KGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT10aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50Lm5hbWUpO1xuICAgIGlmKGVsZW1lbnRFeGlzdCl7XG4gICAgICAgIC8vIEZpbmQgdGhlIGVsZW1lbnQuXG4gICAgICAgIGxldCBlbGVtZW50VW5kZXJFZGl0ID0gc2VsZWN0ZWRDb21wb25lbnQ7XG5cbiAgICAgICAgLy8gTWVyZ2UuXG4gICAgICAgIGVsZW1lbnRVbmRlckVkaXQgPSBPYmplY3QuYXNzaWduKGVsZW1lbnRVbmRlckVkaXQsIGVsZW1lbnQpXG5cbiAgICAgICAgLy8gUHVzaCBpdCB0byBvcmlnaW5hbCBsaXN0LlxuICAgICAgICBjb21wb25lbnRzW3NlbGVjdGVkSW5kZXhdID0gZWxlbWVudFVuZGVyRWRpdDtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgbmV3RWxlbWVudCA9IHtcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogZWxlbWVudC5tYXJrdXAsXG4gICAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgICAgc3RhdGU6IGVsZW1lbnQuc3RhdGUgfHwgXCJ7fVwiLFxuICAgICAgICAgICAgc3R5bGU6IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBpZDogTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkqMTAwMCksXG4gICAgICAgICAgICBjb25maWc6XCJ7fVwiLFxuICAgICAgICAgICAgdmFyaWFudHM6W11cbiAgICAgICAgfTtcblxuICAgICAgICBjb21wb25lbnRzLnB1c2gobmV3RWxlbWVudCk7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSBjb21wb25lbnRzLmxlbmd0aC0xO1xuXG4gICAgICAgIC8vIEZpbmQgbm9Gb2xkZXJcbiAgICAgICAgdGhpcy5zdGF0ZS5mb2xkZXJzWzBdLmNvbnRlbnRzLnB1c2goZWxlbWVudC5uYW1lKVxuICAgICAgICAvLyBQdXNoIG5ldyBjb21wb25lbnQgaW50byBjb250ZW50cy5cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZWxlbWVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogZWxlbWVudC5tYXJrdXAsXG4gICAgICAgICAgICBzdHlsZTogZWxlbWVudC5zdHlsZSxcbiAgICAgICAgICAgIHN0YXRlOiBlbGVtZW50LnN0YXRlLFxuICAgICAgICAgICAgZXZlbnRzOiBlbGVtZW50LmV2ZW50cyB8fCBbXVxuICAgICAgICB9LFxuICAgICAgICBzaG93RWRpdG9yOiBmYWxzZSxcbiAgICAgICAgZm9sZGVyczogdGhpcy5zdGF0ZS5mb2xkZXJzXG4gICAgfSk7XG5cbiAgICB3cml0ZURhdGEoXCJmb2xkZXJzXCIsIHRoaXMuc3RhdGUuZm9sZGVycylcbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgY29tcG9uZW50cylcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWRDb21wb25lbnQgKCBjb21wb25lbnROYW1lLCBlKSB7XG5cbiAgICAvLyBGaW5kIHRoZSBlbGVtZW50IGZyb20gc3RhdGUgdGhhdCBtYXRjaGVzIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZWxlbWVudC5cbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSB0aGlzLnN0YXRlLmNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09Y29tcG9uZW50TmFtZSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHN0YXRlIHdpdGggc2VsZWN0ZWRFbGVtZW50LlxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZENvbXBvbmVudFxuICAgIH0pXG59XG4iLCJpbXBvcnQge3dyaXRlRGF0YX0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5pbXBvcnQge2ZpbmRGb2xkZXIsIGZpbmRQYXJlbnQsIGZpbmRQYXJlbnRGb2xkZXJ9IGZyb20gXCIuLi91dGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL2ZpbmRGb2xkZXJzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRlbGV0ZUNvbXBvbmVudChldmVudCkge1xuXG4gICAgbGV0IGNvbXBvbmVudE5hbWUgPSB0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50Lm5hbWU7XG4gICAgbGV0IGZvbGRlciA9IGZpbmRQYXJlbnQoY29tcG9uZW50TmFtZSwgdGhpcy5zdGF0ZS5mb2xkZXJzWzBdKVxuXG4gICAgbGV0IGNvbnRlbnRJbmRleCA9IGZvbGRlci5jb250ZW50cy5maW5kSW5kZXgoY29udGVudD0+Y29udGVudD09PWNvbXBvbmVudE5hbWUpO1xuICAgIGZvbGRlci5jb250ZW50cy5zcGxpY2UoY29udGVudEluZGV4LCAxKTtcbiAgICBsZXQgY29tcG9uZW50cyA9IEFycmF5LmZyb20odGhpcy5zdGF0ZS5jb21wb25lbnRzKTtcbiAgICBcbiAgICBsZXQgaW5kZXggPSBjb21wb25lbnRzLmZpbmRJbmRleChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09Y29tcG9uZW50TmFtZSlcblxuICAgIGNvbXBvbmVudHMuc3BsaWNlKGluZGV4LDEpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGZvbGRlcnM6IHRoaXMuc3RhdGUuZm9sZGVyc1xuICAgIH0pXG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgY29tcG9uZW50cyk7XG4gICAgd3JpdGVEYXRhKFwiZm9sZGVyc1wiLCB0aGlzLnN0YXRlLmZvbGRlcnMpO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRlbGV0ZUZvbGRlcihUWVBFLCBmb2xkZXJOYW1lKXtcblxuXG4gICAgbGV0IGZvbGRlcnMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuZm9sZGVycylcbiAgICBsZXQgbm9Gb2xkZXIgPSBmb2xkZXJzWzBdO1xuXG4gICAgLyoqIERlbGV0ZSB0aGUgZm9sZGVyLiBXaGlsZSBkZWxldGluZyBvbmx5IHRoZSBmb2xkZXIsIG1vdmUgaXRzIGNvbnRlbnRzIHRvIHBhcmVudCBmb2xkZXIgKi9cblxuICAgIGxldCBwYXJlbnRGb2xkZXIgPSBmaW5kUGFyZW50Rm9sZGVyKGZvbGRlck5hbWUsIGZvbGRlcnNbMF0pXG5cbiAgICBsZXQgZm9sZGVyVG9EZWxldGUgPSBmaW5kRm9sZGVyKGZvbGRlck5hbWUsIGZvbGRlcnNbMF0pXG5cbiAgICBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgY2FzZSBcIkZPTERFUl9SRVRBSU5fQ09OVEVOVFNcIjpcbiAgICAgICAgICAgIG5vRm9sZGVyLmNvbnRlbnRzLnB1c2goLi4uZm9sZGVyVG9EZWxldGUuY29udGVudHMpO1xuICAgICAgICAgICAgbGV0IGRlbGV0ZUluZGV4ID0gcGFyZW50Rm9sZGVyLmNvbnRlbnRzLmZpbmRJbmRleChjb250ZW50PT50eXBlb2YgY29udGVudCA9PT0gXCJvYmplY3RcIiAmJiBjb250ZW50Lm5hbWUgPT09IGZvbGRlck5hbWUpXG4gICAgICAgICAgICBwYXJlbnRGb2xkZXIuY29udGVudHMuc3BsaWNlKGRlbGV0ZUluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRm9sZGVycyhmb2xkZXJzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgICAgY2FzZSBcIkZPTERFUl9BTkRfQ09OVEVOVFNcIjpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJFTlRJUkVfRk9MREVSXCI6XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn0iLCJsZXQgZm9sZGVyRm91bmQgPSBcIlwiO1xubGV0IHBhcmVudEZvbGRlciA9IFwiXCI7XG5sZXQgZm9sZGVyUGFyZW50Rm9sZGVyID0gXCJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYXJlbnQoY29tcG9uZW50TmFtZSwgZm9sZGVyKXtcblxuICAgIGxldCBjb250ZW50cyA9IGZvbGRlci5jb250ZW50cztcblxuICAgIGZvcihsZXQgaT0wO2k8IGNvbnRlbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBjb250ZW50c1tpXTtcbiAgICAgICAgaWYoY29tcG9uZW50TmFtZT09PWNvbnRlbnQpe1xuICAgICAgICAgICAgcGFyZW50Rm9sZGVyID0gZm9sZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmKHR5cGVvZiBjb250ZW50ID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgICAgIGZpbmRQYXJlbnQoY29tcG9uZW50TmFtZSwgY29udGVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRGb2xkZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFyZW50Rm9sZGVyKGZvbGRlck5hbWUsIGZvbGRlcil7XG4gICAgXG4gICAgbGV0IGNvbnRlbnRzID0gZm9sZGVyLmNvbnRlbnRzO1xuXG4gICAgZm9yKGxldCBpPTA7aTwgY29udGVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgY29udGVudCA9IGNvbnRlbnRzW2ldO1xuXG4gICAgICAgIGlmKHR5cGVvZiBjb250ZW50ID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgICAgIGlmKGNvbnRlbnQubmFtZSA9PT0gZm9sZGVyTmFtZSl7XG4gICAgICAgICAgICAgICAgZm9sZGVyUGFyZW50Rm9sZGVyPSBmb2xkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5kUGFyZW50Rm9sZGVyKGZvbGRlck5hbWUsIGNvbnRlbnQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm9sZGVyUGFyZW50Rm9sZGVyO1xufVxuXG4vLyBHaXZlbiBmb2xkZXJzIGFuZCBhIGZvbGRlcm5hbWUsIGZpbmRzIGEgZm9sZGVyIGFuZCByZXR1cm5zIGl0LlxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRGb2xkZXIoZm9sZGVyTmFtZSAsIGZvbGRlciApe1xuXG4gICAgLy8gUmV0dXJuIGVhcmx5IGlmIHR5cGUgaXMgc3RyaW5nLlxuICAgIGlmKHR5cGVvZiBmb2xkZXIgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgZm9sZGVyID09PSBcIm9iamVjdFwiKXtcblxuICAgICAgICAvLyBSZXR1cm4gZm9sZGVyIGlmIG5hbWUgbWF0Y2hlcy5cbiAgICAgICAgaWYoZm9sZGVyLm5hbWU9PT1mb2xkZXJOYW1lKXtcbiAgICAgICAgICAgIGZvbGRlckZvdW5kID0gZm9sZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbnRlbnRzID0gZm9sZGVyLmNvbnRlbnRzO1xuXG4gICAgICAgIGZvcihsZXQgaT0wO2k8IGNvbnRlbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjb250ZW50ID0gY29udGVudHNbaV07XG4gICAgICAgICAgICBmaW5kRm9sZGVyKGZvbGRlck5hbWUsIGNvbnRlbnQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm9sZGVyRm91bmQ7XG59IiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG4vLyBEZXBlbmRlbmNpZXMuXG5pbXBvcnQgXCIuL0luZGV4L2luZGV4LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzLlxuXG5pbXBvcnQgQ29tcG9uZW50cyBmcm9tIFwiLi9Db21wb25lbnRzXCI7XG5pbXBvcnQgRWRpdG9yIGZyb20gXCIuL0VkaXRvclwiO1xuaW1wb3J0IEV2ZW50cyBmcm9tIFwiLi9FdmVudHNcIjtcbmltcG9ydCBQcmV2aWV3IGZyb20gXCIuL1ByZXZpZXdcIjtcbmltcG9ydCBBc3NldHMgZnJvbSBcIi4vQXNzZXRzXCI7XG5pbXBvcnQgRXhwb3J0IGZyb20gXCIuL0V4cG9ydFwiO1xuaW1wb3J0IEhpc3RvcnkgZnJvbSBcIi4vSGlzdG9yeVwiO1xuaW1wb3J0IFZhcmlhbnRzIGZyb20gXCIuL1ZhcmlhbnRzXCI7XG5cbi8vIEJlaGF2aW91ciBjb21wb25lbnRzLlxuXG5pbXBvcnQgQ2VudGVyIGZyb20gXCIuL1V0aWxpdGllcy9Db21wb25lbnRzL0NlbnRlclwiO1xuaW1wb3J0IEJvdHRvbSBmcm9tIFwiLi9VdGlsaXRpZXMvQ29tcG9uZW50cy9Cb3R0b21cIjtcbmltcG9ydCBMZWZ0IGZyb20gXCIuL1V0aWxpdGllcy9Db21wb25lbnRzL0xlZnRcIjtcbmltcG9ydCBSaWdodCBmcm9tIFwiLi9VdGlsaXRpZXMvQ29tcG9uZW50cy9SaWdodFwiO1xuXG4vLyBVdGlsaXR5IGNvbXBvbmVudHMuXG5cbmltcG9ydCBDb250ZXh0TWVudSBmcm9tIFwiLi91dGlsaXRpZXMvQ29tcG9uZW50cy9Db250ZXh0TWVudVwiO1xuXG4vLyBSZWR1Y2Vycy5cbmltcG9ydCB7IHVwZGF0ZUV2ZW50LCB1cGRhdGVDb25maWcsIHNhdmVFbGVtZW50LCB1cGRhdGVTZWxlY3RlZENvbXBvbmVudCB9IGZyb20gXCIuL0luZGV4L1JlZHVjZXJcIjtcblxuLy8gVXRpbHNcbmltcG9ydCB7IHJlYWREYXRhLCB3cml0ZURhdGEgfSBmcm9tIFwiLi91dGlsaXRpZXMvU3RvcmFnZVwiO1xuaW1wb3J0IHtvbkRlbGV0ZUNvbXBvbmVudCwgb25EZWxldGVGb2xkZXJ9IGZyb20gXCIuL0NvbXBvbmVudHMvRXZlbnRzXCI7XG5cbmNsYXNzIEluZGV4IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgICAgICAgc2VsZWN0ZWRUYWc6IFwiXCIsXG4gICAgICAgICAgICBjb21wb25lbnQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIG1hcmt1cDogXCJcIixcbiAgICAgICAgICAgICAgICBzdHlsZTogXCJcIixcbiAgICAgICAgICAgICAgICBzdGF0ZTogXCJ7IH1cIixcbiAgICAgICAgICAgICAgICBldmVudHM6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0ZWRDb21wb25lbnQ6IFwiXCIsXG4gICAgICAgICAgICBmb2xkZXJzOiByZWFkRGF0YShcImZvbGRlcnNcIiksXG4gICAgICAgICAgICBzaG93RWRpdG9yOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdGVkVGFiOiBcIkV2ZW50c1wiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVDb25maWcgPSB1cGRhdGVDb25maWcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVFdmVudCA9IHVwZGF0ZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2F2ZUVsZW1lbnQgPSBzYXZlRWxlbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkQ29tcG9uZW50ID0gdXBkYXRlU2VsZWN0ZWRDb21wb25lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgZG9jdW1lbnQub25rZXlkb3duID0gZnVuY3Rpb24ga2V5ZG93bihlKXtcbiAgICAgICAgICAgIGlmKGUuYWx0S2V5ICYmIGUua2V5Q29kZT09NjkpIHsgLy8gQWx0ICsgRVxuICAgICAgICAgICAgICAgIC8vIE9wZW4vY2xvc2UgZWRpdG9yIGlmIGFueSBjb21wb25lbnQgaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0VkaXRvcjogIXRoaXMuc3RhdGUuc2hvd0VkaXRvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihlLmFsdEtleSAmJiBlLmtleUNvZGU9PTgyKXsgLy8gQWx0ICsgUlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBvcGVuUmlnaHQ6ICF0aGlzLnN0YXRlLm9wZW5SaWdodCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWI6IFwiRXZlbnRzXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihlLmFsdEtleSAmJiBlLmtleUNvZGU9PTg2KXsgLy8gQWx0ICsgVlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBvcGVuUmlnaHQ6ICF0aGlzLnN0YXRlLm9wZW5SaWdodCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWI6IFwiVmFyaWFudHNcIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgIH1cblxuICAgIHVwZGF0ZVByZXZpZXcoZWxlbWVudCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHByZXZpZXdDb21wb25lbnQ6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlRm9sZGVycyhmb2xkZXJzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9sZGVyczogZm9sZGVyc1xuICAgICAgICB9KVxuICAgICAgICB3cml0ZURhdGEoXCJmb2xkZXJzXCIsIGZvbGRlcnMpXG4gICAgfVxuXG4gICAgb3BlbkVkaXRvcigpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaG93RWRpdG9yOiB0cnVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgb3BlbkV4cG9ydFRhYihlKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3RlZFRhYjogXCJFeHBvcnRcIlxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGV4dGVuZENvbXBvbmVudCgpe1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAxLiBDcmVhdGUgd2lyZWZyYW1lIGNvbXBvbmVudFxuICAgICAgICAgKiAyLiBFeHRlbmQgYSB3aXJlZnJhbWUgY29tcG9uZW50IHRvIGNyZWF0ZSBQcm90b3R5cGUgY29tcG9uZW50XG4gICAgICAgICAqL1xuICAgICAgICBcbiAgICB9XG4gICAgb25TaG93Q29udGV4dE1lbnUoZSl7XG4gICAgICAgIFxuICAgICAgICBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjb21wb25lbnRcIikgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY29tcG9uZW50TmFtZVwiKSkgeyAvLyBjaGVjayBpZiBpdCBpcyBhIGNvbXBvbmVudC5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY29udGV4dE1lbnVDaGlsZHJlbiA9IDx1bCBjbGFzc05hbWU9XCJjb250ZXh0TWVudU9wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17b25EZWxldGVDb21wb25lbnQuYmluZCh0aGlzKX0+RGVsZXRlIENvbXBvbmVudDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIG9uQ2xpY2s9e3RoaXMub3BlbkV4cG9ydFRhYi5iaW5kKHRoaXMpfT5FeHBvcnQgQ29tcG9uZW50PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17dGhpcy5leHRlbmRDb21wb25lbnQuYmluZCh0aGlzKX0+RXh0ZW5kIENvbXBvbmVudDwvbGk+XG4gICAgICAgICAgICA8L3VsPjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImZhLWZvbGRlci1vcGVuXCIpIHx8IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImZhLWZvbGRlclwiKSkgey8vIGNoZWNrIGlmIGl0IGlzIGEgZm9sZGVyLlxuICAgICAgICAgICAgbGV0IGZvbGRlck5hbWUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZm9sZGVyLW5hbWVcIik7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY29udGV4dE1lbnVDaGlsZHJlbiA9ICA8dWwgY2xhc3NOYW1lPVwiY29udGV4dE1lbnVPcHRpb25zXCI+XG4gICAgICAgICAgICA8bGkgb25DbGljaz17b25EZWxldGVGb2xkZXIuYmluZCh0aGlzLCBcIkZPTERFUl9SRVRBSU5fQ09OVEVOVFNcIiwgZm9sZGVyTmFtZSl9PkRlbGV0ZSBmb2xkZXIgYW5kIHJldGFpbiBjb250ZW50czwvbGk+XG4gICAgICAgICAgICA8bGkgb25DbGljaz17b25EZWxldGVGb2xkZXIuYmluZCh0aGlzLCBcIlJFVEFJTl9GT0xERVJfREVMRVRFX0NPTlRFTlRTXCIsZm9sZGVyTmFtZSl9PktlZXAgRm9sZGVyIGFuZCBkZWxldGUgY29udGVudHM8L2xpPlxuICAgICAgICAgICAgPGxpIG9uQ2xpY2s9e29uRGVsZXRlRm9sZGVyLmJpbmQodGhpcywgXCJFTlRJUkVfRk9MREVSXCIsZm9sZGVyTmFtZSl9PkRlbGV0ZSBGb2xkZXIgYW5kIGNvbnRlbnRzPC9saT5cbiAgICAgICAgICAgIDxsaSBvbkNsaWNrPXt0aGlzLm9wZW5FeHBvcnRUYWIuYmluZCh0aGlzKX0+RXhwb3J0IEZvbGRlcjwvbGk+XG4gICAgICAgIDwvdWw+O1xuXG4gICAgICAgIH1cbiAgICAgICAgIFxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNob3dDb250ZXh0TWVudTp0cnVlLFxuICAgICAgICAgICAgY29udGV4dE1lbnVQb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHRvcDogYCR7ZS5jbGllbnRZfXB4YCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBgJHtlLmNsaWVudFh9cHhgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGhpZGVDb250ZXh0TWVudSgpe1xuICAgICAgICBpZih0aGlzLnN0YXRlLnNob3dDb250ZXh0TWVudSl7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzaG93Q29udGV4dE1lbnU6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Db250ZXh0TWVudU1lc3NhZ2UobWVzc2FnZSl7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZSkge1xuICAgICAgICAgICAgY2FzZSBcIkhJREVcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvbnRleHRNZW51OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gICAgXG5cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZENvbXBvbmVudCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQgfHwgdGhpcy5zdGF0ZS5jb21wb25lbnQ7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IG9uQ29udGV4dE1lbnU9e3RoaXMub25TaG93Q29udGV4dE1lbnUuYmluZCh0aGlzKX0gb25DbGljaz17dGhpcy5oaWRlQ29udGV4dE1lbnUuYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAgPExlZnQ+XG4gICAgICAgICAgICAgICAgICAgIDxDb21wb25lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzPXt0aGlzLnN0YXRlLmNvbXBvbmVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJzPXt0aGlzLnN0YXRlLmZvbGRlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvbXBvbmVudD17dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQ29tcG9uZW50c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29udHJvbHM9e3RydWV9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlbkVkaXRvcj17dGhpcy5vcGVuRWRpdG9yLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbj17dGhpcy51cGRhdGVTZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRm9sZGVyc1VwZGF0ZT17dGhpcy51cGRhdGVGb2xkZXJzLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9MZWZ0PlxuICAgICAgICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICAgICAgICAgIDxQcmV2aWV3XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e3NlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJQcmV2aWV3XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZT17dGhpcy5zYXZlRWxlbWVudH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8L1ByZXZpZXc+XG4gICAgICAgICAgICAgICAgPC9DZW50ZXI+XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCAgJiYgdGhpcy5zdGF0ZS5vcGVuUmlnaHQgP1xuICAgICAgICAgICAgICAgICAgICA8UmlnaHQgXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17dGhpcy5zdGF0ZS5zZWxlY3RlZFRhYn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgPEV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e3NlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnPXt0aGlzLnN0YXRlLnNlbGVjdGVkVGFnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHM9e3RoaXMuc3RhdGUuY29tcG9uZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkV2ZW50c1VwZGF0ZT17dGhpcy51cGRhdGVFdmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNvbmZpZ1VwZGF0ZT17dGhpcy51cGRhdGVDb25maWd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJFdmVudHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxIaXN0b3J5IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiSGlzdG9yeVwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBc3NldHMgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJBc3NldHNcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RXhwb3J0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiRXhwb3J0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e3NlbGVjdGVkQ29tcG9uZW50fS8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VmFyaWFudHMgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJWYXJpYW50c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25VcGRhdGU9IHtzYXZlRWxlbWVudC5iaW5kKHRoaXMpfS8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmlnaHQ+XG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbH1cblxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dFZGl0b3IgP1xuICAgICAgICAgICAgICAgICAgICA8Qm90dG9tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PXtzZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtzZWxlY3RlZENvbXBvbmVudC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmt1cD17c2VsZWN0ZWRDb21wb25lbnQubWFya3VwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzZWxlY3RlZENvbXBvbmVudC5zdHlsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZT17c2VsZWN0ZWRDb21wb25lbnQuc3RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJFZGl0b3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZT17dGhpcy5zYXZlRWxlbWVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm90dG9tPlxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgPEJvdHRvbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2VudGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2hvd0VkaXRvclwib25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNob3dFZGl0b3I6IHRydWUgfSl9Pk9wZW4gRWRpdG9yPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DZW50ZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JvdHRvbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvd0NvbnRleHRNZW51PzxDb250ZXh0TWVudSBjaGlsZHJlbj17dGhpcy5zdGF0ZS5jb250ZXh0TWVudUNoaWxkcmVufSBwb3NpdGlvbj17dGhpcy5zdGF0ZS5jb250ZXh0TWVudVBvc2l0aW9ufSBvbk1lc3NhZ2U9e3RoaXMub25Db250ZXh0TWVudU1lc3NhZ2UuYmluZCh0aGlzKX0vPjpudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuY29uc29sZS5sb2coXCJTb3VyY2UgY29kZSBodHRwczovL2dpdGh1Yi5jb20vaW12ZXRyaS91aS1lZGl0b3JcIilcblJlYWN0RE9NLnJlbmRlcig8SW5kZXggLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5kZXhcIikpOyJdLCJzb3VyY2VSb290IjoiIn0=