(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,,function(e,t,n){"use strict";var o=n(40);e.exports={readData:o.readData,writeData:o.writeData,readComponent:o.readComponent,writeComponent:o.writeComponent,popHistory:o.popHistory}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.saveComponentsToWindow=function(e){e.forEach(function(e){!function(e){(0,a.hasAssets)(e.state)&&(e.state=JSON.parse((0,a.nameToURL)(JSON.stringify(e.state))));(function(e,t){window.assets&&(e=(0,a.nameToURL)(e));[].concat(i(document.querySelectorAll("[data-component-name='"+t+"']"))).forEach(function(e){e.remove()});var n=document.createElement("style");n.setAttribute("data-component-name",t),n.type="text/css",n.innerHTML=e,document.body.appendChild(n)})(e.style,e.name),window[e.name]=(0,o.createComponent)(e)}(JSON.parse(JSON.stringify(e)))})},t.getChildren=function(e){var t=(0,r.readData)("ui-editor");if(s(e.markup)){return t.filter(function(t){return e.markup.includes(t.name)}).map(function(e){return e.name})}return[]},t.getNestedComponents=function e(t){var n=(0,r.readData)("ui-editor");var o=[t];if(s(t.markup)){var a=n.filter(function(e){return t.markup.includes(e.name)}),l=a.map(e).flat(3);o.push.apply(o,i(l))}return o.filter(function(e){return e&&e.markup})};var o=n(39),r=n(3),a=n(42);function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function s(e){return(0,r.readData)("ui-editor").filter(function(t){return e.includes(t.name)}).length>0}window.saveVariant=function(e,t){var n=(0,r.readData)("ui-editor"),o=n.find(function(t){return t.name.includes(e)}),i=JSON.parse(o.state);void 0!==i.variant&&void 0!==t.variant||console.error("Add a variant property with a text value"),0===o.variants.length&&(o.variants=[{name:i.variant,state:(0,a.urlToName)(JSON.stringify(i))}]),o.variants.find(function(e){return e.name===t.variant})||o.variants.push({name:t.variant,state:(0,a.urlToName)(JSON.stringify(t))}),(0,r.writeData)("ui-editor",n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=(n(38),n(4));n(43);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"dragOverHandler",value:function(e){e.currentTarget.querySelector(".content")||e.target.classList.add("hintNoDrop"),e.target.classList.contains("content")&&(e.target.classList.add("hintDragOver"),e.target.children.length>1&&console.log("YES")),e.stopPropagation(),e.preventDefault()}},{key:"dropComponent",value:function(e){var t=e.dataTransfer.getData("component-name"),n=this.state.component,o="<"+t+"></"+t+">";n.markup=n.markup.replace('content">','content">'+o),this.props.onSave(n)}},{key:"render",value:function(){if(void 0===this.state.component.name)return i.default.createElement("p",null,"No component selected.");var e=(0,s.getNestedComponents)(this.state.component);return e.length>0&&(0,s.saveComponentsToWindow)(e),window[this.state.component.name]?i.default.createElement("div",{onDragOver:this.dragOverHandler.bind(this),onDrop:this.dropComponent.bind(this)},i.default.createElement(window[this.state.component.name])):i.default.createElement("div",null)}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReact=function(e){e.events.forEach(function(e){e.id=e.id.replace("-","")});var t=function(e){return e.markup.replace(">"," {...this.props}>{this.props.children}")}(e),n=function(t){var n=JSON.parse(e.config);return Object.keys(n).forEach(function(e){if(n[e].override){var o="<"+e+"></"+e+">",r="{state."+e+".map((item,i)=>"+("<"+e+" state={item} key={~~(Math.random()*100)}></"+e+">")+")}";t=t.replace(o,r)}}),t}(t),o=function(e,t){return t.forEach(function(t){var n='id="'+t.id+'"';e=e.includes(n)?e.replace(n,n+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}"):e.replace("<"+t.id,"<"+t.id+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}")}),e.split("state.").join("this.state.")}(n,e.events),r=function(){if(window.saveVariant)return'window.saveVariant("'+e.name+'",state)'}();return"(\nclass "+e.name+" extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.props.state || "+e.state+";\n\n        var dynamicStyle = document.createElement('style');\n        dynamicStyle.type = 'text/css';\n        dynamicStyle.innerHTML = `"+e.style+"`;\n        document.body.appendChild(dynamicStyle)\n    }\n\n    "+e.events.map(function(e){return e.publishable?"\n            \n    "+(e.id+e.name)+" (e) {\n        var state = JSON.parse(JSON.stringify(this.state))\n        "+e.reducer+"\n        debugger;\n        this.setState(state);\n        e.state = state;\n        this.props."+e.publishName+"? this.props."+e.publishName+"(e):null;\n    }":"\n    "+(e.id+e.name)+" (e) {\n        var state = JSON.parse(JSON.stringify(this.state))\n        "+e.reducer+"\n        debugger;\n        "+r+"\n        this.setState(state);\n    }\n"}).join("\n")+"\n\n    render() {\n        return ("+o+")\n    }\n})\n"}},,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.findParent=function e(t,n){var r=n.contents;for(var i=0;i<r.length;i++){var s=r[i];t===s&&(a=n),"object"===(void 0===s?"undefined":o(s))&&e(t,s)}return a},t.findParentFolder=function e(t,n){var r=n.contents;for(var a=0;a<r.length;a++){var s=r[a];"object"===(void 0===s?"undefined":o(s))&&(s.name===t&&(i=n),e(t,s))}return i},t.findFolder=function e(t,n){if("string"==typeof n)return!1;if("object"===(void 0===n?"undefined":o(n))){n.name===t&&(r=n);for(var a=n.contents,i=0;i<a.length;i++){var s=a[i];e(t,s)}}return r};var r="",a="",i=""},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.findParent=function e(t,n){var r=n.contents;for(var i=0;i<r.length;i++){var s=r[i];t===s&&(a=n),"object"===(void 0===s?"undefined":o(s))&&e(t,s)}return a},t.findParentFolder=function e(t,n){var r=n.contents;for(var a=0;a<r.length;a++){var s=r[a];"object"===(void 0===s?"undefined":o(s))&&(s.name===t&&(i=n),e(t,s))}return i},t.findFolder=function e(t,n){if("string"==typeof n)return!1;if("object"===(void 0===n?"undefined":o(n))){n.name===t&&(r=n);for(var a=n.contents,i=0;i<a.length;i++){var s=a[i];e(t,s)}}return r};var r="",a="",i=""},,,,,,function(e,t,n){var o=n(18);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,'body {\n    position:relative;\n    color: #d9d9d9;\n    font-family: "Nunito Sans",-apple-system,".SFNSText-Regular","San Francisco",BlinkMacSystemFont,"Segoe UI","Helvetica Neue",Helvetica,Arial,sans-serif;\n    margin: 0px;\n}\n\nli , label, p, .rules , input, textarea{\n    font-size: 9px;\n}\n\ninput, textarea { \n    background: #2b2b2b;\n    color: #d9d9d9;\n    opacity: 0.75;\n    vertical-align: bottom;\n}\n\ninput[type="text"] {\n    -webkit-appearance: textarea;\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\nul label input {\n    width: 10px;\n}\n\nul, li {\n    padding-left: 5px;\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\nbutton {\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 5px;\n    background-color: #343a40;\n    margin-left: 4px;\n}\n\nbutton i{\n    padding-right:4px;\n}\n\nbutton:hover {\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\nul,li, ul label {\n    color: rgba(255,255,255,0.5);\n}\n\nul label:hover, li:hover, .content:hover{\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\n#index{\n    margin:-4px;\n}\n\n.CodeMirror {\n    border: 1px solid black;\n    margin-top:5px;\n}',""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r);n(21);var i=s(n(23));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders,showControls:n.props.showControls},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"addFolder",value:function(){var e=Array.from(this.state.folders);e.unshift({type:"NewFolder",name:"",contents:[],status:"closed"}),this.setState({folders:e})}},{key:"addComponent",value:function(){this.props.onOpenEditor()}},{key:"render",value:function(){var e=this.props,t=this.state;return a.default.createElement("div",{className:"container elements-tab"},a.default.createElement("div",{className:"title"},"Components"),a.default.createElement("div",{className:"Controls"},a.default.createElement("button",{onClick:this.addComponent.bind(this)},a.default.createElement("i",{className:"fa fa-edit"}),e.selectedComponent?"Edit":"Add"),a.default.createElement("button",{onClick:this.addFolder.bind(this)},a.default.createElement("i",{className:"fa fa-folder"}),"Folder")),a.default.createElement("div",{className:"folders"},a.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),components:t.components,folders:t.folders,selectedComponent:e.selectedComponent,onFoldersUpdate:e.onFoldersUpdate,onSelection:e.onSelection})))}}]),t}();t.default=l},function(e,t,n){var o=n(22);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".override {\n    line-height: 0%;\n}\n\ntextarea {\n    height: 70px;\n    width: 450px;\n}\n\n.title{\n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    background: rgb(64, 64, 64);\n    padding: 5px;\n    font-size: 12px;\n}\n\n.elements-tab {\n    left:0px;\n    height: 100vh;\n    width:190px;;\n}\n\n.folders{\n    overflow: scroll;  \n    height:85vh;\n}\n\n.Controls{\n    display: inline-block;\n    opacity: 1;\n    transition: opacity .2s ease-in;\n}\n\n.hideControls{\n    opacity: 0;\n    transition: opacity .5s ease-in-out;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=((o=i)&&o.__esModule,n(9));n(24);var l=n(26);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"removeFolderFromParent",value:function(e,t,n){var o=(0,s.findFolder)(t,e[0]),a=o.contents.findIndex(function(e){return"object"===(void 0===e?"undefined":r(e))&&e.name===n});a>-1&&o.contents.splice(a,1)}},{key:"removeContentFromParent",value:function(e,t,n){var o=(0,s.findFolder)(t,e[0]),r=o.contents.findIndex(function(e){return e===n});-1!==r&&o.contents.splice(r,1)}},{key:"onFolderUpdate",value:function(e,t,n,o){var r=Array.from(this.state.folders),a=e.name,i=(0,s.findFolder)(a,r[0]);if("NEWFOLDER"==t){var l=r.findIndex(function(e){return"NewFolder"===e.type});-1!==l&&r.splice(l,1),r[0].contents.unshift(e)}"COMPONENT"==t?(i.contents=e.contents,this.removeContentFromParent(r,n,o)):"FOLDER"==t&&(i.contents=e.contents,this.removeFolderFromParent(r,n,o,a)),this.props.onFoldersUpdate(r)}},{key:"onFolderStatusChanged",value:function(e){(0,s.findFolder)(e.name,this.state.folders[0]).status=e.status,this.props.onFoldersUpdate(this.state.folders)}},{key:"render",value:function(){return(0,l.folderStructure)(this.props,this.onFolderUpdate.bind(this),this.onFolderStatusChanged.bind(this))}}]),t}();t.default=u},function(e,t,n){var o=n(25);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.folderStructure=function(e,t,n){var o=e.folders;return p(e,t,n),o.map(f)};var o=a(n(27)),r=a(n(35));function a(e){return e&&e.__esModule?e:{default:e}}var i=void 0,s=void 0,l=void 0,u=void 0,c=void 0,d=void 0;function p(e,t,n){c=e.folders,i=e.selectedComponent,s=e.onSelection,u=e.components,l=t,d=n}function f(e,t){var n=e.contents;return React.createElement(o.default,{key:t,folder:e,folders:c,contents:n.map(m),onFolderStatusChanged:d,onFolderUpdate:l})}function m(e,t){if("string"==typeof e)return React.createElement(r.default,{key:t,component:u.find(function(t){return t.name===e}),selectedComponent:i,onSelectionChange:s});var n=e;return React.createElement(o.default,{key:t,folder:n,folders:c,contents:n.contents.map(m),onFolderStatusChanged:d,onFolderUpdate:l})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=u(r);n(28);var i=u(n(30)),s=n(33),l=n(34);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={iconStatus:"fa fa-folder",folderClass:"newFolder",name:n.props.folder.name,contents:n.props.folder.contents,type:n.props.folder.type,status:n.props.folder.status},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"newFolder",value:function(e){this.props.onFolderUpdate(e,"NEWFOLDER")}},{key:"render",value:function(){var e=this.props.folder,t=this.props.contents,n="open"===this.state.status?"fa fa-folder-open":"fa fa-folder";return"NewFolder"==e.type?a.default.createElement(i.default,{onNewFolder:this.newFolder.bind(this)}):"folder"==e.type?a.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},a.default.createElement("i",{className:n,onClick:s.toggleFolder.bind(this)}),a.default.createElement("input",{type:"text",className:"folder",placeholder:"Enter folder name",readOnly:!0,value:this.state.name}),"open"===this.state.status?t:null):"noFolder"==e.type?a.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},t):void 0}}]),t}();t.default=c},function(e,t,n){var o=n(29);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"input.folder{\n    border:none;\n    background:none;\n    padding-bottom: 13px;\n    width: 155px;\n}\n\n.newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(31);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:"fa fa-folder",newFolderClass:"newFolder",folderName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"folderNameChanged",value:function(e){this.setState({folderName:e.currentTarget.value})}},{key:"saveFolderNameOnEnter",value:function(e){"Enter"===e.key&&this.props.onNewFolder({name:this.state.folderName,contents:[],type:"folder",status:"closed"})}},{key:"render",value:function(){return i.default.createElement("div",{className:this.state.newFolderClass},i.default.createElement("i",{className:this.state.status}),i.default.createElement("input",{type:"text",className:"folder",autoFocus:!0,placeholder:"Enter folder name",value:this.state.folderName,onChange:this.folderNameChanged.bind(this),onKeyPress:this.saveFolderNameOnEnter.bind(this)}))}}]),t}();t.default=s},function(e,t,n){var o=n(32);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: green;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleFolder=function(){"closed"===this.state.status?function(){var e=JSON.parse(JSON.stringify(this.state));e.status="open",this.props.onFolderStatusChanged(e)}.call(this):function(){var e=JSON.parse(JSON.stringify(this.state));e.status="closed",this.props.onFolderStatusChanged(e)}.call(this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){e.preventDefault();var t=e.dataTransfer.getData("component-name"),n=e.dataTransfer.getData("folder-name"),r=e.dataTransfer.getData("parent-folder-name"),a=this.state.name;if(r===a)return void this.setState({folderClass:"newFolder",status:"closed"});if(""===t){if("null"==n||""==n)return void console.error("Folder cannot be empty");(function(e,t){var n=Array.from(this.state.contents),r=(0,o.findFolder)(e,this.props.folders[0]);n.push(r),e&&e!==this.state.name&&this.props.onFolderUpdate({name:this.state.name,contents:n,type:"folder",status:"open"},"FOLDER",t,e)}).call(this,n,r)}else(function(e,t){var n=Array.from(this.state.contents);n.push(e),this.props.onFolderUpdate({name:this.state.name,contents:n,type:"folder",status:"open"},"COMPONENT",t,e)}).call(this,t,r);console.log("Drop from folder"),e.stopPropagation()},t.dragOverHandler=function(e){e.preventDefault(),this.setState({folderClass:"newFolder dragOver",status:"open"})},t.dragLeaveHandler=function(e){this.setState({folderClass:"newFolder",status:"closed"})},t.folderStartDrag=function(e){var t=event.target.getAttribute("data-folder-name"),n=event.target.parentElement.getAttribute("data-folder-name");e.dataTransfer.setData("folder-name",t),e.dataTransfer.setData("parent-folder-name",n),console.log("Folder "+t+" draged with parent "+n)};var o=n(9)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=l(r),i=n(36),s=l(n(37));function l(e){return e&&e.__esModule?e:{default:e}}n(47);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selectedComponent:n.props.selectedComponent},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"addComponentDetails",value:function(e){var t=event.target.getAttribute("data-name");e.target.querySelector(".thumbnail").classList.remove("hidden"),e.target.querySelector(".componentName").classList.add("hidden"),console.log("SETTING DATA"),e.dataTransfer.setData("component-name",t),e.dataTransfer.setData("parent-folder-name",e.currentTarget.parentElement.getAttribute("data-folder-name")),console.log(e.dataTransfer.getData("component-name")),e.stopPropagation()}},{key:"render",value:function(){var e=this.props,t=e.selectedComponent,n=e.component;return a.default.createElement("li",{className:t&&e.component.name===t.name?"selected component background":"component background",onClick:i.selectionChanged.bind(this,n.name),onContextMenu:i.selectionChanged.bind(this,n.name),index:e.index,draggable:"true","data-name":n.name,onDragStart:this.addComponentDetails.bind(this)},a.default.createElement("span",{className:"componentName "},n.name),a.default.createElement("span",{className:"hidden thumbnail"},a.default.createElement(s.default,{component:n})))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectionChanged=function(e,t){this.props.onSelectionChange(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r),i=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}n(45);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.name||"",state:n.props.state},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=JSON.parse(JSON.stringify(this.props.component));return""==e.name?a.default.createElement("div",null):a.default.createElement("div",{className:"thumbnailView"},a.default.createElement(i.default,{component:e}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.insertDirection=function(e,t){o=o||e,r=r||t,++i===a&&(console.log(o,e),i=0,r=t,o=e)};var o=void 0,r=void 0,a=50,i=0},function(module,exports,__webpack_require__){"use strict";var _React=__webpack_require__(6);function createComponent(component){var componentString=(0,_React.convertToReact)(component);return eval(Babel.transform(componentString,{presets:["react"],plugins:["transform-es2015-classes"]}).code)}module.exports={createComponent:createComponent}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readData=r,t.writeData=a,t.readComponent=function(e){var t=r("ui-editor");if(!t)return;return t.find(function(t){return t.name===e})},t.writeComponent=function(e){if(!Array.isArray(e)&&e.name){var t=r("ui-editor"),n=t.findIndex(function(t){return t.name===e.name});t[n]=e,a("ui-editor",t)}},t.popHistory=function(){var e=r("ui-editor-history");if(!e)return;var t=e.pop();if(!e)return;a("ui-editor-history",e,!0),a("ui-editor",t,!0)};var o=n(41);function r(e){if("ui-editor"===e)return window.components||(window.components=JSON.parse(localStorage.getItem(e))||o.sample),JSON.parse(JSON.stringify(window.components));if("ui-editor-history"===e){var t=localStorage.getItem(e);if(t)return JSON.parse(t)}if("folders"===e){var n=JSON.parse(localStorage.getItem(e));return null===n?[{type:"noFolder",contents:[{name:"Templates",contents:["Page"],type:"folder",status:"closed"},{name:"Components",contents:["Modal","ResetPasswordModal","ForgotPassword","Carousal","Product","Carousal_Single","Carousal_Double"],type:"folder",status:"open"},{name:"Elements",contents:["EmailInput","TermsAndService","SubmitButton","CancelButton","PrivacyAndPolicy","ResetPasswordForm","Form"],type:"folder",status:"closed"}],name:"noFolder",status:"open"}]:n}return[]}function a(e,t,n){"folders"==e&&localStorage.setItem(e,JSON.stringify(t)),"ui-editor"==e&&(console.log("WRITE"),window.components=t,localStorage.setItem(e,JSON.stringify(t)),n||function(e){window.editorHistory=r("ui-editor-history"),editorHistory.push(e),localStorage.setItem("ui-editor-history",JSON.stringify(editorHistory))}(t))}},function(e,t,n){"use strict";e.exports={sample:[{name:"ForgotPassword",markup:'<div className="vsButton"><button id="f123">{state.buttonText}</button></div>',events:[{name:"onClick",reducer:"state.show",publishable:!0,publishName:"onPasswordForgotten",id:"f123"}],state:'{"buttonText":"Forgot Password"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"Modal",markup:'<div class="modal">\n<header>\n  <h3>Forgot Password</h3>\n    <button className="closeButton" id="x">x</button>\n</header>\n<section class="content">\n</section>\n<footer>footer</footer>\n</div>',events:[{name:"onClick",reducer:'state.name="";',publishable:!0,publishName:"onCloseModal",id:"x"}],state:'{"variant":"initial"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}",variants:[]},{name:"CancelButton",markup:'<div className="vsButton"><button>{state.cancelButton}</button></div>',events:[],state:'{"cancelButton":"Cancel"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"SubmitButton",markup:'<div className="vsButton"><button>{state.submitButton}</button></div>',events:[],state:'{"submitButton":"Submit"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}",variants:[]},{name:"PrivacyAndPolicy",markup:'<div class="privacyPolicy">\n\t{state.content}\n</div>',events:[],state:'{\n\t"content":"Please enter the email address you used to create your account and we will send you a link to reset your password. See Privacy Policy"\n}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}",variants:[]},{name:"TermsAndService",markup:'<div class="privacyPolicy">\n{state.variant}\n</div>',events:[],state:'{"variant":"This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply."}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}",variants:[]},{name:"Form",markup:'<form className="vsfrm">\n</form>',events:[],state:"{}",style:".vsfrm{\nheight:400px;\nwidth:400px;\n}",config:"{}",variants:[]},{name:"EmailInput",markup:'<span className={state.variant+" emailInput"}>\n\t\n    <input id="input" className="email" type="email" \tvalue={state.email} />SOME\n\t\n    <label>{state.placeholder}</label>\n    \n</span>',events:[{name:"onChange",reducer:"state.email = e.target.value",publishable:"",publishName:"",id:"input"},{name:"onFocus",reducer:'state.variant = "focussed"',index:1,publishable:"",publishName:"",id:"input"},{name:"onBlur",reducer:'if(state.email.length==0){\n    state.placeholder ="Please enter an Email Address"\n    state.variant = "prompt_input"\n}\nelse if(!state.email.includes("@")){\n    state.placeholder ="Please correct the Email Address"\n\tstate.variant = "prompt_correct_input";\n}\nelse{\n\tstate.placeholder = "Email Address";\n    state.variant = "valid_input"\n}\n',index:2,publishable:"",publishName:"",id:"input"}],state:'{\n\t"email":"",\n    "variant":"initial",\n    "placeholder":"Email Address"\n}',style:".emailInput{\n\tfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\n\tposition:relative;\n}\n\n.emailInput .email{\n\tpadding: 17px;\n\tpadding-top: 25px;\n\tborder: 1px solid #e1e1e1;\n    font-size: 16px;\n    width: 100%;\n}\n\n.emailInput label{\n    font-size: 14px;\n    position:absolute;\n    left: 15px;\n    top: -18px;\n}\n\n.prompt_input.emailInput label{\n\tfont-size: 11px;\n   \tleft: 15px;\n    top: -18px;\n    color: #d91560;\n}\n\n.prompt_input .email{\n    color: #d91560;\n    border-color: #ef5f96;\n}\n\n.prompt_correct_input label{\n    color: #d91560;\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.prompt_correct_input .email{\n   color: #d91560;\n    border-color: #ef5f96;\n}\n\n.focussed.emailInput label{\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.valid_input label{\n\tfont-size: 11px;\n    top: -28px;\n    left: 9px;\n}\n\n.emailInput label {\n\ttransition: top .3s;\n}",config:"{}",variants:[{name:"focussed",state:{email:"",variant:"focussed",placeholder:"Email Address"}},{name:"prompt_input",state:{email:"",variant:"prompt_input",placeholder:"Please enter an Email Address"}},{name:"prompt_correct_input",state:{email:"a",variant:"prompt_correct_input",placeholder:"Please correct the Email Address"}},{name:"valid_input",state:{email:"a@",variant:"valid_input",placeholder:"Email Address"}}]},{name:"ResetPasswordForm",markup:"<form><TermsAndService></TermsAndService><EmailInput></EmailInput><SubmitButton></SubmitButton><CancelButton></CancelButton><TermsAndService><PrivacyAndPolicy></PrivacyAndPolicy></TermsAndService>\n</form>",events:[],state:'{"variant":"text"}',style:"form{\nheight:400px;}",config:"{}",variants:[]},{name:"Page",markup:'<div className="page">\n\t<ForgotPassword></ForgotPassword>\n    <ResetPasswordModal></ResetPasswordModal>\n</div>',events:[{name:"onPasswordForgotten",reducer:'state.ResetPasswordModal = [\n\t{\n    \ttitle: "Forgot Password",\n        footer: "Copyrigts",\n        show: "sd"\n    }\n];\n\nstate.variant = "modal_opened";',index:0,publishable:"",publishName:"",id:"ForgotPassword"},{name:"onClose",reducer:'state.ResetPasswordModal = [];\nstate.variant = "modal_closed";',index:0,publishable:"",publishName:"",id:"ResetPasswordModal"}],state:'{\n\t"showModal": false,\n    "list": [1,2,3,4,5],\n    "ResetPasswordModal": [],\n    "variant": "initial"\n}',style:".page{\n\theight: 700px;\n\twidth: 500px;\n}",config:'{"VariantModal":{"showHideProp":"showModal","override":false},"ForgotPasswordButton":{"showHideProp":"","override":false},"ForgotPassword":{"showHideProp":"","override":false,"renderListProp":""},"ResetPasswordModal":{"showHideProp":"showModal","override":true,"renderListProp":""}}',variants:[{name:"modal_opened",state:{showModal:!1,list:[1,2,3,4,5],ResetPasswordModal:[{title:"Forgot Password",footer:"Copyrigts",show:"sd"}],variant:"modal_opened"}},{name:"modal_closed",state:{showModal:!1,list:[1,2,3,4,5],ResetPasswordModal:[],variant:"modal_closed"}}]},{name:"ResetPasswordModal",markup:'<div class="modal">\n<header>\n  <h3>{state.title}</h3>\n    <button id="close" className="closeButton">x</button>\n</header>\n<section class="content"><ResetPasswordForm></ResetPasswordForm>\n</section>\n<footer>{state.footer}</footer>\n</div>',events:[{name:"onClick",reducer:'state.show = "sd";',publishable:!0,publishName:"onClose",id:"close"}],state:'{"title":"Forgot Password","footer":"Copyrigts"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}",variants:[]},{name:"Carousal",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    <div className="window">\n    \t<div className="content">\n          {<div>{state.items[state.current]}</div>}\n\t    </div>\n    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}",index:1,publishable:"",publishName:"",id:"previous"}],state:'{"variant":"initial layoutComponent","items":[1,2,3,4,5,6],"current":0}',style:".layoutComponent button{\n\tcolor:red;\n    height:100%;\n    width: 40px;\n}\n\n.layoutComponent {\n\twidth:100%;\n    height:220px;\n    position:relative;\n}\n\n.layoutComponent *{\n  \tbox-sizing: border-box;\n}\n\n.layoutComponent .window {\n\twidth: 50%;\n    height:220px;\n    position: relative;\n    margin:auto;\n\toverflow:hidden;\n}\n\n.layoutComponent .content{\n\theight:220px;\n}\n\n.layoutComponent .content > div{\n\tdisplay:inline-block;\n    height:200px;\n    width:220px;\n    background-color:green;\n    margin:7px;\n}\n\n.layoutComponent .left{\n\tposition:absolute;\n    left:0px;\n    top:0px;\n}\n\n.layoutComponent .right{\n\tposition:absolute;\n    right:0px;\n    top:0px;\n}",children:[],id:314,config:'{"ProductComponent":{"override":false}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}}],trueName:"Carousal"},{name:"Product",markup:'<div className={state.variant} style={state.style} id="product">\n\t{state.name}\n</div>\n',events:[{name:"onMouseEnter",reducer:'state.variant = "item on_hover";\nstate.name = "Buy now";',index:0,publishable:"",publishName:"",id:"product"},{name:"onMouseLeave",reducer:'state.variant = "item initial";\nstate.name = "Product one";',publishable:"",publishName:"",id:"product"}],state:'{\n\t"name" : "Product one",\n    "variant" : "item initial",\n    "style" : {\n       \t"backgroundImage": "$assets[\'1.jpeg\']"\n    }\n}',style:".item.initial {\n\tbackground-color:darkcyan;\n    background-size:contain;\n}\n\n.item.on_hover {\n\tbackground-color:teal;\n    background-size:auto;\n}\n\n.item{\n\theight:200px;\n    width:200px;\n\ttext-align: center;\n\tvertical-align: middle;\n\tline-height: 200px;\n}",children:[],id:949,config:"{}",variants:[{name:"on_hover",state:{name:"Buy now",variant:"on_hover"}},{name:"items on_hover",state:{name:"Buy now",variant:"items on_hover"}},{name:"item on_hover",state:{name:"Buy now",variant:"item on_hover"}},{name:"item initial",state:{name:"",variant:"item initial"}}],trueName:"Product"},{name:"Carousal_Single",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    <div className="window">\n    \t<div className="content">\n\t    </div>\n    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}\n\nstate.Product = [state.items[state.current]]\n",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}\n\nstate.Product = [state.items[state.current]]\n",index:1,publishable:"",publishName:"",id:"previous"}],state:'{\n    "variant":"initial layoutComponent",\n    "items":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'2.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'3.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'4.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'5.jpeg\']"}},\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'6.jpeg\']"}}\n    ],\n    "current":0,\n    "Product":[\n        {"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}}\n    ]\n}',style:".layoutComponent button{\n\tcolor:red;\n    height:100%;\n    width: 40px;\n}\n\n.layoutComponent {\n\twidth:100%;\n    height:220px;\n    position:relative;\n}\n\n.layoutComponent *{\n  \tbox-sizing: border-box;\n}\n\n.layoutComponent .window {\n\twidth: 50%;\n    height:220px;\n    position: relative;\n    margin:auto;\n\toverflow:hidden;\n}\n\n.layoutComponent .content{\n\theight:220px;\n}\n\n.layoutComponent .content > div{\n\tdisplay:inline-block;\n    height:200px;\n    width:220px;\n    background-color:green;\n    margin:7px;\n}\n\n.layoutComponent .left{\n\tposition:absolute;\n    left:0px;\n    top:0px;\n}\n\n.layoutComponent .right{\n\tposition:absolute;\n    right:0px;\n    top:0px;\n}",children:[],id:314,config:'{"ProductComponent":{"override":false},"Product":{"override":true}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}}],trueName:"Carousal_Single"},{name:"Carousal_Double",markup:'<div className={state.variant}>\n\t<button className="left" id="previous">{"<"}</button>\n    <div className="window">\n    \t<div className="content">\n\t    </div>\n    </div>\n    <button className="right" id="next">{">"}</button>\n</div>',events:[{name:"onClick",reducer:"if(state.current===state.items.length-1){\n\tstate.current = 0;\n}\n\nelse {\n\tstate.current = state.current +1;\n}",index:0,publishable:"",publishName:"",id:"next"},{name:"onClick",reducer:"if(state.current===0){\n\tstate.current = state.items.length-1;\n}\n\nelse {\n\tstate.current = state.current -1;\n}",index:1,publishable:"",publishName:"",id:"previous"}],state:'{"variant":"initial layoutComponent","items":[1,2,3,4,5,6],"current":0,"Product":[{"name":"Product one","variant":"item initial","style":{"backgroundImage":"$assets[\'1.jpeg\']"}}]}',style:".layoutComponent button{\n\tcolor:red;\n    height:100%;\n    width: 40px;\n}\n\n.layoutComponent {\n\twidth:100%;\n    height:220px;\n    position:relative;\n}\n\n.layoutComponent *{\n  \tbox-sizing: border-box;\n}\n\n.layoutComponent .window {\n\twidth: 50%;\n    height:220px;\n    position: relative;\n    margin:auto;\n\toverflow:hidden;\n}\n\n.layoutComponent .content{\n\theight:220px;\n}\n\n.layoutComponent .content > div{\n\tdisplay:inline-block;\n    height:200px;\n    width:220px;\n    background-color:green;\n    margin:7px;\n}\n\n.layoutComponent .left{\n\tposition:absolute;\n    left:0px;\n    top:0px;\n}\n\n.layoutComponent .right{\n\tposition:absolute;\n    right:0px;\n    top:0px;\n}",children:[],id:314,config:'{"ProductComponent":{"override":false},"Product":{"override":true}}',variants:[{name:"initial layoutComponent",state:{variant:"initial layoutComponent",items:[1,2,3,4,5,6],current:6}}],trueName:"Carousal_Double"}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nameToURL=function(e){"string"!=typeof e&&console.error("state should be a string");if(window.assets&&window.assets.length>0)for(var t=function(){var t=e.split("['")[1].split("]")[0].split("");t.pop(),t=t.join("");var n=window.assets.find(function(e){return e.name===t});e=e.replace("$assets['"+t+"']","url("+getURL(n.blob,t)+")")};e.includes("$assets");)t();return e},t.urlToName=function(e){var t=function(){var t=e.split("url(")[1].split(")")[0],n=window.assets.find(function(e){return e.url===t});n&&(e=e.replace("url("+n.url+")","$assets['"+n.name+"']"))};for(;e.includes(window.location.host);)t();return e},t.hasAssets=function(e){return e.includes("$assets")}},function(e,t,n){var o=n(44);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".hint{\n    height:100px;\n    width:100%;\n    border: 1px dashed green;\n}\n\n.hintDragOver{\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n    from {\n        border: 1px dashed green;\n    }\n  \n    to {\n        border: 2px dashed green;\n    }\n  }\n\n.hintNoDrop{\n    animation: blinkRed 1s infinite;\n}\n\n@keyframes blinkRed {\n    from {\n        border: 1px dashed red;\n    }\n  \n    to {\n        border: 2px dashed red;\n    }\n  }",""])},function(e,t,n){var o=n(46);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".thumbnailView {\n    zoom: 0.7;\n}\n\n.thumbnailView > div {\n    pointer-events: none;\n}",""])},function(e,t,n){var o=n(48);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"/* Show green when component is selected*/\n\n.selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n/* Show dark background to components */\n\n.background {\n    background: rgb(64, 64, 64);\n    border: 1px solid #333333;\n}\n\n/* Show some spacing before the component name */\n\n.component .componentName{\n    padding:7px;\n}\n\n.component {\n    display:flex;\n}\n\n/* Show comopnent preview onDrag*/\n\n.dragStarted span:not(.componentName){\n    display:none;\n}\n\n.hidden{\n    display: none;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(50);var s=n(3),l=n(10);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,s.readComponent)(n.props.name);return n.state={trueName:o?o.name:"",name:o?o.name:"",markup:o?o.markup:"",state:o?o.state:"",style:o?o.style:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"saveElement",value:function(){this.props.onSave({trueName:this.state.trueName,name:this.state.name,markup:this.state.markup,style:this.state.style,state:this.state.state})}},{key:"saveName",value:function(e){this.setState({name:e.currentTarget.value})}},{key:"render",value:function(){var e=this,t=(this.state.name,this.state.markup),n=this.state.style,o=this.state.state;return i.default.createElement("div",{className:"container editor-tab"},i.default.createElement("button",{onClick:this.saveElement.bind(this),id:"save"},i.default.createElement("i",{className:"fas fa-save"}),"Save & close"),i.default.createElement("div",null,i.default.createElement("div",{className:"editor name"},i.default.createElement("div",{className:"title"},"Component Name"),i.default.createElement("input",{type:"text",placeholder:"Enter element name",value:this.state.name,onChange:this.saveName.bind(this),id:"elementName"})),i.default.createElement("div",{className:"editor markup"},i.default.createElement("div",{className:"title"},"Component Markup"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:t,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({markup:o})}})),i.default.createElement("div",{className:"editor css"},i.default.createElement("div",{className:"title"},"Component CSS"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:n,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({style:o})}})),i.default.createElement("div",{className:"editor state"},i.default.createElement("div",{className:"title"},"Component State"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:o,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({state:o})}}))))}}]),t}();t.default=u},function(e,t,n){var o=n(51);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".editor-tab {\n    width: 100vw;\n    animation: slide-up 0.2s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\ninput.folder:read-only {\n    pointer-events: none;\n}\n\n\n.editor-tab button {\n    position: absolute;\n    top: -5%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}\n\n.showEditor{\n    margin-bottom:30px;\n}\n\n.editor.name{\n    width:10%;\n}\n\n.editor{\n    width: 29%;\n    display: inline-block;\n    margin: 5px;\n    margin-top: 2px;\n}\n",""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=p(r),i=p(n(54)),s=p(n(57)),l=p(n(58));n(63);var u=n(65),c=n(66),d=n(3);function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state=Object.assign({},n.props),n.state.selectedTag=n.props.selectedTag,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.component;if(0==this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"),a.default.createElement("p",null,'Looks like you do not have any Web component created. Type some "html" on the right "Editor" tab'));if(void 0===t.name&&0!=this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"),a.default.createElement("p",null,"Looks like you have not selected any component. Click on any of the component in the left pane."));var n=(0,c.getNodeTree)(t,t.markup,t.style,JSON.parse(t.state),t.events);if(void 0!==n.error)return n.error;if(void 0===n.result&&0!=this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"));var o=this.state.selectedTag||"",r=void 0,p=void 0,f=[];if(o.includes("child-component-")){var m=(0,d.readData)("ui-editor"),h=o.split("child-component-")[1],v=m.find(function(e){return e.name===h});f=v.events.filter(function(e){return!0===e.publishable}).map(function(e){return e.publishName});var b=t.events.filter(function(e){return f.find(function(t){return t===e.name&&e.id===v.name})});b=b.map(function(t,n){return a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:f,onSave:u.updateEvent.bind(e),deleteEvent:u.deleteEvent.bind(e)})}),r=o?b:null,p=a.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),onChange:u.updateConfiguration.bind(this),childName:h,parent:t})}else{var y=t.events.map(function(t,n){return a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:f,onSave:u.updateEvent.bind(e),deleteEvent:u.deleteEvent.bind(e)})});r=o?y.filter(function(e){return o.includes(e.props.event.id)}):null}return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"tags"},a.default.createElement(s.default,{node:n.result,onSelectedTagChanged:u.selectedTagChanged.bind(this)})),p,r&&r.length>0?a.default.createElement("div",null,a.default.createElement("div",{className:"title"},"Existing Events"),r):null,o?a.default.createElement("div",null,a.default.createElement("div",{className:"title"},"Add Event"),a.default.createElement(l.default,{key:t.events.length,eventNames:f,selectedTagID:o,onSave:u.updateEvent.bind(this)})):null)}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(55);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=JSON.parse(n.props.parent.config)[n.props.childName]||{override:!1};return n.state={override:o.override},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"toggelOverride",value:function(){this.setState({override:!this.state.override}),this.props.onChange({config:{override:!this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"saveConfig",value:function(){this.props.onChange({config:{override:this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("div",{className:"title"},"Child Configurations"),i.default.createElement("div",{className:"spacing"},i.default.createElement("label",null,"Override state"),i.default.createElement("input",{type:"checkbox",onChange:this.toggelOverride.bind(this),checked:this.state.override?"checked":""})))}}]),t}();t.default=s},function(e,t,n){var o=n(56);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.configurator {\n    background: rgb(64, 64, 64);\n    margin-top: 10px;\n    padding: 5px;\n}\n\n.spacing{\n    margin: 10px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=(o=i)&&o.__esModule?o:{default:o};var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"render",value:function(){var e=this,n=this.props.node;if(!n)return s.default.createElement("span",null,"null");if("string"==typeof n)return s.default.createElement("li",null,n);var o=n.props.id?"-"+n.props.id:"";if(n.props&&Array.isArray(n.props.children)){var a=n.props.children.map(function(n,o){return s.default.createElement(t,{key:o,node:n,onSelectedTagChanged:e.props.onSelectedTagChanged})});return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:n.type+o}),n.type+o),a)}if("object"===r(n.props.children)){var i=n.props.children;return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:(n.type.name||n.type)+o}),n.type.name||n.type),s.default.createElement(t,{key:index,node:i,onSelectedTagChanged:this.props.onSelectedTagChanged}))}return"function"==typeof n.type?s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:"child-component-"+n.type.name,onChange:this.props.onSelectedTagChanged}),n.type.name)):s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:n.type+o,onChange:this.props.onSelectedTagChanged}),n.type+o))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(59);var s=n(10),l=n(61),u=n(62);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.event?n.props.event.name:"",reducer:n.props.event?n.props.event.reducer:"",publishable:n.props.event?n.props.event.publishable:"",publishName:n.props.event?n.props.event.publishName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){var e=this;if(void 0===this.props.selectedTagID)return"Select ID";var t=this.state.publishable?i.default.createElement("input",{type:"text",onChange:l.updatePublishName.bind(this),value:this.state.publishName,placeholder:"Enter event publish name for other components to subscribe to"}):null,n=this.props.eventNames.map(function(e){return i.default.createElement("option",{value:e})});return i.default.createElement("div",{className:"event"},i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Event name"),i.default.createElement("input",{list:"events",type:"text",onChange:l.updateEventName.bind(this),value:this.state.name,title:"Event Name"}),i.default.createElement("datalist",{id:"events"},n)),i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Publishable"),i.default.createElement("input",{type:"checkbox",onChange:l.updateEventType.bind(this),checked:this.state.publishable?"checked":""}),t),i.default.createElement("div",{class:"spacing"},i.default.createElement("label",null,"Event reducer"),i.default.createElement(s.UnControlled,{value:this.state.reducer,autoCursor:!1,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0},onChange:function(t,n,o){e.setState({reducer:o})}})),i.default.createElement("div",null,i.default.createElement("button",{onClick:u.publishEvent.bind(this),id:"saveEvent"},i.default.createElement("i",{className:"fas fa-save"}),"Save"),i.default.createElement("button",{onClick:u.deleteEvent.bind(this),id:"deleteEvent"},i.default.createElement("i",{className:"fas fa-trash"}),"Delete")))}}]),t}();t.default=c},function(e,t,n){var o=n(60);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.event input {\n    margin-left:5px;\n    width:150px;\n}\n\n.event textarea {\n    margin-top: 8px;\n    width: 300px;\n}\n\n.input {\n    padding: 5px;\n}",""])},function(e,t,n){"use strict";function o(e){this.setState({publishable:e.currentTarget.checked})}var r,a,i;e.exports=(i=o,(a="updateEventType")in(r={updateEventName:function(e){this.setState({name:e.target.value})},updateEventType:o,updatePublishName:function(e){this.setState({publishName:e.target.value})}})?Object.defineProperty(r,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[a]=i,r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.publishEvent=function(){this.props.onSave({name:this.state.name,reducer:this.state.reducer,index:this.props.index,publishable:this.state.publishable,publishName:this.state.publishName})},t.deleteEvent=function(){this.props.deleteEvent(this.props.index)}},function(e,t,n){var o=n(64);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".events {\n    border:1px solid black;\n    padding: 5px;\n}\n\n.error {\n    color: red;\n}\n\n.tags.tags ul {\n    border: 0px;\n    margin-left: 30px;\n    padding:5px;\n}\n\n.tags ul:first-child {\n    margin-left: -2px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));this.state.selectedTag.includes("child-component-")?e.id=this.state.selectedTag.split("child-component-")[1]:e.id=this.state.selectedTag.split("-")[1];if(void 0===e.index)t.events.push(e);else{var n=t.events.findIndex(function(t){return t.id===e.id});-1==n&&console.error("Changing event name will not help. Create a new event"),t.events[n]=e}this.props.onEventsUpdate(t.events)},t.selectedTagChanged=function(e){this.setState({selectedTag:e.currentTarget.value})},t.deleteEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));t.events=t.events.splice(e,1),this.props.onEventsUpdate(t.events)},t.updateConfiguration=function(e){this.props.onConfigUpdate(e)}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNodeTree=getNodeTree;var _react=__webpack_require__(0),_react2=_interopRequireDefault(_react),_Runtime=__webpack_require__(4);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function getNodeTree(element,jsx,style,state,events){var result=void 0,error=void 0;try{var nestedComponents=(0,_Runtime.getNestedComponents)(element);nestedComponents.length>0&&(0,_Runtime.saveComponentsToWindow)(nestedComponents),result=eval(Babel.transform(jsx,{presets:["react"]}).code)}catch(e){error=e}finally{return _defineProperty({error:error,result:result},"result",result)}}window.React=_react2.default,window.Component=_react2.default.Component},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=l(r);n(68);var i=l(n(5)),s=n(3);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component,display:"mobile"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"refresh",value:function(){this.setState({component:(0,s.readComponent)(this.state.component.name)})}},{key:"switchTablet",value:function(){this.setState({display:"tablet"})}},{key:"switchMobile",value:function(){this.setState({display:"mobile"})}},{key:"switchDesktop",value:function(){this.setState({display:"desktop"})}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random());return a.default.createElement("div",{className:"container preview "+this.state.display},a.default.createElement("div",{className:"title"},"Preview",a.default.createElement("div",{className:"Controls"},a.default.createElement("button",{onClick:this.switchTablet.bind(this)},a.default.createElement("i",{className:"fa fa-tablet-alt"})),a.default.createElement("button",{onClick:this.switchMobile.bind(this)},a.default.createElement("i",{className:"fa fa-mobile-alt"})),a.default.createElement("button",{onClick:this.switchDesktop.bind(this)},a.default.createElement("i",{className:"fa fa-desktop"})))),a.default.createElement("div",{className:"dynamicComponent"},a.default.createElement(i.default,{onSave:this.props.onSave,key:e,component:this.state.component})))}}]),t}();t.default=u},function(e,t,n){var o=n(69);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".container{\n    padding: 5px;\n    background: #2C3134;\n}\n\n/* Center align the title */\n\n.preview .title{\n    text-align: center;\n}\n\n/* Fix the height and width of the preview - default*/\n\n.preview .dynamicComponent {\n    width:30vw;\n    height: 600px;\n    overflow:scroll;\n}\n\n/* Fix the height and width of preview - mobile display */\n\n.preview.mobile .dynamicComponent {\n    width:479px;\n    transition: width .2s;\n}\n\n/* Fix the height and width of preview - tablet display */\n\n.preview.tablet .dynamicComponent{\n    width:767px;\n    transition: width .2s;\n}\n\n/* Fix the height and width of preview - desktop display */\n\n.preview.desktop .dynamicComponent {\n    width:991px;\n    transition: width .2s;\n}\n\n/** Highlight mobile when display mode is mobile */\n\n.preview.mobile .fa-mobile-alt {\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n}\n\n/** Highlight tablet when display mode is tablet */\n\n.preview.tablet .fa-tablet-alt {\n\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n}\n\n/** Highlight desktop when display mode is desktop */\n\n.preview.desktop .fa-desktop {\n    font-size: 18px;\n    padding: 5px;\n    transition: font-size .1s,padding .1s ;\n\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=u(r);n(71);var i=u(n(73)),s=n(76),l=n(77);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={class:"drop_zone",imageURL:"",assets:[],selectedAsset:""},n.writeToDB=l.writeToDB.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"appendToBody",value:function(e){var t=this.result,n=document.createElement("div");n.innerHTML="Loaded : "+e.name+" size "+e.size+" B",document.body.appendChild(n);var o=document.createElement("img");o.file=e,o.src=t,n.appendChild(o)}},{key:"updatedSelected",value:function(e){var t=e.target.getAttribute("data-name");this.setState({selectedAsset:t})}},{key:"render",value:function(){var e=this,t=this.state.assets.map(function(t){return a.default.createElement(i.default,{asset:t,selected:e.state.selectedAsset,onSelected:e.updatedSelected.bind(e)})});return a.default.createElement("ul",{className:"assets"},a.default.createElement("button",{onClick:l.fetchFromDB.bind(this)},"Load Assets"),a.default.createElement("div",{className:this.state.class,onDrop:s.dropHandler.bind(this),onDragOver:s.dragOverHandler.bind(this),onDragLeave:s.dragLeaveHandler.bind(this)},a.default.createElement("p",null,"Drag one or more files to this Drop Zone ...")),a.default.createElement("div",null,this.state.selectedAsset.name),t)}}]),t}();t.default=c},function(e,t,n){var o=n(72);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n/* Show dashed outline for the drop zone.*/\n\n.drop_zone {\n  border: 1px lightgray dashed;\n  width:  200px;\n  height: 100px;\n}\n\n/* Show dashed outline during drag over. */\n\n.drag_over {\n  border: 2px lightgray dashed;\n  width:  200px;\n  height: 100px;\n}\n\n/* Give some spacing around asset name. */\n\n.assets p{\n  padding:15px; \n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(74);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("p",{"data-name":this.props.asset.name,onClick:this.props.onSelected},this.props.asset.name))}}]),t}();t.default=s},function(e,t,n){var o=n(75);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n/* Show selected asset with a light dashed outline */\n\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){var t=this;e.preventDefault(),[].forEach.call(e.dataTransfer.files,function(e){var n=new FileReader;n.readAsDataURL(e),n.onloadend=function(t,n){this.appendToBody(e),this.writeToDB(t.target.result,e.name)}.bind(t)}),this.setState({class:"drop_zone"})},t.dragOverHandler=function(e){console.log("File(s) in drop zone"),this.setState({class:"drag_over"}),e.preventDefault()},t.dragLeaveHandler=function(e){this.setState({class:"drop_zone"})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.writeToDB=function(e,t){var n=this;window.iDB.get(t).then(function(e){document.createElement("img").href=e.result,n.setState({imageURL:e.result})}),window.iDB.put({name:t,result:e})},t.fetchFromDB=function(){var e=this;window.iDB.getAll().then(function(t){window.assets=t.map(function(e){return{name:e.name,blob:e.result,url:getURL(e.result)}}),e.setState({assets:window.assets})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(79);n(85);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={exportType:"SIMPLE"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"onExportTypeChanged",value:function(e){this.setState({exportType:e.target.value})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"logCode",checked:"logCode"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS - logs output to your console.")),".",i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"STORYBOOK",checked:"STORYBOOK"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS with Storybook - Codebase"))),i.default.createElement("button",{onClick:s.onExport.bind(null,this.state.exportType,this.props.component.name)},i.default.createElement("i",{className:"fas fa-file-export"}),"Export"))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onExport=function(e,t){switch(e){case"SIMPLE":(0,r.logCode)(t);break;case"STORYBOOK":(0,o.exportSeparateFile)(t);break;default:(0,r.logCode)(t)}};var o=n(80),r=n(84)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportSeparateFile=function(e){var t=(0,i.readData)("ui-editor").find(function(t){return t.name.includes(e)}),n=u((0,a.getNestedComponents)(t)),p=(n=function(e){return e.forEach(function(e){0===e.variants.length&&e.variants.push({name:"initial",state:JSON.parse(e.state)})}),e}(n)).map(function(e){var t=(0,a.getChildren)(e).map(function(e){return"import "+e+' from "./'+e+'";'}).join("\n");return{name:e.name+".js",content:d+"\n"+t+"\n "+c((0,r.convertToReact)(e))+" \nexport default "+e.name+";"}}),f=n.map(function(e){return{name:e.name+".stories.js",content:(0,o.convertToReactStories)(e)}});(0,s.zipFiles)([].concat(l(p),l(f)))};var o=n(81),r=n(6),a=n(4),i=n(3),s=n(82);function l(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function u(e){return[].concat(l(new Set(e.map(function(e){return e.name})))).map(function(e){return components.find(function(t){return t.name===e})})}var c=function(e){return e.replace("(","").replace("})","}")},d=" /* eslint-disable */\nimport React, {Component} from 'react';\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReactStories=function(e){return"import React from 'react';\n\n    import "+e.name+' from "./'+e.name+"\";\n    \n    export default {\n        title: '"+e.name+"',\n        component: "+e.name+"\n    }\n    \n    "+e.variants.map(function(t){return"export const "+t.name+" = () => <"+e.name+" state={"+JSON.stringify(t.state)+"}></"+e.name+">;"}).join("\n\n")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.zipFiles=function(e){var t=new JSZip,n=t.folder("src");e.forEach(function(e){n.file(e.name,e.content)}),t.generateAsync({type:"blob"}).then(function(e){(0,o.download)(e,"archive.zip")})};var o=n(83)},function(e,t,n){"use strict";function o(e,t){var n=document.createElement("a");n.download=t,n.href=window.URL.createObjectURL(e),n.onclick=function(e){var t=this;setTimeout(function(){window.URL.revokeObjectURL(t.href)},1500)},n.click(),n.remove()}Object.defineProperty(t,"__esModule",{value:!0}),t.downloadFile=function(e,t,n){n=n||"text/plain",o(new Blob([t],{type:n}),e)},t.download=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logCode=function(e){var t=(0,a.readData)("ui-editor"),n=t.find(function(t){return t.name.includes(e)}),i=(0,o.getNestedComponents)(n),s=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(i.map(function(e){return e.name})))).map(function(e){return t.find(function(t){return t.name===e})}),l=s.map(r.convertToReact).map(function(e){return e.replace("(","").replace("})","}")}).reverse().join("");console.log(l)};var o=n(4),r=n(6),a=n(3)},function(e,t,n){var o=n(86);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(3);n(88);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"refreshToPrevious",value:function(){(0,s.popHistory)()}},{key:"render",value:function(){return i.default.createElement("ul",null,i.default.createElement("button",{onClick:this.refreshToPrevious.bind(this)},"Go back"))}}]),t}();t.default=l},function(e,t,n){var o=n(89);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r),i=s(n(91));function s(e){return e&&e.__esModule?e:{default:e}}n(94);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=n.props.component;return n.state={variants:o.variants,component:o},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"deleteVariant",value:function(e){var t=Array.from(this.state.variants),n=t.findIndex(function(t){return t.name.includes(e.name)});-1!==n&&t.splice(n,1);var o=JSON.parse(JSON.stringify(this.state.component));o.variants=t,this.props.onUpdate(o)}},{key:"render",value:function(){var e=this,t=this.state.component,n=this.state.variants;return""==t.name?a.default.createElement("div",{className:"container variants"},a.default.createElement("div",{className:"title"},"Variants"),a.default.createElement("p",null,"No component selected")):t.variants?(n=n.map(function(n,o){return a.default.createElement(i.default,{index:o,state:n.state,name:n.name,component:t,deleteVariant:e.deleteVariant.bind(e)})}),a.default.createElement("div",{className:"container variants"},a.default.createElement("div",{className:"title"},"Variants"),a.default.createElement("div",{className:"variantsList"},n))):a.default.createElement("div",{className:"container variants"},a.default.createElement("div",{className:"title"},"Variants"),a.default.createElement("p",null,"No variants found."))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r),i=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}n(92);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.name||"",state:n.props.state},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"deleteVariant",value:function(){var e=this.state;this.props.deleteVariant(e)}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random()),t=JSON.parse(JSON.stringify(this.props.component));return""==t.name?a.default.createElement("div",null):(t.state=this.props.state,console.log(t.state),a.default.createElement("div",{className:"variant"},a.default.createElement("div",{className:"variant-controls"},a.default.createElement("input",{type:"text",value:this.state.name,disabled:!0}),a.default.createElement("button",{onClick:this.deleteVariant.bind(this)},a.default.createElement("i",{className:"fas fa-trash"}),"Delete")),a.default.createElement("div",{className:"view"},a.default.createElement(i.default,{key:e,component:t}))))}}]),t}();t.default=l},function(e,t,n){var o=n(93);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".variant {\n    border: 1px dotted black;\n    padding:10px;\n    margin-bottom: 10px;\n}\n\n.variant .view > div{\n    pointer-events: none;\n    zoom: .3;\n}\n\n\n.variant-controls input {\n    width: 80px;\n}",""])},function(e,t,n){var o=n(95);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".variantsList{\n    overflow: scroll;\n    max-height: 86%;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(97);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"center"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(98);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".center{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(100);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"Bottom"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(101);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".bottom{\n    position: absolute;\n    bottom:0px;\n    width: 100vw;\n    animation: slide-up 0.4s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(103);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"left"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(104);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".Left{\n    position: absolute;\n    left:0px;\n    animation: slide-to-screen 0.7s ease;\n}\n\n@keyframes slide-to-screen {\n    0% {\n        left:-300px;\n    }\n    100% {\n        left: 0px;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(106);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selected:n.props.selected},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"updateSelectedTab",value:function(e){this.setState({selected:e.target.innerText})}},{key:"render",value:function(){var e=this;return this.state.selected,this.props.selected,i.default.createElement("div",{className:"right container"},this.props.children.map(function(t){return i.default.createElement("div",{className:t.props.title===e.state.selected?"tabs title":"tabs",onClick:e.updateSelectedTab.bind(e)},t.props.title)}),i.default.createElement("div",{className:"tab-content"},this.props.children.filter(function(t){return t.props.title===e.state.selected})))}}]),t}();t.default=s},function(e,t,n){var o=n(107);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".Right{\n    position: absolute;\n    right:0px;\n    animation: slide-right 0.2s ease;\n    height: 100%;\n    overflow: scroll;\n    width:400px;\n}\n\n@keyframes slide-right {\n    0% {\n        opacity: 0;\n        right:-100px;\n    }\n    100% {\n        opacity: 1;\n        right: 0px;\n    }\n}\n\n.tab-content{\n    height:91%;\n    border: 1px #404040 solid;\n}\n\n.tab-content ul {\n    padding: 12px;\n}\n\n.tabs {\n    display: inline-block;\n    cursor: default;\n    \n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    padding: 5px;\n    font-size: 12px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(109);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"closeContextMenu",value:function(){this.props.onMessage("HIDE")}},{key:"render",value:function(){return i.default.createElement("div",{className:"ContextMenu",style:this.props.position},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(110);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".ContextMenu{\n    position: absolute;\n    background-color: rgb(64, 64, 64);\n    box-shadow: 0px 0px 30px black;\n    border-radius: 5px;\n    padding:0px;\n}\n.contextMenuOptions li {\n    padding: 15px;\n    user-select: none;\n}\n\n.contextMenuOptions{\n    padding-left:0px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=this,n=Object.assign({},this.state).components;n.find(function(e){return e.name===t.state.selectedComponent.name}).events=e,this.setState({elements:n}),(0,o.writeData)("ui-editor",n)},t.updateConfig=function(e){var t=Object.assign({},this.state).components,n=t.find(function(t){return t.name===e.parentName}),r=t.find(function(t){return t.name===e.childName});n.state=JSON.parse(n.state),void 0===n.config?n.config={}:n.config=JSON.parse(n.config);n.config[r.name]=e.config,n.config[r.name].override?n.state[r.name]=[JSON.parse(r.state)]:delete n.state[r.name];n.state=JSON.stringify(n.state),n.config=JSON.stringify(n.config),this.setState({elements:t}),(0,o.writeData)("ui-editor",t)},t.saveElement=function(e){var t=this,n=Array.from(this.state.components),a=void 0,i=n.find(function(t){return t.name===e.name})||n.find(function(t){return t.name===e.trueName}),s=n.find(function(e){return e.name===t.state.selectedComponent.name}),l=n.findIndex(function(e){return e.name===t.state.selectedComponent.name});if(i){var u=s;u=Object.assign(u,e),n[l]=u}else a={name:e.name,markup:e.markup,events:[],state:e.state||"{}",style:e.style,children:[],id:Math.ceil(1e3*Math.random()),config:"{}",variants:[]},n.push(a),l=n.length-1,this.state.folders[0].contents.push(e.name);if(e.trueName!==e.name){var c=(0,r.findParent)(e.trueName,this.state.folders[0]),d=c.contents.findIndex(function(t){return t===e.trueName});c.contents.splice(d,1,e.name)}this.setState({elements:n,element:{name:e.name,markup:e.markup,style:e.style,state:e.state,events:e.events||[]},showEditor:!1,folders:this.state.folders}),(0,o.writeData)("folders",this.state.folders),(0,o.writeData)("ui-editor",n)},t.updateSelectedComponent=function(e,t){var n=this.state.components.find(function(t){return t.name===e});this.setState({selectedComponent:n})};var o=n(3),r=n(11)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.onDeleteComponent=function(e){var t=this.state.selectedComponent.name,n=(0,a.findParent)(t,this.state.folders[0]),o=n.contents.findIndex(function(e){return e===t});n.contents.splice(o,1);var i=Array.from(this.state.components),s=i.findIndex(function(e){return e.name===t});i.splice(s,1),this.setState({components:i,folders:this.state.folders}),(0,r.writeData)("ui-editor",i),(0,r.writeData)("folders",this.state.folders)},t.onExtendComponent=function(){var e=JSON.parse(JSON.stringify(this.state.selectedComponent)),t=(0,a.findParent)(e.name,this.state.folders[0]);e.name=e.name+"_copy",t.contents.push(e.name),components.push(e),this.setState({components:components,folders:this.state.folders}),(0,r.writeData)("ui-editor",components),(0,r.writeData)("folders",this.state.folders)},t.onDeleteFolder=function(e,t){var n,r=Array.from(this.state.folders),i=r[0],s=(0,a.findParentFolder)(t,r[0]),l=(0,a.findFolder)(t,r[0]);switch(e){case"FOLDER_RETAIN_CONTENTS":(n=i.contents).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(l.contents));var u=s.contents.findIndex(function(e){return"object"===(void 0===e?"undefined":o(e))&&e.name===t});s.contents.splice(u,1),this.updateFolders(r)}};var r=n(3),a=n(11)},function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=E(r),i=E(n(13));n(17);var s=E(n(20)),l=E(n(49)),u=E(n(53)),c=E(n(67)),d=E(n(70)),p=E(n(78)),f=E(n(87)),m=E(n(90)),h=E(n(96)),v=E(n(99)),b=E(n(102)),y=E(n(105)),g=E(n(108)),w=n(111),_=n(3),x=n(112);function E(e){return e&&e.__esModule?e:{default:e}}var O=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,_.readData)("ui-editor");return n.state={components:o,selectedTag:"",component:{name:"",markup:"",style:"",state:"{ }",events:[]},selectedComponent:"",folders:(0,_.readData)("folders"),showEditor:!1,selectedTab:"Events"},n.updateConfig=w.updateConfig.bind(n),n.updateEvent=w.updateEvent.bind(n),n.saveElement=w.saveElement.bind(n),n.updateSelectedComponent=w.updateSelectedComponent.bind(n),document.onkeydown=function(e){e.altKey&&69==e.keyCode&&this.setState({showEditor:!this.state.showEditor}),e.altKey&&82==e.keyCode&&this.setState({openRight:!this.state.openRight,selectedTab:"Events"}),e.altKey&&86==e.keyCode&&this.setState({openRight:!this.state.openRight,selectedTab:"Variants"})}.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"updatePreview",value:function(e){this.setState({previewComponent:e})}},{key:"updateFolders",value:function(e){this.setState({folders:e}),(0,_.writeData)("folders",e)}},{key:"openEditor",value:function(){this.setState({showEditor:!0})}},{key:"openExportTab",value:function(e){this.setState({selectedTab:"Export"})}},{key:"onShowContextMenu",value:function(e){if(e.target.classList.contains("component")||e.target.classList.contains("componentName"))this.state.contextMenuChildren=a.default.createElement("ul",{className:"contextMenuOptions"},a.default.createElement("li",{onClick:x.onDeleteComponent.bind(this)},"Delete Component"),a.default.createElement("li",{onClick:this.openExportTab.bind(this)},"Export Component"),a.default.createElement("li",{onClick:x.onExtendComponent.bind(this)},"Extend Component"));else if(e.target.classList.contains("fa-folder-open")||e.target.classList.contains("fa-folder")){var t=e.target.parentElement.getAttribute("data-folder-name");this.state.contextMenuChildren=a.default.createElement("ul",{className:"contextMenuOptions"},a.default.createElement("li",{onClick:x.onDeleteFolder.bind(this,"FOLDER_RETAIN_CONTENTS",t)},"Delete folder and retain contents"),a.default.createElement("li",{onClick:x.onDeleteFolder.bind(this,"RETAIN_FOLDER_DELETE_CONTENTS",t)},"Keep Folder and delete contents"),a.default.createElement("li",{onClick:x.onDeleteFolder.bind(this,"ENTIRE_FOLDER",t)},"Delete Folder and contents"),a.default.createElement("li",{onClick:this.openExportTab.bind(this)},"Export Folder"))}this.setState({showContextMenu:!0,contextMenuPosition:{top:e.clientY+"px",left:e.clientX+"px"}}),e.preventDefault()}},{key:"hideContextMenu",value:function(){this.state.showContextMenu&&this.setState({showContextMenu:!1})}},{key:"onContextMenuMessage",value:function(e){switch(e){case"HIDE":this.setState({showContextMenu:!1})}}},{key:"render",value:function(){var e=this,t=this.state.selectedComponent||this.state.component;return a.default.createElement("div",{onContextMenu:this.onShowContextMenu.bind(this),onClick:this.hideContextMenu.bind(this)},a.default.createElement(b.default,null,a.default.createElement(s.default,{components:this.state.components,folders:this.state.folders,selectedComponent:this.state.selectedComponent,title:"Components",showControls:!0,key:Math.ceil(1e3*Math.random()),onOpenEditor:this.openEditor.bind(this),onSelection:this.updateSelectedComponent,onFoldersUpdate:this.updateFolders.bind(this)})),a.default.createElement(h.default,null,a.default.createElement(c.default,{key:Math.ceil(1e3*Math.random()),component:t,title:"Preview",onSave:this.saveElement})),this.state.selectedComponent&&this.state.openRight?a.default.createElement(y.default,{selected:this.state.selectedTab},a.default.createElement(u.default,{key:Math.ceil(1e3*Math.random()),component:t,selectedTag:this.state.selectedTag,components:this.state.components,onEventsUpdate:this.updateEvent,onConfigUpdate:this.updateConfig,title:"Events"}),a.default.createElement(f.default,{title:"History"}),a.default.createElement(d.default,{title:"Assets"}),a.default.createElement(p.default,{title:"Export",component:t}),a.default.createElement(m.default,{title:"Variants",key:Math.ceil(1e3*Math.random()),component:t,onUpdate:w.saveElement.bind(this)})):null,this.state.showEditor?a.default.createElement(v.default,null,a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),element:t,name:t.name,markup:t.markup,style:t.style,state:t.state,title:"Editor",onSave:this.saveElement})):this.state.selectedComponent?a.default.createElement(v.default,null,a.default.createElement(h.default,null,a.default.createElement("button",{class:"showEditor",onClick:function(){return e.setState({showEditor:!0})}},"Open Editor"))):null,this.state.showContextMenu?a.default.createElement(g.default,{children:this.state.contextMenuChildren,position:this.state.contextMenuPosition,onMessage:this.onContextMenuMessage.bind(this)}):null)}}]),t}();console.log("Source code https://github.com/imvetri/ui-editor"),i.default.render(a.default.createElement(O,null),document.getElementById("index"))}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,