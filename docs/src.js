(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,,function(e,t,n){"use strict";var o=n(50);e.exports={readData:o.readData,writeData:o.writeData,readComponent:o.readComponent,writeComponent:o.writeComponent,popHistory:o.popHistory}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReact=function(e){e.events.forEach(function(e){e.id=e.id.replace("-","")});var t=function(e){return e.markup.replace(">"," {...this.props}>{this.props.children}")}(e),n=function(t){var n=JSON.parse(e.config);return Object.keys(n).forEach(function(e){if(n[e].override){var o="<"+e+"></"+e+">",r="{this.state."+e+".map((item,i)=>"+("<"+e+" state={item} key={i}></"+e+">")+")}";t=t.replace(o,r)}}),t}(t),o=function(e,t){return t.forEach(function(t){var n='id="'+t.id+'"';e=e.includes(n)?e.replace(n,n+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}"):e.replace("<"+t.id,"<"+t.id+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}")}),e.split("{state.").join("{this.state.")}(n,e.events),r=function(){if(!window.ExportNWB)return'window.saveVariant("'+e.name+'",state)'}();return"(\n        class "+e.name+" extends Component {\n        \n            constructor(props) {\n                super(props);\n                this.state = this.props.state || "+e.state+";\n\n                var dynamicStyle = document.createElement('style');\n                dynamicStyle.type = 'text/css';\n                dynamicStyle.innerHTML = `"+e.style+"`;\n                document.body.appendChild(dynamicStyle)\n            }\n        \n            "+e.events.map(function(e){return e.publishable?"\n                    \n                    "+(e.id+e.name)+" (e) {\n                        var state = JSON.parse(JSON.stringify(this.state))\n                        "+e.reducer+"\n                        debugger;\n                        this.setState(state);\n                        e.state = state;\n                        this.props."+e.publishName+"? this.props."+e.publishName+"(e):null;\n                    }\n                    \n                    ":"\n                    "+(e.id+e.name)+" (e) {\n                        var state = JSON.parse(JSON.stringify(this.state))\n                        "+e.reducer+"\n                        debugger;\n                        "+r+"\n                        this.setState(state);\n                    }\n                "}).join("\n")+"\n        \n            render() {\n                return ("+o+")\n            }\n        })\n        "}},function(e,t,n){"use strict";var o=n(42);e.exports={readData:o.readData,writeData:o.writeData,readComponent:o.readComponent,writeComponent:o.writeComponent,popHistory:o.popHistory}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.saveComponentsToWindow=function(e){e.forEach(function(e){!function(e){(function(e,t){for(;e.includes("$assets");){var n=e.split("['")[1].split("]")[0].split("");n.pop(),n=n.join(""),e=e.replace("$assets['"+n+"']","url("+window.assets[n]+")")}[].concat(a(document.querySelectorAll("[data-component-name='ParentComponent']"))).forEach(function(e){e.remove()});var o=document.createElement("style");o.setAttribute("data-component-name",t),o.type="text/css",o.innerHTML=e,document.body.appendChild(o)})(e.style,e.name),window[e.name]=(0,o.createComponent)(e)}(e)})},t.getNestedComponents=function e(t){var n=(0,r.readData)("ui-editor");var o=[t];if(l=t.markup,(0,r.readData)("ui-editor").filter(function(e){return l.includes(e.name)}).length>0){var i=n.filter(function(e){return t.markup.includes(e.name)}),s=i.map(e).flat(3);o.push.apply(o,a(s))}var l;return o.filter(function(e){return e&&e.markup})};var o=n(41),r=n(5);function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}window.saveVariant=function(e,t){var n=(0,r.readData)("ui-editor"),o=n.find(function(t){return t.name.includes(e)});o.variants=o.variants||[{name:"Default",state:JSON.parse(o.state)}],o.variants.push({name:"VARIANT_"+n.length,state:t}),o.variants=[].concat(a(new Set(o.variants.map(JSON.stringify)))).map(JSON.parse),(0,r.writeData)("ui-editor",n)}},,,function(e,t,n){"use strict";function o(e,t){var n=document.createElement("a");n.download=t,n.href=window.URL.createObjectURL(e),n.onclick=function(e){var t=this;setTimeout(function(){window.URL.revokeObjectURL(t.href)},1500)},n.click(),n.remove()}Object.defineProperty(t,"__esModule",{value:!0}),t.downloadFile=function(e,t,n){n=n||"text/plain",o(new Blob([t],{type:n}),e)},t.download=o},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=s(r);n(65);var i=s(n(67));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=this.props.messages;return a.default.createElement("div",null,e.map(function(e,t){return a.default.createElement(i.default,{key:t,message:e})}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.saveComponentsToWindow=function(e){e.forEach(function(e){!function(e){(function(e,t){for(;e.includes("$assets");){var n=e.split("['")[1].split("]")[0].split("");n.pop(),n=n.join(""),e=e.replace("$assets['"+n+"']","url("+window.assets[n]+")")}[].concat(a(document.querySelectorAll("[data-component-name='ParentComponent']"))).forEach(function(e){e.remove()});var o=document.createElement("style");o.setAttribute("data-component-name",t),o.type="text/css",o.innerHTML=e,document.body.appendChild(o)})(e.style,e.name),window[e.name]=(0,o.createComponent)(e)}(e)})},t.getNestedComponents=function e(t){var n=(0,r.readData)("ui-editor");var o=[t];if(l=t.markup,(0,r.readData)("ui-editor").filter(function(e){return l.includes(e.name)}).length>0){var i=n.filter(function(e){return t.markup.includes(e.name)}),s=i.map(e).flat(3);o.push.apply(o,a(s))}var l;return o.filter(function(e){return e&&e.markup})};var o=n(77),r=n(3);function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}window.saveVariant=function(e,t){var n=(0,r.readData)("ui-editor"),o=n.find(function(t){return t.name.includes(e)});o.variants=o.variants||[{name:"Default",state:JSON.parse(o.state)}],o.variants.push({name:"VARIANT_"+n.length,state:t}),o.variants=[].concat(a(new Set(o.variants.map(JSON.stringify)))).map(JSON.parse),(0,r.writeData)("ui-editor",n)}},,,,,,function(e,t,n){var o=n(19);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,'body {\n    position:relative;\n    color: #d9d9d9;\n    font-family: "Nunito Sans",-apple-system,".SFNSText-Regular","San Francisco",BlinkMacSystemFont,"Segoe UI","Helvetica Neue",Helvetica,Arial,sans-serif;\n    margin: 0px;\n}\n\nli , label, p, .rules , input, textarea{\n    font-size: 9px;\n}\n\ninput, textarea { \n    background: #2b2b2b;\n    color: #d9d9d9;\n    opacity: 0.75;\n    vertical-align: bottom;\n}\n\ninput[type="text"] {\n    -webkit-appearance: textarea;\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\nul label input {\n    width: 10px;\n}\n\nul, li {\n    padding-left: 5px;\n    margin-top: 0px;\n    margin-bottom: 0px;\n}\n\nbutton {\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 5px;\n    background-color: #343a40;\n    margin-left: 4px;\n}\n\nbutton i{\n    padding-right:4px;\n}\n\nbutton:hover {\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\nul,li, ul label {\n    color: rgba(255,255,255,0.5);\n}\n\nul label:hover, li:hover, .content:hover{\n    color: #fff;\n    background: rgb(43, 43, 43);\n}\n\n#index{\n    margin:-4px;\n}\n\n.CodeMirror {\n    border: 1px solid black;\n    margin-top:5px;\n}',""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=l(r);n(22);var i=l(n(24)),s=n(49);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders,showControls:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"addFolder",value:function(){var e=Array.from(this.state.folders);e.unshift({type:"NewFolder",name:"",contents:[],status:"closed"}),this.setState({folders:e})}},{key:"addComponent",value:function(){this.props.onOpenEditor()}},{key:"showControls",value:function(){this.setState({showControls:!0})}},{key:"hideControls",value:function(){this.setState({showControls:!1})}},{key:"render",value:function(){var e=this.props,t=this.state,n=this.state.showControls?"Controls":"Controls hideControls";return a.default.createElement("div",{className:"container elements-tab"},a.default.createElement("div",{className:"title",onMouseEnter:this.showControls.bind(this),onMouseLeave:this.hideControls.bind(this)},"Components",a.default.createElement("div",{className:n},a.default.createElement("button",{onClick:this.addComponent.bind(this)},a.default.createElement("i",{className:"fa fa-edit"}),e.selectedComponent?"Edit Component":"Add Component"),a.default.createElement("button",{onClick:this.addFolder.bind(this)},a.default.createElement("i",{className:"fa fa-folder"}),"Add Folder"))),a.default.createElement("div",{className:"folders"},a.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),components:t.components,folders:t.folders,selectedComponent:e.selectedComponent,onFoldersUpdate:e.onFoldersUpdate,onSelection:e.onSelection,onDeleteComponent:s.onDeleteComponent.bind(this),onDeleteFolder:s.onDeleteFolder.bind(this)})))}}]),t}();t.default=u},function(e,t,n){var o=n(23);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".override {\n    line-height: 0%;\n}\n\ntextarea {\n    height: 70px;\n    width: 450px;\n}\n\n.title{\n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    background: rgb(64, 64, 64);\n    padding: 5px;\n    font-size: 12px;\n}\n\n.elements-tab {\n    left:0px;\n    height: 100vh;\n    width:21vw;\n}\n\n.Controls{\n    display: inline-block;\n}\n\n.folders{\n    overflow: scroll;  \n    height:85vh;\n}\n\n.hideControls{\n    visibility: hidden;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0);(o=i)&&o.__esModule;n(25);var s=n(27);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={components:n.props.components,folders:n.props.folders},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"findFolder",value:function(e,t){return"string"!=typeof t&&("object"===(void 0===t?"undefined":r(t))?t.name===e?t:t.contents.find(function(t){return this.findFolder(e,t)}.bind(this)):void 0)}},{key:"removeContent",value:function(e,t){var n=e.contents;!function t(o){return e.name===o.name?"":(o.contents=function(e,t){var n=[];return t.forEach(function(t){n.push(e.contents.findIndex(function(e){return e===t}))}),(n=n.filter(function(e){return e>-1})).forEach(function(t){e.contents[t]=-1}),e.contents=e.contents.filter(function(e){return-1!==e}),e.contents}(o,n),"object"===(void 0===o?"undefined":r(o))?o.contents.filter(function(e){return"object"===(void 0===e?"undefined":r(e))}).find(function(e){return t(e)}.bind(this)):void 0)}(t[0])}},{key:"checkFolder",value:function(e){var t=Array.from(this.state.folders),n=t.findIndex(function(e){return"NewFolder"===e.type});-1!==n&&t.splice(n,1),console.log(t);var o=this.findFolder(e.name,t[0]);o?(console.log("Folder found, updating the folder content from "+o.contents+" to "+e.contents),o.contents=e.contents,this.removeContent(o,t)):(console.log("Folder not found, adding "+JSON.stringify(e)+"to list of folders "+JSON.stringify(t)),t[0].contents.unshift(e));console.log(t),this.props.onFoldersUpdate(t)}},{key:"render",value:function(){return(0,s.folderStructure)(this.props,this.checkFolder.bind(this))}}]),t}();t.default=l},function(e,t,n){var o=n(26);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.folderStructure=function(e,t){var n=e.folders;return f(e,t),n.map(p)};var o=a(n(28)),r=a(n(36));function a(e){return e&&e.__esModule?e:{default:e}}var i=void 0,s=void 0,l=void 0,u=void 0,c=void 0,d=void 0;function f(e,t){i=e.selectedComponent,s=e.onSelection,c=e.components,l=t,u=e.onDeleteComponent,d=e.onDeleteFolder}function p(e,t){var n=e.contents;return React.createElement(o.default,{key:t,folder:e,contents:n.map(m),onFolderUpdate:l,onDeleteFolder:d})}function m(e,t){if("string"==typeof e)return React.createElement(r.default,{key:t,component:c.find(function(t){return t.name===e}),selectedComponent:i,onSelectionChange:s,onDeleteComponent:u});var n=e;return React.createElement(o.default,{key:t,folder:n,contents:n.contents.map(m),onFolderUpdate:l,onDeleteFolder:d})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=u(r);n(29);var i=u(n(31)),s=n(34),l=n(35);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={iconStatus:"fa fa-folder",folderClass:"newFolder",name:n.props.folder.name,contents:n.props.folder.contents,type:n.props.folder.type,status:n.props.folder.status},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"newFolder",value:function(e){this.props.onFolderUpdate(e)}},{key:"render",value:function(){var e=this.props.folder,t=this.props.contents,n="open"===this.state.status?"fa fa-folder-open":"fa fa-folder";return"NewFolder"==e.type?a.default.createElement(i.default,{onNewFolder:this.newFolder.bind(this)}):"folder"==e.type?a.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},a.default.createElement("i",{className:n,onClick:s.toggleFolder.bind(this)}),a.default.createElement("input",{type:"text",className:"folder",placeholder:"Enter folder name",readOnly:!0,value:this.state.name}),a.default.createElement("button",{onClick:s.deleteFolder.bind(this)},a.default.createElement("i",{className:"fa fa-trash"}),"Delete"),"open"===this.state.status?t:null):"noFolder"==e.type?a.default.createElement("div",{className:this.state.folderClass,"data-folder-name":e.name,draggable:"true",onDrop:l.dropHandler.bind(this),onDragOver:l.dragOverHandler.bind(this),onDragLeave:l.dragLeaveHandler.bind(this),onDragStart:l.folderStartDrag.bind(this)},t):void 0}}]),t}();t.default=c},function(e,t,n){var o=n(30);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"input.folder{\n    border:none;\n    background:none;\n    padding-bottom: 13px;\n}\n\n.newFolder{\n    user-select: none;\n}\n\n.newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: white;\n    }\n}\n.fa.fa-folder ~ ul {\n    display: none;\n}\n.fa.fa-folder-open ~ ul {\n    display:block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(32);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={status:"fa fa-folder",newFolderClass:"newFolder",folderName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"folderNameChanged",value:function(e){this.setState({folderName:e.currentTarget.value})}},{key:"saveFolderNameOnEnter",value:function(e){"Enter"===e.key&&this.props.onNewFolder({name:this.state.folderName,contents:[],type:"folder",status:"closed"})}},{key:"render",value:function(){return i.default.createElement("div",{className:this.state.newFolderClass},i.default.createElement("i",{className:this.state.status}),i.default.createElement("input",{type:"text",className:"folder",autoFocus:!0,placeholder:"Enter folder name",value:this.state.folderName,onChange:this.folderNameChanged.bind(this),onKeyPress:this.saveFolderNameOnEnter.bind(this)}))}}]),t}();t.default=s},function(e,t,n){var o=n(33);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".newFolder i{\n    color: rgba(255,255,255,0.5);\n    border-color: rgba(0,0,0,0.9);\n    border-width: 1px;\n    padding: 7px;\n}\n\n.newFolder.dragOver i{\n    animation: blink .5s infinite;\n}\n\n@keyframes blink{\n    from {    \n        color: rgba(255,255,255,0.5);\n    }\n    to {\n        color: green;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deleteFolder=function(e){this.props.onDeleteFolder("CONTENTS",this.state.name)},t.toggleFolder=function(){"closed"===this.state.status?function(){this.setState({status:"open"})}.call(this):function(){this.setState({status:"closed"})}.call(this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){e.preventDefault();var t=e.dataTransfer.getData("component-name"),n=e.dataTransfer.getData("folder-name");if(("null"==n||""==n)&&"null"==(n=e.currentTarget.getAttribute("data-folder-name")))return;var o=Array.from(this.state.contents);t?o.push(t):n&&n!==this.state.folderName&&o.push({name:n,contents:[],type:"folder",status:"closed"});this.props.onFolderUpdate({name:this.state.name,contents:o,type:"folder",status:"open"}),console.log("Drop from folder"),e.stopPropagation()},t.dragOverHandler=function(e){e.preventDefault(),this.setState({folderClass:"newFolder dragOver",status:"open"})},t.dragLeaveHandler=function(e){this.setState({folderClass:"newFolder",status:"closed"})},t.folderStartDrag=function(e){console.log("Folder started draged");var t=event.target.getAttribute("data-folder-name");e.dataTransfer.setData("folder-name",t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(37),l=n(38);n(47);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selectedComponent:n.props.selectedComponent},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"restoreClass",value:function(e){e.target.classList.remove("hideAdditionals")}},{key:"render",value:function(){var e=this.props,t=e.selectedComponent,n=e.component;return i.default.createElement("div",{className:"background",draggable:"true","data-name":n.name,onDragStart:s.addComponentDetails.bind(this),onDragEnd:this.restoreClass},i.default.createElement("li",{className:t&&e.component.name===t.name?"selected component":"component",onClick:s.selectionChanged.bind(this),index:e.index},i.default.createElement("span",{className:"componentName"},n.name),i.default.createElement("span",null,i.default.createElement("button",{index:e.index,onClick:l.onExport.bind(null,n.name)},i.default.createElement("i",{className:"fas fa-file-export"}),"Export"),i.default.createElement("button",{index:e.index,onClick:e.onDeleteComponent},i.default.createElement("i",{className:"fa fa-trash"}),"Delete"))))}}]),t}();t.default=u},function(e,t,n){"use strict";function o(e){console.log("Component dragged");var t=event.target.getAttribute("data-name");event.target.classList.add("hideAdditionals"),e.dataTransfer.setData("component-name",t),e.stopPropagation()}Object.defineProperty(t,"__esModule",{value:!0}),t.selectionChanged=function(e){this.props.onSelectionChange(e)},t.addComponentDetails=o,window.eventCallbacks={addComponentDetails:o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onExport=function(e){switch(window.EXPORT_TYPE){case"SIMPLE":(0,a.exportSimple)(e);break;case"NWB":(0,r.exportNWB)(e);break;case"STORYBOOK":(0,o.exportStorybook)(e);break;default:(0,a.exportSimple)(e)}};var o=n(39),r=n(45),a=n(46)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportStorybook=function(e){var t=(0,i.readData)("ui-editor"),n=t.find(function(t){return t.name.includes(e)}),l=(0,a.getNestedComponents)(n),u=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(l.map(function(e){return e.name})))).map(function(e){return t.find(function(t){return t.name===e})});window.ExportNWB=!0;var c=u.map(r.convertToReact).map(function(e){return e.replace("(","").replace("})","}")});c[0]="export default "+c[0];var d=" /* eslint-disable */\n    import React, {Component} from 'react';\n    "+c.reverse().join("\n");window.ExportNWB=!1;var f=(0,o.convertToReactStories)(n);(0,s.zipFiles)([{name:e+".js",content:d},{name:e+".stories.js",content:f}])};var o=n(40),r=n(4),a=n(6),i=n(5),s=n(44)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReactStories=function(e){return"import React from 'react';\n\n    import "+e.name+' from "./'+e.name+"\";\n    \n    export default {\n        title: '"+e.name+"',\n        component: "+e.name+"\n    }\n    \n    "+e.variants.map(function(t){return"export const "+t.name+" = () => <"+e.name+" state={"+JSON.stringify(t.state)+"}></"+e.name+">;"}).join("")}},function(module,exports,__webpack_require__){"use strict";var _React=__webpack_require__(4);function createComponent(component){var componentString=(0,_React.convertToReact)(component);return eval(Babel.transform(componentString,{presets:["react"],plugins:["transform-es2015-classes"]}).code)}module.exports={createComponent:createComponent}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readData=r,t.writeData=a,t.readComponent=function(e){var t=r("ui-editor");if(!t)return;return t.find(function(t){return t.name===e})},t.writeComponent=function(e){if(!Array.isArray(e)&&e.name){var t=r("ui-editor"),n=t.findIndex(function(t){return t.name===e.name});t[n]=e,a("ui-editor",t)}},t.popHistory=function(){var e=r("ui-editor-history");if(!e)return;var t=e.pop();if(!e)return;a("ui-editor-history",e,!0),a("ui-editor",t,!0)};var o=n(43);function r(e){if("ui-editor"===e)return window.components||(window.components=JSON.parse(localStorage.getItem(e))||o.sample),JSON.parse(JSON.stringify(window.components));if("ui-editor-history"===e){var t=localStorage.getItem(e);if(t)return JSON.parse(t)}if("folders"===e){var n,r=JSON.parse(localStorage.getItem(e)),a=window.components.map(function(e){return e.name});if(null===r)return[{type:"noFolder",contents:a,name:"",status:"open"}];var i=a.filter(function(e){return r.every(function(t){return t.contents.every(function(t){return t!==e})})});return(n=r.find(function(e){return"noFolder"===e.type}).contents).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(i)),r}return[]}function a(e,t,n){"folders"==e&&(console.log("writing folders"),localStorage.setItem(e,JSON.stringify(t))),"ui-editor"==e&&(console.log("WRITE"),window.components=t,localStorage.setItem(e,JSON.stringify(t)),n||function(e){window.editorHistory=r("ui-editor-history"),editorHistory.push(e),localStorage.setItem("ui-editor-history",JSON.stringify(editorHistory))}(t))}},function(e,t,n){"use strict";e.exports={sample:[{name:"ForgotPassword",markup:'<div className="vsButton"><button id="f123">Forgot Password</button></div>',events:[{name:"onClick",reducer:"state.show",publishable:!0,publishName:"onPasswordForgotten",id:"f123"}],state:'{"show":"false"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}"},{name:"Modal",markup:'<div class="modal">\n<header>\n  <h3>Forgot Password</h3>\n    <button className="closeButton" id="x">x</button>\n</header>\n<section class="content"><PrivacyAndPolicy></PrivacyAndPolicy>\n \n</section>\n<footer>footer</footer>\n</div>',events:[{name:"onClick",reducer:'state.name="";',publishable:!0,publishName:"onCloseModal",id:"x"}],state:"{}",style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}"},{name:"CancelButton",markup:'<div className="vsButton"><button>{state.cancelButton}</button></div>',events:[],state:'{"cancelButton":"Cancel"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}"},{name:"SubmitButton",markup:'<div className="vsButton"><button>{state.submitButton}</button></div>',events:[],state:'{"submitButton":"Submit"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}"},{name:"PrivacyAndPolicy",markup:'<div class="privacyPolicy">\n  Please enter the email address you used to create your account and we will send you a link to reset your password. See Privacy Policy\n</div>',events:[],state:"{}",style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}"},{name:"TermsAndService",markup:'<div class="privacyPolicy">\n{state.variant}\n</div>',events:[],state:'{"variant":"This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply."}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}"},{name:"Form",markup:'<form className="vsfrm">\n</form>',events:[],state:"{}",style:".vsfrm{\nheight:400px;\nwidth:400px;\n}",config:"{}"},{name:"EmailInput",markup:'<span className="emailInput">\n<input id="input" className="email" type="email" value={state.email} placeholder="Email Address *"/>\n</span>',events:[{name:"onChange",reducer:"state.email = e.target.value",publishable:"",publishName:"",id:"input"}],state:"{}",style:".emailInput .email{\npadding: .75rem;\nborder: 1px solid #e1e1e1;\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\n    font-size: 16px;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    width: 100%;\n    border-radius: 0;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n\n}",config:"{}"},{name:"ResetPasswordForm",markup:"<form><TermsAndService></TermsAndService><EmailInput></EmailInput><SubmitButton></SubmitButton><CancelButton></CancelButton><TermsAndService><PrivacyAndPolicy></PrivacyAndPolicy></TermsAndService>\n</form>",events:[],state:'{"variant":"text"}',style:"form{\nheight:400px;}",config:"{}"},{name:"Page",markup:'<div className="page"><ForgotPassword></ForgotPassword><ResetPasswordModal></ResetPasswordModal></div>',events:[{name:"onCloseModal",reducer:"state.ResetPasswordModal = [];",publishable:"",publishName:"",id:"VariantModal"},{name:"onClose",reducer:"state.ResetPasswordModal = [];",publishable:"",publishName:"",id:"ResetPasswordModal"},{name:"onPasswordForgotten",reducer:'state.ResetPasswordModal =[{title: "Forgot Password","footer": "Copyrigts","show": "sd"}]',publishable:"",publishName:"",id:"ForgotPassword"}],state:'{"showModal":false,"list":[1,2,3,4,5],"ResetPasswordModal":[]}',style:".page{\nheight: 700px;\nwidth: 500px;\n\n}",config:'{"VariantModal":{"showHideProp":"showModal","override":false},"ForgotPasswordButton":{"showHideProp":"","override":false},"ForgotPassword":{"showHideProp":"","override":false,"renderListProp":""},"ResetPasswordModal":{"showHideProp":"showModal","override":true,"renderListProp":""}}'},{name:"ResetPasswordModal",markup:'<div class="modal">\n<header>\n  <h3>{state.title}</h3>\n    <button id="close" className="closeButton">x</button>\n</header>\n<section class="content"><ResetPasswordForm></ResetPasswordForm>\n</section>\n<footer>{state.footer}</footer>\n</div>',events:[{name:"onClick",reducer:'state.show = "sd";',publishable:!0,publishName:"onClose",id:"close"}],state:'{"title":"Forgot Password","footer":"Copyrigts"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}"}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.zipFiles=function(e){var t=new JSZip,n=t.folder("src");e.forEach(function(e){n.file(e.name,e.content)}),t.generateAsync({type:"blob"}).then(function(e){(0,o.download)(e,"archive.zip")})};var o=n(9)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportNWB=function(e){var t=(0,i.readData)("ui-editor"),n=t.find(function(t){return t.name.includes(e)}),s=(0,o.getNestedComponents)(n),l=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(s.map(function(e){return e.name})))).map(function(e){return t.find(function(t){return t.name===e})});window.ExportNWB=!0;var u=l.map(r.convertToReact).map(function(e){return e.replace("(","").replace("})","}")});u[0]="export default "+u[0];var c="import React, {Component} from 'react';\n"+u.reverse().join("\n");console.log(c),window.ExportNWB=!1,(0,a.downloadFile)(e+".js",c)};var o=n(6),r=n(4),a=n(9),i=n(5)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportSimple=function(e){var t=(0,a.readData)("ui-editor"),n=t.find(function(t){return t.name.includes(e)}),i=(0,o.getNestedComponents)(n),s=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(i.map(function(e){return e.name})))).map(function(e){return t.find(function(t){return t.name===e})}),l=s.map(r.convertToReact).map(function(e){return e.replace("(","").replace("})","}")}).reverse().join("");console.log(l)};var o=n(6),r=n(4),a=n(5)},function(e,t,n){var o=n(48);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n.background {\n    background: rgb(64, 64, 64);\n    border-bottom: 1px solid #333333;\n}\n\n.component {\n    display:flex;\n    justify-content: space-between;\n}\n\n.component .componentName{\n    padding:7px;\n}\n\n.hideAdditionals span:not(.componentName){\n    display:none;\n}\n\n.hideAdditionals {\n    display: inline-block;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onDeleteComponent=function(e){e.stopPropagation();var t=e.target.parentElement.parentElement.innerText.split("\n")[0];if(this.state.components.find(function(e){return e.name===t}).length<1)return;var n=Array.from(this.state.components),r=n.findIndex(function(e){return e.name===t});n.splice(r,1),this.setState({components:n}),(0,o.writeData)("ui-editor",n)},t.onDeleteFolder=function(e,t){var n;switch(e){case"FOLDER":case"FOLDER_AND_CONTENTS":break;case"CONTENTS":var o=Array.from(this.state.folders),r=o.find(function(e){return e.name===t}),a=o.find(function(e){return"noFolder"===e.type});(n=a.contents).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(r.contents));var i=o.findIndex(function(e){return e.name===t});o.splice(i,1),this.props.onFoldersUpdate(o)}};var o=n(3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readData=r,t.writeData=a,t.readComponent=function(e){var t=r("ui-editor");if(!t)return;return t.find(function(t){return t.name===e})},t.writeComponent=function(e){if(!Array.isArray(e)&&e.name){var t=r("ui-editor"),n=t.findIndex(function(t){return t.name===e.name});t[n]=e,a("ui-editor",t)}},t.popHistory=function(){var e=r("ui-editor-history");if(!e)return;var t=e.pop();if(!e)return;a("ui-editor-history",e,!0),a("ui-editor",t,!0)};var o=n(51);function r(e){if("ui-editor"===e)return window.components||(window.components=JSON.parse(localStorage.getItem(e))||o.sample),JSON.parse(JSON.stringify(window.components));if("ui-editor-history"===e){var t=localStorage.getItem(e);if(t)return JSON.parse(t)}if("folders"===e){var n,r=JSON.parse(localStorage.getItem(e)),a=window.components.map(function(e){return e.name});if(null===r)return[{type:"noFolder",contents:a,name:"",status:"open"}];var i=a.filter(function(e){return r.every(function(t){return t.contents.every(function(t){return t!==e})})});return(n=r.find(function(e){return"noFolder"===e.type}).contents).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(i)),r}return[]}function a(e,t,n){"folders"==e&&(console.log("writing folders"),localStorage.setItem(e,JSON.stringify(t))),"ui-editor"==e&&(console.log("WRITE"),window.components=t,localStorage.setItem(e,JSON.stringify(t)),n||function(e){window.editorHistory=r("ui-editor-history"),editorHistory.push(e),localStorage.setItem("ui-editor-history",JSON.stringify(editorHistory))}(t))}},function(e,t,n){"use strict";e.exports={sample:[{name:"ForgotPassword",markup:'<div className="vsButton"><button id="f123">Forgot Password</button></div>',events:[{name:"onClick",reducer:"state.show",publishable:!0,publishName:"onPasswordForgotten",id:"f123"}],state:'{"show":"false"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}"},{name:"Modal",markup:'<div class="modal">\n<header>\n  <h3>Forgot Password</h3>\n    <button className="closeButton" id="x">x</button>\n</header>\n<section class="content"><PrivacyAndPolicy></PrivacyAndPolicy>\n \n</section>\n<footer>footer</footer>\n</div>',events:[{name:"onClick",reducer:'state.name="";',publishable:!0,publishName:"onCloseModal",id:"x"}],state:"{}",style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}"},{name:"CancelButton",markup:'<div className="vsButton"><button>{state.cancelButton}</button></div>',events:[],state:'{"cancelButton":"Cancel"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}"},{name:"SubmitButton",markup:'<div className="vsButton"><button>{state.submitButton}</button></div>',events:[],state:'{"submitButton":"Submit"}',style:".vsButton{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\ncolor: rgb(0, 0, 0);\n}\n\n\n.vsButton button{\nborder-color: #bf215d;\n    color: #fff;\n    background: #ef5f96;\nborder: 1px solid;\npadding: .5rem 2rem;\n}\n\n.vsButton button:hover{\nborder-color: #bf215d;\n}",config:"{}"},{name:"PrivacyAndPolicy",markup:'<div class="privacyPolicy">\n  Please enter the email address you used to create your account and we will send you a link to reset your password. See Privacy Policy\n</div>',events:[],state:"{}",style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}"},{name:"TermsAndService",markup:'<div class="privacyPolicy">\n{state.variant}\n</div>',events:[],state:'{"variant":"This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply."}',style:".privacyPolicy{\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\nfont-size: 11px;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n}",config:"{}"},{name:"Form",markup:'<form className="vsfrm">\n</form>',events:[],state:"{}",style:".vsfrm{\nheight:400px;\nwidth:400px;\n}",config:"{}"},{name:"EmailInput",markup:'<span className="emailInput">\n<input id="input" className="email" type="email" value={state.email} placeholder="Email Address *"/>\n</span>',events:[{name:"onChange",reducer:"state.email = e.target.value",publishable:"",publishName:"",id:"input"}],state:"{}",style:".emailInput .email{\npadding: .75rem;\nborder: 1px solid #e1e1e1;\nfont-family: BentonSansBook,Helvetica,Arial,sans-serif;\n    font-size: 16px;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    width: 100%;\n    border-radius: 0;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n\n}",config:"{}"},{name:"ResetPasswordForm",markup:"<form><TermsAndService></TermsAndService><EmailInput></EmailInput><SubmitButton></SubmitButton><CancelButton></CancelButton><TermsAndService><PrivacyAndPolicy></PrivacyAndPolicy></TermsAndService>\n</form>",events:[],state:'{"variant":"text"}',style:"form{\nheight:400px;}",config:"{}"},{name:"Page",markup:'<div className="page"><ForgotPassword></ForgotPassword><ResetPasswordModal></ResetPasswordModal></div>',events:[{name:"onCloseModal",reducer:"state.ResetPasswordModal = [];",publishable:"",publishName:"",id:"VariantModal"},{name:"onClose",reducer:"state.ResetPasswordModal = [];",publishable:"",publishName:"",id:"ResetPasswordModal"},{name:"onPasswordForgotten",reducer:'state.ResetPasswordModal =[{title: "Forgot Password","footer": "Copyrigts","show": "sd"}]',publishable:"",publishName:"",id:"ForgotPassword"}],state:'{"showModal":false,"list":[1,2,3,4,5],"ResetPasswordModal":[]}',style:".page{\nheight: 700px;\nwidth: 500px;\n\n}",config:'{"VariantModal":{"showHideProp":"showModal","override":false},"ForgotPasswordButton":{"showHideProp":"","override":false},"ForgotPassword":{"showHideProp":"","override":false,"renderListProp":""},"ResetPasswordModal":{"showHideProp":"showModal","override":true,"renderListProp":""}}'},{name:"ResetPasswordModal",markup:'<div class="modal">\n<header>\n  <h3>{state.title}</h3>\n    <button id="close" className="closeButton">x</button>\n</header>\n<section class="content"><ResetPasswordForm></ResetPasswordForm>\n</section>\n<footer>{state.footer}</footer>\n</div>',events:[{name:"onClick",reducer:'state.show = "sd";',publishable:!0,publishName:"onClose",id:"close"}],state:'{"title":"Forgot Password","footer":"Copyrigts"}',style:".modal{\n  width:400px;\n  font-size:22px;\n  position:relative;\nbackground-color: white;\ncolor: black;\n  font-family: BentonSansLight,Helvetica,Arial,sans-serif;\n  font-weight:400;\n    line-height: 17px;\n    letter-spacing: .04em;\n    text-transform: inherit;\n    font-weight: 400;\n\n}\n\n.modal h3{\n  padding:1rem;\nfont-size:26px;\nfont-weight: 400;\n}\n\n.modal .content{\npadding:1rem;\nfont-weight: 400;\n}\n\n.modal footer{\npadding:1rem;\n  border:1px solid black;\nfont-weight: 400;\n}\n.modal header{\n  border:1px solid black;\nfont-weight: 400;\n}\n\n.modal .closeButton{\n  position: absolute;\n  right: 10px;\n  top: 20px;\n}\n\n.modal .content{\n    border:1px solid black;\nfont-weight: 400;\n}",config:"{}"}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(53);var s=n(3),l=n(10);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,s.readComponent)(n.props.name);return n.state={name:o?o.name:"",markup:o?o.markup:"",state:o?o.state:"",style:o?o.style:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"saveElement",value:function(){this.props.onSave({name:this.state.name,markup:this.state.markup,style:this.state.style,state:this.state.state})}},{key:"render",value:function(){var e=this,t=this.state.name,n=this.state.markup,o=this.state.style,r=this.state.state;return i.default.createElement("div",{className:"container editor-tab"},i.default.createElement("button",{onClick:this.saveElement.bind(this),id:"save"},i.default.createElement("i",{className:"fas fa-save"}),"Save & close"),i.default.createElement("div",null,i.default.createElement("div",{className:"editor name"},i.default.createElement("div",{className:"title"},"Component Name"),i.default.createElement("input",{type:"text",placeholder:"Enter element name",value:t,onChange:function(t){e.setState({name:event.currentTarget.value})},id:"elementName"})),i.default.createElement("div",{className:"editor markup"},i.default.createElement("div",{className:"title"},"Component Markup"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:n,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({markup:o})}})),i.default.createElement("div",{className:"editor css"},i.default.createElement("div",{className:"title"},"Component CSS"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:o,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({style:o})}})),i.default.createElement("div",{className:"editor state"},i.default.createElement("div",{className:"title"},"Component State"),i.default.createElement(l.UnControlled,{autoCursor:!1,value:r,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0,lineWrapping:!0},onChange:function(t,n,o){e.setState({state:o})}}))))}}]),t}();t.default=u},function(e,t,n){var o=n(54);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".editor-tab {\n    width: 100vw;\n    animation: slide-up 0.2s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\ninput.folder:read-only {\n    pointer-events: none;\n}\n\n\n.editor-tab button {\n    position: absolute;\n    top: -5%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}\n\n.showEditor{\n    margin-bottom:30px;\n}\n\n.editor.name{\n    width:10%;\n}\n\n.editor{\n    width: 29%;\n    display: inline-block;\n    margin: 5px;\n    margin-top: 2px;\n}\n",""])},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=p(r),i=p(n(57)),s=p(n(60)),l=p(n(61)),u=p(n(72));n(73);var c=n(75),d=n(76),f=n(3);function p(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state=Object.assign({},n.props),n.state.selectedTag=n.props.selectedTag,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.component;if(0==this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"),a.default.createElement("p",null,'Looks like you do not have any Web component created. Type some "html" on the right "Editor" tab'));if(void 0===t.name&&0!=this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"),a.default.createElement("p",null,"Looks like you have not selected any component. Click on any of the component in the left pane."));var n=(0,d.getNodeTree)(t,t.markup,t.style,JSON.parse(t.state),t.events);if(void 0!==n.error)return(0,u.default)(n.error);if(void 0===n.result&&0!=this.state.components.length)return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"title"},"Events"));var o=this.state.selectedTag||"",r=void 0,p=void 0,m=[];if(o.includes("child-component-")){var h=(0,f.readData)("ui-editor"),v=o.split("child-component-")[1],b=h.find(function(e){return e.name===v});m=b.events.filter(function(e){return!0===e.publishable}).map(function(e){return e.publishName});var y=t.events.filter(function(e){return m.find(function(t){return t===e.name&&e.id===b.name})});y=y.map(function(t,n){return a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:m,onSave:c.updateEvent.bind(e),deleteEvent:c.deleteEvent.bind(e)})}),r=o?y:null,p=a.default.createElement(i.default,{key:Math.ceil(1e3*Math.random()),onChange:c.updateConfiguration.bind(this),childName:v,parent:t})}else{var g=t.events.map(function(t,n){return a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),index:n,event:t,selectedTagID:o,eventNames:m,onSave:c.updateEvent.bind(e),deleteEvent:c.deleteEvent.bind(e)})});r=o?g.filter(function(e){return o.includes(e.props.event.id)}):null}return a.default.createElement("ul",{className:"container events-tab"},a.default.createElement("div",{className:"tags"},a.default.createElement(s.default,{node:n.result,onSelectedTagChanged:c.selectedTagChanged.bind(this)})),p,r&&r.length>0?a.default.createElement("div",null,a.default.createElement("div",{className:"title"},"Existing Events"),r):null,o?a.default.createElement("div",null,a.default.createElement("div",{className:"title"},"Add Event"),a.default.createElement(l.default,{key:t.events.length,eventNames:m,selectedTagID:o,onSave:c.updateEvent.bind(this)})):null)}}]),t}();t.default=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(58);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=JSON.parse(n.props.parent.config)[n.props.childName]||{override:!1};return n.state={override:o.override},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"toggelOverride",value:function(){this.setState({override:!this.state.override}),this.props.onChange({config:{override:!this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"saveConfig",value:function(){this.props.onChange({config:{override:this.state.override},childName:this.props.childName,parentName:this.props.parent.name})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("div",{className:"title"},"Child Configurations"),i.default.createElement("div",{className:"spacing"},i.default.createElement("label",null,"Override state"),i.default.createElement("input",{type:"checkbox",onChange:this.toggelOverride.bind(this),checked:this.state.override?"checked":""})))}}]),t}();t.default=s},function(e,t,n){var o=n(59);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.configurator {\n    background: rgb(64, 64, 64);\n    margin-top: 10px;\n    padding: 5px;\n}\n\n.spacing{\n    margin: 10px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),s=(o=i)&&o.__esModule?o:{default:o};var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"render",value:function(){var e=this,n=this.props.node;if(!n)return s.default.createElement("span",null,"null");if("string"==typeof n)return s.default.createElement("li",null,n);var o=n.props.id?"-"+n.props.id:"";if(n.props&&Array.isArray(n.props.children)){var a=n.props.children.map(function(n,o){return s.default.createElement(t,{key:o,node:n,onSelectedTagChanged:e.props.onSelectedTagChanged})});return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:n.type+o}),n.type+o),a)}if("object"===r(n.props.children)){var i=n.props.children;return s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",onChange:this.props.onSelectedTagChanged,value:(n.type.name||n.type)+o}),n.type.name||n.type),s.default.createElement(t,{key:index,node:i,onSelectedTagChanged:this.props.onSelectedTagChanged}))}return"function"==typeof n.type?s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:"child-component-"+n.type.name,onChange:this.props.onSelectedTagChanged}),n.type.name)):s.default.createElement("ul",null,s.default.createElement("label",null,s.default.createElement("input",{type:"radio",name:"selectedElement",value:n.type+o,onChange:this.props.onSelectedTagChanged}),n.type+o))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=c(r);n(62);var i=c(n(64)),s=n(10),l=n(70),u=n(71);function c(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:n.props.event?n.props.event.name:"",reducer:n.props.event?n.props.event.reducer:"",publishable:n.props.event?n.props.event.publishable:"",publishName:n.props.event?n.props.event.publishName:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"render",value:function(){var e=this;if(void 0===this.props.selectedTagID)return(0,i.default)();var t=this.state.publishable?a.default.createElement("input",{type:"text",onChange:l.updatePublishName.bind(this),value:this.state.publishName,placeholder:"Enter event publish name for other components to subscribe to"}):null,n=this.props.eventNames.map(function(e){return a.default.createElement("option",{value:e})});return a.default.createElement("div",{className:"event"},a.default.createElement("div",{class:"spacing"},a.default.createElement("label",null,"Event name"),a.default.createElement("input",{list:"events",type:"text",onChange:l.updateEventName.bind(this),value:this.state.name,title:"Event Name"}),a.default.createElement("datalist",{id:"events"},n)),a.default.createElement("div",{class:"spacing"},a.default.createElement("label",null,"Publishable"),a.default.createElement("input",{type:"checkbox",onChange:l.updateEventType.bind(this),checked:this.state.publishable?"checked":""}),t),a.default.createElement("div",{class:"spacing"},a.default.createElement("label",null,"Event reducer"),a.default.createElement(s.UnControlled,{value:this.state.reducer,autoCursor:!1,options:{lineNumbers:!1,mode:"text/javascript",theme:"darcula",indentWithTabs:!1,smartIndent:!0},onChange:function(t,n,o){e.setState({reducer:o})}})),a.default.createElement("div",null,a.default.createElement("button",{onClick:u.publishEvent.bind(this),id:"saveEvent"},a.default.createElement("i",{className:"fas fa-save"}),"Save"),a.default.createElement("button",{onClick:u.deleteEvent.bind(this),id:"deleteEvent"},a.default.createElement("i",{className:"fas fa-trash"}),"Delete")))}}]),t}();t.default=d},function(e,t,n){var o=n(63);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n\n.info {\n    color: yellowgreen;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\n.event input {\n    margin-left:5px;\n    width:150px;\n}\n\n.event textarea {\n    margin-top: 8px;\n    width: 300px;\n}\n\n.input {\n    padding: 5px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(11),a=(o=r)&&o.__esModule?o:{default:o};t.default=function(){return React.createElement(a.default,{messages:[{type:"info",text:"#1 INFO: Select any element in the left most pane(editor pane) to see its content"},{type:"info",text:"#2 INFO: Click on 'Add' to add an component"}]})}},function(e,t,n){var o=n(66);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".error {\n    color: red;\n}\n\n\n.info {\n    color: yellowgreen;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(68);var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){var e=this.props.message;return"error"===e.type||"info"===e.type?i.default.createElement("div",{className:e.type},i.default.createElement("code",null,e.text)):(console.error(e.type+" is unidentified message type for <MessagesComponent/>. Please use either 'error' or 'info' only. If you require a different type, raise an issue, send a PR"),i.default.createElement("div",{className:"eerror"},i.default.createElement("code",null,"error : unidentified message type. Please use either error/ info only")))}}]),t}();t.default=s},function(e,t,n){var o=n(69);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"\n.error {\n    color: red;\n}\n\n\n.info {\n    color: yellowgreen;\n}",""])},function(e,t,n){"use strict";function o(e){this.setState({publishable:e.currentTarget.checked})}var r,a,i;e.exports=(i=o,(a="updateEventType")in(r={updateEventName:function(e){this.setState({name:e.target.value})},updateEventType:o,updatePublishName:function(e){this.setState({publishName:e.target.value})}})?Object.defineProperty(r,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[a]=i,r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.publishEvent=function(){this.props.onSave({name:this.state.name,reducer:this.state.reducer,index:this.props.index,publishable:this.state.publishable,publishName:this.state.publishName})},t.deleteEvent=function(){this.props.deleteEvent(this.props.index)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(11),a=(o=r)&&o.__esModule?o:{default:o};t.default=function(e){var t=[{type:"error",text:"ERROR : "+e+"developer log: look in console related to eval"}];return React.createElement(a.default,{messages:t})}},function(e,t,n){var o=n(74);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".events {\n    border:1px solid black;\n    padding: 5px;\n}\n\n.error {\n    color: red;\n}\n\n.tags.tags ul {\n    border: 0px;\n    margin-left: 30px;\n    padding:5px;\n}\n\n.tags ul:first-child {\n    margin-left: -2px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));this.state.selectedTag.includes("child-component-")?e.id=this.state.selectedTag.split("child-component-")[1]:e.id=this.state.selectedTag.split("-")[1];void 0===e.index?t.events.push(e):t.events[e.index]=e;this.props.onEventsUpdate(t.events)},t.selectedTagChanged=function(e){this.setState({selectedTag:e.currentTarget.value})},t.deleteEvent=function(e){var t=JSON.parse(JSON.stringify(this.state.component));t.events=t.events.splice(e,1),this.props.onEventsUpdate(t.events)},t.updateConfiguration=function(e){this.props.onConfigUpdate(e)}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNodeTree=getNodeTree;var _react=__webpack_require__(0),_react2=_interopRequireDefault(_react),_Runtime=__webpack_require__(12);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function getNodeTree(element,jsx,style,state,events){var result=void 0,error=void 0;try{var nestedComponents=(0,_Runtime.getNestedComponents)(element);nestedComponents.length>0&&(0,_Runtime.saveComponentsToWindow)(nestedComponents),result=eval(Babel.transform(jsx,{presets:["react"]}).code)}catch(e){error=e}finally{return _defineProperty({error:error,result:result},"result",result)}}window.React=_react2.default,window.Component=_react2.default.Component},function(module,exports,__webpack_require__){"use strict";var _React=__webpack_require__(78);function createComponent(component){var componentString=(0,_React.convertToReact)(component);return eval(Babel.transform(componentString,{presets:["react"],plugins:["transform-es2015-classes"]}).code)}module.exports={createComponent:createComponent}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToReact=function(e){e.events.forEach(function(e){e.id=e.id.replace("-","")});var t=function(e){return e.markup.replace(">"," {...this.props}>{this.props.children}")}(e),n=function(t){var n=JSON.parse(e.config);return Object.keys(n).forEach(function(e){if(n[e].override){var o="<"+e+"></"+e+">",r="{this.state."+e+".map((item,i)=>"+("<"+e+" state={item} key={i}></"+e+">")+")}";t=t.replace(o,r)}}),t}(t),o=function(e,t){return t.forEach(function(t){var n='id="'+t.id+'"';e=e.includes(n)?e.replace(n,n+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}"):e.replace("<"+t.id,"<"+t.id+" "+t.name+"={this."+(t.id+t.name)+".bind(this)}")}),e.split("{state.").join("{this.state.")}(n,e.events),r=function(){if(!window.ExportNWB)return'window.saveVariant("'+e.name+'",state)'}();return"(\n        class "+e.name+" extends Component {\n        \n            constructor(props) {\n                super(props);\n                this.state = this.props.state || "+e.state+";\n\n                var dynamicStyle = document.createElement('style');\n                dynamicStyle.type = 'text/css';\n                dynamicStyle.innerHTML = `"+e.style+"`;\n                document.body.appendChild(dynamicStyle)\n            }\n        \n            "+e.events.map(function(e){return e.publishable?"\n                    \n                    "+(e.id+e.name)+" (e) {\n                        var state = JSON.parse(JSON.stringify(this.state))\n                        "+e.reducer+"\n                        debugger;\n                        this.setState(state);\n                        e.state = state;\n                        this.props."+e.publishName+"? this.props."+e.publishName+"(e):null;\n                    }\n                    \n                    ":"\n                    "+(e.id+e.name)+" (e) {\n                        var state = JSON.parse(JSON.stringify(this.state))\n                        "+e.reducer+"\n                        debugger;\n                        "+r+"\n                        this.setState(state);\n                    }\n                "}).join("\n")+"\n        \n            render() {\n                return ("+o+")\n            }\n        })\n        "}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=l(r);n(80);var i=l(n(82)),s=n(3);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"refresh",value:function(){this.setState({component:(0,s.readComponent)(this.state.component.name)})}},{key:"render",value:function(){var e=this.props.component.id*~~(10*Math.random());return a.default.createElement("div",{className:"container preview"},a.default.createElement("div",{className:"title"},"Preview"),a.default.createElement("div",null,a.default.createElement("div",{className:"dynamicComponent"},a.default.createElement(i.default,{key:e,component:this.state.component}))))}}]),t}();t.default=u},function(e,t,n){var o=n(81);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".container{\n    padding: 5px;\n    background: #2C3134;\n}\n\n.dropPoint{\n    border: 1px solid green;\n}\n\n.targetChild{\n    border: 1px solid #3E8CE4;\n}\n\n.preview div:nth-child(2) {\n    height:50vh;\n    width:30vw;\n    overflow:scroll;\n    zoom: .80;\n}\n",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(12);n(83);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={component:n.props.component},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){if(void 0===this.state.component.name)return i.default.createElement("p",null,"No component selected.");var e=(0,s.getNestedComponents)(this.state.component);return e.length>0&&(0,s.saveComponentsToWindow)(e),window[this.state.component.name]?i.default.createElement("div",null,i.default.createElement(window[this.state.component.name])):i.default.createElement("div",null)}}]),t}();t.default=l},function(e,t,n){var o=n(84);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=u(r);n(86);var i=u(n(88)),s=n(91),l=n(94);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={class:"drop_zone",imageURL:"",assets:[],selectedAsset:""},n.writeToDB=l.writeToDB.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"appendToBody",value:function(e){var t=this.result,n=document.createElement("div");n.innerHTML="Loaded : "+e.name+" size "+e.size+" B",document.body.appendChild(n);var o=document.createElement("img");o.file=e,o.src=t,n.appendChild(o)}},{key:"updatedSelected",value:function(e){var t=e.target.getAttribute("data-name");this.setState({selectedAsset:t})}},{key:"render",value:function(){var e=this,t=this.state.assets.map(function(t){return a.default.createElement(i.default,{asset:t,selected:e.state.selectedAsset,onSelected:e.updatedSelected.bind(e)})});return a.default.createElement("ul",{className:"assets"},a.default.createElement("button",{onClick:l.fetchFromDB.bind(this)},"Load Assets"),a.default.createElement("div",{className:this.state.class,onDrop:s.dropHandler.bind(this),onDragOver:s.dragOverHandler.bind(this),onDragLeave:s.dragLeaveHandler.bind(this)},a.default.createElement("p",null,"Drag one or more files to this Drop Zone ...")),a.default.createElement("div",null,this.state.selectedAsset.name),t)}}]),t}();t.default=c},function(e,t,n){var o=n(87);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".drop_zone {\n      border: 1px lightgray dashed;\n      width:  200px;\n      height: 100px;\n  }\n\n  .drag_over {\n    border: 2px lightgray dashed;\n    width:  200px;\n    height: 100px;\n  }\n\n  .assets p{\n    padding:15px;\n  }",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(89);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("p",{"data-name":this.props.asset.name,onClick:this.props.onSelected},this.props.asset.name))}}]),t}();t.default=s},function(e,t,n){var o=n(90);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n.background {\n    background: rgb(64, 64, 64);\n    border-bottom: 1px solid #333333;\n}\n\n.component {\n    display:flex;\n    justify-content: space-between;\n}\n\n.component .componentName{\n    padding:7px;\n}\n\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dropHandler=function(e){var t=this;e.preventDefault(),[].forEach.call(e.dataTransfer.files,function(e){var n=new FileReader;n.readAsDataURL(e),n.onloadend=function(t,n){this.appendToBody(e),this.writeToDB(t.target.result,e.name)}.bind(t)}),this.setState({class:"drop_zone"})},t.dragOverHandler=function(e){console.log("File(s) in drop zone"),this.setState({class:"drag_over"}),e.preventDefault()},t.dragLeaveHandler=function(e){this.setState({class:"drop_zone"})};var o,r=n(92);(o=r)&&o.__esModule},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(93);window.iDB="",window.onload=function(){window.iDB=new o.MindexedDB("uiEditor",{uiEditor:"name"}),window.iDB.connect()},t.default=iDB},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MindexedDB=function(e,t){this.idb=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB,this.db=e,this.objStrs=Array.isArray(t)?t:[t],this.store="uiEditor",this.connect=function(e){var t=this.idb.open(this.db,1);return t.mdb=this,t.onupgradeneeded=function(){var e=t.result;this.mdb.objStrs.forEach(function(t){var n=Object.entries(t);e.createObjectStore(n[0][0],{keyPath:n[0][1]})})},new Promise(function(e,n){t.onsuccess=function(){this.mdb.db=t.result,e(this.mdb.db)},t.onerror=function(){n(t.error)}})},this.cs=function(e){if(void 0===this.db)throw"[Min.dexedDB] DB not open.";return this.db.transaction(e,"readwrite").objectStore(e)},this.put=function(e){var t=this.cs(this.store);return new Promise(function(n,o){var r=t.put(e);r.onsuccess=function(){n(r.result)},r.onerror=function(){o(r.error)}})},this.get=function(e){var t=this.cs(this.store);return new Promise(function(n,o){var r=t.get(e);r.onsuccess=function(){n(r.result)},r.onerror=function(){o(r.error)}})},this.getAll=function(){var e=this.cs(this.store);return new Promise(function(t,n){var o=e.getAll();o.onsuccess=function(){t(o.result)},o.onerror=function(){n(o.error)}})},this.close=function(){this.db.close()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.writeToDB=function(e,t){var n=this;window.iDB.get(t).then(function(e){document.createElement("img").href=e.result,n.setState({imageURL:e.result})}),window.iDB.put({name:t,result:e})},t.fetchFromDB=function(){var e=this;window.iDB.getAll().then(function(t){window.assets={},t.forEach(function(e){window.assets[e.name]=e.result}),e.setState({assets:t})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(96);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={exportType:"SIMPLE"},window.EXPORT_TYPE="SIMPLE",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"onExportTypeChanged",value:function(e){this.setState({exportType:e.target.value}),window.EXPORT_TYPE=e.target.value}},{key:"render",value:function(){return i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"SIMPLE",checked:"SIMPLE"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS - logs output to your console.")),i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"NWB",checked:"NWB"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS - Codebase")),i.default.createElement("li",null,i.default.createElement("label",null,i.default.createElement("input",{type:"radio",name:"Export",value:"STORYBOOK",checked:"STORYBOOK"===this.state.exportType,onChange:this.onExportTypeChanged.bind(this)}),"ReactJS with Storybook - Codebase")))}}]),t}();t.default=s},function(e,t,n){var o=n(97);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n.background {\n    background: rgb(64, 64, 64);\n    border-bottom: 1px solid #333333;\n}\n\n.component {\n    display:flex;\n    justify-content: space-between;\n}\n\n.component .componentName{\n    padding:7px;\n}\n\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o},s=n(3);n(99);var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"refreshToPrevious",value:function(){(0,s.popHistory)()}},{key:"render",value:function(){return i.default.createElement("ul",null,i.default.createElement("button",{onClick:this.refreshToPrevious.bind(this)},"Go back"))}}]),t}();t.default=l},function(e,t,n){var o=n(100);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".selected, .green {\n    border: 1px solid green;\n    background: rgb(43, 43, 43);\n}\n\n.background {\n    background: rgb(64, 64, 64);\n    border-bottom: 1px solid #333333;\n}\n\n.component {\n    display:flex;\n    justify-content: space-between;\n}\n\n.component .componentName{\n    padding:7px;\n}\n\n.selectedAsset{\n    border: 1px lightgray dashed;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(102);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"center"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(103);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".center{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -moz-transform: translateX(-50%) translateY(-50%);\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(105);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"Bottom"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(106);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".bottom{\n    position: absolute;\n    bottom:0px;\n    width: 100vw;\n    animation: slide-up 0.4s ease;\n}\n\n@keyframes slide-up {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(108);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"left"},this.props.children)}}]),t}();t.default=s},function(e,t,n){var o=n(109);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".Left{\n    position: absolute;\n    left:0px;\n    animation: slide-to-screen 0.7s ease;\n}\n\n@keyframes slide-to-screen {\n    0% {\n        left:-300px;\n    }\n    100% {\n        left: 0px;\n    }\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),i=(o=a)&&o.__esModule?o:{default:o};n(111);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={selected:"Events"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"updateSelectedTab",value:function(e){this.setState({selected:e.target.innerText})}},{key:"render",value:function(){var e=this;return i.default.createElement("div",{className:"right container"},this.props.children.map(function(t){return i.default.createElement("div",{className:t.props.title===e.state.selected?"tabs title":"tabs",onClick:e.updateSelectedTab.bind(e)},t.props.title)}),i.default.createElement("div",{className:"tab-content"},this.props.children.filter(function(t){return t.props.title===e.state.selected})))}}]),t}();t.default=s},function(e,t,n){var o=n(112);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(2)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".Right{\n    position: absolute;\n    right:0px;\n    animation: slide-right 0.2s ease;\n    height: 100%;\n    overflow: scroll;\n    width:400px;\n}\n\n@keyframes slide-right {\n    0% {\n        opacity: 0;\n        right:-100px;\n    }\n    100% {\n        opacity: 1;\n        right: 0px;\n    }\n}\n\n.tab-content{\n    height:100%;\n    border: 1px #404040 solid;\n}\n\n.tab-content ul {\n    padding: 12px;\n}\n\n.tabs {\n    display: inline-block;\n    cursor: default;\n    \n    margin-top: 15px;\n    margin-bottom: 11px;\n    color: rgba(255,255,255,0.5);\n    padding: 5px;\n    font-size: 12px;\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateEvent=function(e){var t=this,n=Object.assign({},this.state).components;n.find(function(e){return e.name===t.state.selectedComponent.name}).events=e,this.setState({elements:n}),(0,o.writeData)("ui-editor",n)},t.updateConfig=function(e){var t=Object.assign({},this.state).components,n=t.find(function(t){return t.name===e.parentName}),r=t.find(function(t){return t.name===e.childName});n.state=JSON.parse(n.state),void 0===n.config?n.config={}:n.config=JSON.parse(n.config);n.config[r.name]=e.config,n.config[r.name].override?n.state[r.name]=[JSON.parse(r.state)]:delete n.state[r.name];n.state=JSON.stringify(n.state),n.config=JSON.stringify(n.config),this.setState({elements:t}),(0,o.writeData)("ui-editor",t)},t.saveElement=function(e){var t=this,n=Array.from(this.state.components),r=void 0,a=n.find(function(t){return t.name===e.name}),i=n.find(function(e){return e.name===t.state.selectedComponent.name}),s=n.findIndex(function(e){return e.name===t.state.selectedComponent.name});if(a){var l=i;l=Object.assign(l,e),n[s]=l}else r={name:e.name,markup:e.markup,events:[],state:e.state||"{}",style:e.style,children:[],id:Math.ceil(1e3*Math.random()),config:"{}"},n.push(r),s=n.length-1;this.setState({elements:n,element:{name:e.name,markup:e.markup,style:e.style,state:e.state,events:e.events||[]},showEditor:!1}),(0,o.writeData)("ui-editor",n)},t.updateSelectedComponent=function(e){var t=e.currentTarget.innerText.split("\n")[0],n=this.state.components.find(function(e){return e.name===t});window.selectedcomponentname=n.name,this.setState({selectedComponent:n})};var o=n(3)},function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),a=w(r),i=w(n(14));n(18);var s=w(n(21)),l=w(n(52)),u=w(n(56)),c=w(n(79)),d=w(n(85)),f=w(n(95)),p=w(n(98)),m=w(n(101)),h=w(n(104)),v=w(n(107)),b=w(n(110)),y=n(113),g=n(3);function w(e){return e&&e.__esModule?e:{default:e}}var _=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=(0,g.readData)("ui-editor");return n.state={components:o,selectedTag:"",component:{name:"",markup:"",style:"",state:"{ }",events:[]},selectedComponent:"",folders:(0,g.readData)("folders"),showEditor:!1},n.updateConfig=y.updateConfig.bind(n),n.updateEvent=y.updateEvent.bind(n),n.saveElement=y.saveElement.bind(n),n.updateSelectedComponent=y.updateSelectedComponent.bind(n),document.onkeydown=function(e){e.altKey&&69==e.keyCode&&this.setState({showEditor:!this.state.showEditor})}.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"updatePreview",value:function(e){this.setState({previewComponent:e})}},{key:"updateFolders",value:function(e){this.setState({folders:e}),(0,g.writeData)("folders",e)}},{key:"openEditor",value:function(){this.setState({showEditor:!0})}},{key:"render",value:function(){var e=this,t=this.state.selectedComponent||this.state.component;return a.default.createElement("div",null,a.default.createElement(v.default,null,a.default.createElement(s.default,{key:Math.ceil(1e3*Math.random()),components:this.state.components,folders:this.state.folders,selectedComponent:this.state.selectedComponent,title:"Components",onOpenEditor:this.openEditor.bind(this),onSelection:this.updateSelectedComponent,onFoldersUpdate:this.updateFolders.bind(this)})),a.default.createElement(m.default,null,a.default.createElement(c.default,{key:Math.ceil(1e3*Math.random()),component:t,title:"Preview"})),this.state.selectedComponent?a.default.createElement(b.default,null,a.default.createElement(u.default,{key:Math.ceil(1e3*Math.random()),component:t,selectedTag:this.state.selectedTag,components:this.state.components,onEventsUpdate:this.updateEvent,onConfigUpdate:this.updateConfig,title:"Events"}),a.default.createElement(p.default,{title:"History"}),a.default.createElement(d.default,{title:"Assets"}),a.default.createElement(f.default,{title:"Export"})):null,this.state.showEditor?a.default.createElement(h.default,null,a.default.createElement(l.default,{key:Math.ceil(1e3*Math.random()),element:t,name:t.name,markup:t.markup,style:t.style,state:t.state,title:"Editor",onSave:this.saveElement})):this.state.selectedComponent?a.default.createElement(h.default,null,a.default.createElement(m.default,null,a.default.createElement("button",{class:"showEditor",onClick:function(){return e.setState({showEditor:!0})}},"Open Editor"))):null)}}]),t}();i.default.render(a.default.createElement(_,null),document.getElementById("index"))}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1N0b3JhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db2RlR2VuZXJhdG9yL1JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvU3RvcmFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL1J1bnRpbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9MaWJyYXJpZXMvZG93bmxvYWRGaWxlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlc0NvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1J1bnRpbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0luZGV4L2luZGV4LmNzcz9kMGQ3Iiwid2VicGFjazovLy8uL3NyYy9JbmRleC9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvU3R5bGUuY3NzPzM2ZGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL1N0eWxlLmNzcz84NDY1Iiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9wcm9jZXNzRm9sZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL0ZvbGRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9Gb2xkZXIvU3R5bGUuY3NzP2E5YmUiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvRm9sZGVyL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvRm9sZGVycy9OZXdGb2xkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvTmV3Rm9sZGVyL1N0eWxlLmNzcz9lM2JmIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Gb2xkZXJzL05ld0ZvbGRlci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvRm9sZGVyL1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnMvRm9sZGVyL0V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0NvbXBvbmVudHQvRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvRXhwb3J0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvRXhwb3J0L0V4cG9ydFN0b3J5Ym9vay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvZGVHZW5lcmF0b3IvUmVhY3RTdG9yaWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvY3JlYXRlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL1N0b3JhZ2UvbG9jYWxTdG9yYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvU3RvcmFnZS9sb2NhbFN0b3JhZ2UvU2FtcGxlLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvTGlicmFyaWVzL3ppcEZpbGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvRXhwb3J0L0V4cG9ydE5XQi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0V4cG9ydC9FeHBvcnRTaW1wbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50dC9TdHlsZS5jc3M/OGYwNyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db21wb25lbnR0L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9TdG9yYWdlL2xvY2FsU3RvcmFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL1N0b3JhZ2UvbG9jYWxTdG9yYWdlL1NhbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRWRpdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9FZGl0b3IvU3R5bGUuY3NzPzFiZmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0VkaXRvci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9TdHlsZS5jc3M/ZWUyOCIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0NvbmZpZ3VyYXRvci9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9Db21wb25lbnRzL05vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9FdmVudHMvRXZlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9FdmVudC9TdHlsZS5jc3M/YmE5NCIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L01lc3NhZ2VzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlc0NvbXBvbmVudC9zdHlsZS5jc3M/MWQ0MSIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL0NvbXBvbmVudHMvTWVzc2FnZXNDb21wb25lbnQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlQ29tcG9uZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlQ29tcG9uZW50L3N0eWxlLmNzcz83Yzg5Iiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlQ29tcG9uZW50L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL0V2ZW50L1JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9FdmVudC9FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50cy9NZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnRzL1N0eWxlLmNzcz83OTcxIiwid2VicGFjazovLy8uL3NyYy9FdmVudHMvU3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9FdmVudHMvUmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbGl0aWVzL2dldC1ub2RlLXRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdGllcy9jcmVhdGUtY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsaXRpZXMvQ29kZUdlbmVyYXRvci9SZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUHJldmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUHJldmlldy9zdHlsZS5jc3M/NmQ0OCIsIndlYnBhY2s6Ly8vLi9zcmMvUHJldmlldy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ByZXZpZXcvRHluYW1pY0NvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUHJldmlldy9EeW5hbWljQ29tcG9uZW50L3N0eWxlLmNzcz81MjVlIiwid2VicGFjazovLy8uL3NyYy9QcmV2aWV3L0R5bmFtaWNDb21wb25lbnQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9TdHlsZS5jc3M/OWVhYSIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL0Fzc2V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMvQXNzZXQvU3R5bGUuY3NzPzU4ZTYiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9Bc3NldC9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy9SZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvTGlicmFyaWVzL2luZGV4ZWREQi9pbmRleGVEQi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0xpYnJhcmllcy9pbmRleGVkREIvTWluZGV4ZWREQi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXNzZXRzL2RiLmpzIiwid2VicGFjazovLy8uL3NyYy9FeHBvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V4cG9ydC9TdHlsZS5jc3M/OGJmNSIsIndlYnBhY2s6Ly8vLi9zcmMvRXhwb3J0L1N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvSGlzdG9yeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSGlzdG9yeS9TdHlsZS5jc3M/YTc0YSIsIndlYnBhY2s6Ly8vLi9zcmMvSGlzdG9yeS9TdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0NlbnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvQ2VudGVyL3N0eWxlLmNzcz9iNGU3Iiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9DZW50ZXIvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9Cb3R0b20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL0JvdHRvbS9zdHlsZS5jc3M/YzI4ZCIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvQm90dG9tL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvTGVmdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvTGVmdC9zdHlsZS5jc3M/YTcxNyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvTGVmdC9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWxpdGllcy9Db21wb25lbnRzL1JpZ2h0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlsaXRpZXMvQ29tcG9uZW50cy9SaWdodC9zdHlsZS5jc3M/OGUzMyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbGl0aWVzL0NvbXBvbmVudHMvUmlnaHQvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9JbmRleC9SZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfbG9jYWxTdG9yYWdlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkRGF0YSIsIndyaXRlRGF0YSIsInJlYWRDb21wb25lbnQiLCJ3cml0ZUNvbXBvbmVudCIsInBvcEhpc3RvcnkiLCJjb252ZXJ0VG9SZWFjdCIsImNvbXBvbmVudCIsImV2ZW50cyIsImZvckVhY2giLCJldmVudCIsImlkIiwicmVwbGFjZSIsInByb3BzSW5NYXJrdXAiLCJhZGRQcm9wcyIsInN0YXRlT3ZlcmlkZU1hcmt1cCIsIm1hcmt1cCIsImNvbmZpZyIsIkpTT04iLCJwYXJzZSIsIk9iamVjdCIsImtleXMiLCJjaGlsZE5hbWUiLCJvdmVycmlkZSIsImNoaWxkTWFya3VwIiwicmVuZGVyTGlzdE1hcmt1cCIsImNoaWxkTWFya3VwV2l0aFByb3BzIiwiZ2V0U3RhdGVkTWFya3VwIiwiY29tcG9uZW50RXZlbnRlZE1hcmt1cCIsImluY2x1ZGVzIiwibmFtZSIsInNwbGl0Iiwiam9pbiIsImdldENvbXBvbmVudEV2ZW50ZWRNYXJrdXAiLCJzYXZlVmFyaWFudCIsIndpbmRvdyIsIkV4cG9ydE5XQiIsImdldFNhdmVWYXJpYW50IiwiUmVhY3RDb21wb25lbnQiLCJzdGF0ZSIsInN0eWxlIiwibWFwIiwicHVibGlzaGFibGUiLCJyZWR1Y2VyIiwicHVibGlzaE5hbWUiLCJzYXZlQ29tcG9uZW50c1RvV2luZG93IiwibmVzdGVkQ29tcG9uZW50cyIsImFzc2V0IiwicG9wIiwiYXNzZXRzIiwidG9EZWxldGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwicmVtb3ZlIiwiZHluYW1pY1N0eWxlIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInR5cGUiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVTdHlsZXNoZWV0IiwiX2NyZWF0ZUNvbXBvbmVudCIsImNyZWF0ZUNvbXBvbmVudCIsInNhdmVUb1dpbmRvdyIsImdldE5lc3RlZENvbXBvbmVudHMiLCJwYXJlbnQiLCJjb21wb25lbnRzIiwiX1N0b3JhZ2UiLCJmaWx0ZXIiLCJsZW5ndGgiLCJjaGlsZHJlbiIsImdyYW5kS2lkcyIsImZsYXQiLCJwdXNoIiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJjb21wb25lbnROYW1lIiwiZmluZCIsInZhcmlhbnRzIiwiY29uY2F0IiwiU2V0Iiwic3RyaW5naWZ5IiwiZG93bmxvYWQiLCJibG9iIiwiZGxpbmsiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwib25jbGljayIsImUiLCJ0aGF0IiwidGhpcyIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJjbGljayIsImRvd25sb2FkRmlsZSIsImNvbnRlbnRzIiwibWltZV90eXBlIiwiQmxvYiIsIl9yZWFjdCIsIk1lc3NhZ2VzQ29tcG9uZW50IiwicHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiY2FsbCIsIkNvbXBvbmVudCIsIm1lc3NhZ2VzIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJtZXNzYWdlIiwiaW5kZXgiLCJfTWVzc2FnZUNvbXBvbmVudDIiLCJrZXkiLCJjb250ZW50IiwiaSIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwidW5kZWZpbmVkIiwibG9jYWxzIiwiX0V2ZW50cyIsIkNvbXBvbmVudHMiLCJfdGhpcyIsImZvbGRlcnMiLCJzaG93Q29udHJvbHMiLCJBcnJheSIsImZyb20iLCJ1bnNoaWZ0Iiwic3RhdHVzIiwic2V0U3RhdGUiLCJvbk9wZW5FZGl0b3IiLCJjbGFzc2VzIiwiY2xhc3NOYW1lIiwib25Nb3VzZUVudGVyIiwiYmluZCIsIm9uTW91c2VMZWF2ZSIsImhpZGVDb250cm9scyIsIm9uQ2xpY2siLCJhZGRDb21wb25lbnQiLCJzZWxlY3RlZENvbXBvbmVudCIsImFkZEZvbGRlciIsIl9Gb2xkZXJzMiIsIk1hdGgiLCJjZWlsIiwicmFuZG9tIiwib25Gb2xkZXJzVXBkYXRlIiwib25TZWxlY3Rpb24iLCJvbkRlbGV0ZUNvbXBvbmVudCIsIm9uRGVsZXRlRm9sZGVyIiwiX3Byb2Nlc3NGb2xkZXIiLCJGb2xkZXJzIiwiZm9sZGVyTmFtZSIsImZvbGRlciIsIl90eXBlb2YiLCJmaW5kRm9sZGVyIiwidHJhdmVyc2VGb2xkZXIiLCJjdXJyZW50Rm9sZGVyIiwiaW5kZXhlcyIsImZpbmRJbmRleCIsImNoZWNrQW5kUmVtb3ZlIiwiZm9vbGVkIiwiZGF0YSIsImVtcHR5Rm9sZGVySW5kZXgiLCJzcGxpY2UiLCJjb25zb2xlIiwibG9nIiwicmVtb3ZlQ29udGVudCIsImZvbGRlclN0cnVjdHVyZSIsImNoZWNrRm9sZGVyIiwib25Gb2xkZXJVcGRhdGUiLCJpbml0aWFsaXNlUHJvcHMiLCJwcm9jZXNzRm9sZGVyIiwiUmVhY3QiLCJfRm9sZGVyMiIsInByb2Nlc3NDb250ZW50IiwiX0NvbXBvbmVudHQyIiwib25TZWxlY3Rpb25DaGFuZ2UiLCJfUmVkdWNlciIsIkZvbGRlciIsImljb25TdGF0dXMiLCJmb2xkZXJDbGFzcyIsIl9OZXdGb2xkZXIyIiwib25OZXdGb2xkZXIiLCJuZXdGb2xkZXIiLCJkYXRhLWZvbGRlci1uYW1lIiwiZHJhZ2dhYmxlIiwib25Ecm9wIiwiZHJvcEhhbmRsZXIiLCJvbkRyYWdPdmVyIiwiZHJhZ092ZXJIYW5kbGVyIiwib25EcmFnTGVhdmUiLCJkcmFnTGVhdmVIYW5kbGVyIiwib25EcmFnU3RhcnQiLCJmb2xkZXJTdGFydERyYWciLCJ0b2dnbGVGb2xkZXIiLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5IiwidmFsdWUiLCJkZWxldGVGb2xkZXIiLCJOZXdGb2xkZXIiLCJuZXdGb2xkZXJDbGFzcyIsImN1cnJlbnRUYXJnZXQiLCJhdXRvRm9jdXMiLCJvbkNoYW5nZSIsImZvbGRlck5hbWVDaGFuZ2VkIiwib25LZXlQcmVzcyIsInNhdmVGb2xkZXJOYW1lT25FbnRlciIsImV2IiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiZ2V0QXR0cmlidXRlIiwic3RvcFByb3BhZ2F0aW9uIiwidGFyZ2V0Iiwic2V0RGF0YSIsIl9FeHBvcnQiLCJDb21wb25lbnR0IiwiY2xhc3NMaXN0IiwiZGF0YS1uYW1lIiwiYWRkQ29tcG9uZW50RGV0YWlscyIsIm9uRHJhZ0VuZCIsInJlc3RvcmVDbGFzcyIsInNlbGVjdGlvbkNoYW5nZWQiLCJvbkV4cG9ydCIsImFkZCIsImV2ZW50Q2FsbGJhY2tzIiwiRVhQT1JUX1RZUEUiLCJfRXhwb3J0U2ltcGxlIiwiZXhwb3J0U2ltcGxlIiwiX0V4cG9ydE5XQiIsImV4cG9ydE5XQiIsIl9FeHBvcnRTdG9yeWJvb2siLCJleHBvcnRTdG9yeWJvb2siLCJfUnVudGltZSIsInVuaXF1ZUNvbXBvbmVudHMiLCJjb20iLCJlbGVtZW50IiwiY29tcG9uZW50U3RyaW5ncyIsIlJlYWN0Q2xhc3NDb21wb25lbnRTdHJpbmciLCJoZWFkZXJJbXBvcnRzIiwicmV2ZXJzZSIsIlJlYWN0U3Rvcmllc1N0cmluZyIsIl9SZWFjdFN0b3JpZXMiLCJjb252ZXJ0VG9SZWFjdFN0b3JpZXMiLCJfemlwRmlsZXMiLCJ6aXBGaWxlcyIsIl9SZWFjdCIsIlJlYWN0U3RvcmllcyIsInZhcmlhbnQiLCJjb21wb25lbnRTdHJpbmciLCJldmFsIiwiQmFiZWwiLCJwcmVzZXRzIiwicGx1Z2lucyIsImNvZGUiLCJpc0FycmF5IiwiY29tcCIsImVkaXRvckhpc3RvcnkiLCJsYXN0SXRlbSIsIl9TYW1wbGUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2FtcGxlIiwiaGlzdG9yeSIsIl9ub0ZvbGRlciRjb250ZW50cyIsImNvbXBvbmVudE5hbWVzIiwiY29tcG9uZW50V2l0aG91dFBhcmVudEZvbGRlciIsImV2ZXJ5Iiwibm9QdXNoIiwic2V0SXRlbSIsInB1c2hIaXN0b3J5IiwiYXJyYXkiLCJ6aXAiLCJKU1ppcCIsInNyYyIsImZpbGUiLCJnZW5lcmF0ZUFzeW5jIiwidGhlbiIsIl9kb3dubG9hZEZpbGUiLCJyZXN1bHQiLCJwYXJlbnRFbGVtZW50IiwiaW5uZXJUZXh0IiwiVFlQRSIsImZvbGRlclRvRGVsZXRlIiwibm9Gb2xkZXIiLCJfcmVhY3RDb2RlbWlycm9yIiwiRWRpdG9yIiwib25TYXZlIiwiX3RoaXMyIiwic2F2ZUVsZW1lbnQiLCJVbkNvbnRyb2xsZWQiLCJhdXRvQ3Vyc29yIiwibGluZU51bWJlcnMiLCJtb2RlIiwidGhlbWUiLCJpbmRlbnRXaXRoVGFicyIsInNtYXJ0SW5kZW50IiwibGluZVdyYXBwaW5nIiwiZWRpdG9yIiwiX2dldE5vZGVUcmVlIiwiRXZlbnRzIiwiYXNzaWduIiwic2VsZWN0ZWRUYWciLCJub2RlVHJlZSIsImdldE5vZGVUcmVlIiwiZXJyb3IiLCJfTWVzc2FnZXMyIiwiZXZlbnRzT2ZTZWxlY3RlZFRhZyIsImNvbmZpZ3VyYXRvciIsImV2ZW50TmFtZXMiLCJjaGlsZENvbXBvbmVudE5hbWUiLCJjaGlsZENvbXBvbmVudCIsInB1Ymxpc2hhYmxlRXZlbnQiLCJldmVudE5hbWUiLCJfRXZlbnQyIiwic2VsZWN0ZWRUYWdJRCIsInVwZGF0ZUV2ZW50IiwiZGVsZXRlRXZlbnQiLCJfQ29uZmlndXJhdG9yMiIsInVwZGF0ZUNvbmZpZ3VyYXRpb24iLCJfTm9kZXMyIiwibm9kZSIsIm9uU2VsZWN0ZWRUYWdDaGFuZ2VkIiwic2VsZWN0ZWRUYWdDaGFuZ2VkIiwiQ29uZmlndXJhdG9yIiwicGFyZW50TmFtZSIsInRvZ2dlbE92ZXJyaWRlIiwiY2hlY2tlZCIsIk5vZGVzIiwiY2hpbGQiLCJFdmVudCIsInVwZGF0ZVB1Ymxpc2hOYW1lIiwiY2xhc3MiLCJsaXN0IiwidXBkYXRlRXZlbnROYW1lIiwidGl0bGUiLCJ1cGRhdGVFdmVudFR5cGUiLCJwdWJsaXNoRXZlbnQiLCJfTWVzc2FnZXNDb21wb25lbnQiLCJfTWVzc2FnZXNDb21wb25lbnQyIiwidGV4dCIsIk1lc3NhZ2VDb21wb25lbnQiLCJvbkV2ZW50c1VwZGF0ZSIsIm9uQ29uZmlnVXBkYXRlIiwianN4IiwiX2RlZmluZVByb3BlcnR5IiwiUHJldmlldyIsInJhbmRvbUtleSIsIl9EeW5hbWljQ29tcG9uZW50MiIsIkR5bmFtaWNDb21wb25lbnQiLCJfZGIiLCJBc3NldHMiLCJpbWFnZVVSTCIsInNlbGVjdGVkQXNzZXQiLCJ3cml0ZVRvREIiLCJiaW4iLCJuZXdGaWxlIiwic2l6ZSIsImltZyIsImFzc2V0TmFtZSIsIl9Bc3NldDIiLCJzZWxlY3RlZCIsIm9uU2VsZWN0ZWQiLCJ1cGRhdGVkU2VsZWN0ZWQiLCJmZXRjaEZyb21EQiIsIkFzc2V0IiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsIm9ubG9hZGVuZCIsImIiLCJhcHBlbmRUb0JvZHkiLCJfaW5kZXhlREIiLCJfTWluZGV4ZWREQiIsImlEQiIsIm9ubG9hZCIsIk1pbmRleGVkREIiLCJ1aUVkaXRvciIsImNvbm5lY3QiLCJkYXRhYmFzZU5hbWUiLCJvYmplY3RTdG9yZXMiLCJpZGIiLCJpbmRleGVkREIiLCJtb3pJbmRleGVkREIiLCJ3ZWJraXRJbmRleGVkREIiLCJtc0luZGV4ZWREQiIsInNoaW1JbmRleGVkREIiLCJkYiIsIm9ialN0cnMiLCJzdG9yZSIsImNvbm4iLCJvcGVuIiwibWRiIiwib251cGdyYWRlbmVlZGVkIiwiZGJsIiwiZW50cmllcyIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25zdWNjZXNzIiwib25lcnJvciIsImNzIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsInB1dCIsIm9iaiIsIm9zIiwicmVzcG9uc2UiLCJnZXQiLCJnZXRBbGwiLCJjbG9zZSIsImltYWdlIiwiRXhwb3J0IiwiZXhwb3J0VHlwZSIsIm9uRXhwb3J0VHlwZUNoYW5nZWQiLCJIaXN0b3J5IiwicmVmcmVzaFRvUHJldmlvdXMiLCJDZW50ZXIiLCJCb3R0b20iLCJMZWZ0IiwiUmlnaHQiLCJ1cGRhdGVTZWxlY3RlZFRhYiIsIm5ld0VsZW1lbnRzIiwiZWxlbWVudHMiLCJ1cGRhdGVDb25maWciLCJuZXdFbGVtZW50IiwiZWxlbWVudEV4aXN0Iiwic2VsZWN0ZWRJbmRleCIsImVsZW1lbnRVbmRlckVkaXQiLCJzaG93RWRpdG9yIiwidXBkYXRlU2VsZWN0ZWRDb21wb25lbnQiLCJzZWxlY3RlZGNvbXBvbmVudG5hbWUiLCJJbmRleCIsIm9ua2V5ZG93biIsImFsdEtleSIsImtleUNvZGUiLCJwcmV2aWV3Q29tcG9uZW50IiwiX0xlZnQyIiwiX0NvbXBvbmVudHMyIiwib3BlbkVkaXRvciIsInVwZGF0ZUZvbGRlcnMiLCJfQ2VudGVyMiIsIl9QcmV2aWV3MiIsIl9SaWdodDIiLCJfRXZlbnRzMiIsIl9IaXN0b3J5MiIsIl9Bc3NldHMyIiwiX0V4cG9ydDIiLCJfQm90dG9tMiIsIl9FZGl0b3IyIiwiUmVhY3RET00iLCJyZW5kZXIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6InlGQUFBLElBQUFBLEVBQUFDLEVBQUEsSUFFQUMsRUFBT0MsUUFBVSxDQUNiQyxTQUFVQSxXQUNWQyxVQUFXQSxZQUNYQyxjQUFlQSxnQkFDZkMsZUFBZ0JBLGlCQUNoQkMsV0FBWUEsZSxnRkNOQUMsZUFBVCxTQUF5QkMsR0FJNUJBLEVBQVVDLE9BQU9DLFFBQVEsU0FBQUMsR0FDckJBLEVBQU1DLEdBQUtELEVBQU1DLEdBQUdDLFFBQVEsSUFBSSxNQUdwQyxJQWdESUMsRUFoRFUsU0FBQ04sR0FDWCxPQUFPQSxFQUFBLE9BQWtCSyxRQUFRLElBQTFCLDBDQStDU0UsQ0FBU1AsR0FDekJRLEVBM0JrQixTQUFDQyxHQUduQixJQUFJQyxFQUFTQyxLQUFLQyxNQUFNWixFQUFVVSxRQWFsQyxPQVpxQkcsT0FBT0MsS0FBS0osR0FDbEJSLFFBQVEsU0FBQWEsR0FHbkIsR0FBR0wsRUFBT0ssR0FBV0MsU0FBVSxDQUMzQixJQUFJQyxFQUFjQSxJQUFJRixFQUFsQixNQUFpQ0EsRUFBakMsSUFHQUcsRUFBbUJBLGVBQWVILEVBQWxDLG1CQUR1QkksSUFBSUosRUFBM0IsMkJBQStEQSxFQUEvRCxLQUNBLEtBQ0pOLEVBQVVBLEVBQU9KLFFBQVFZLEVBQWFDLE1BR3ZDVCxFQVdjVyxDQUFnQmQsR0FDckNlLEVBOUM0QixTQUFDWixFQUFRUixHQWNyQyxPQWJBQSxFQUFPQyxRQUFRLFNBQUFDLEdBQ1gsSUFBSUMsRUFBS0EsT0FBT0QsRUFBTUMsR0FBbEIsSUFHQUssRUFEREEsRUFB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b25lbnQsIHJlYWRDb21wb25lbnQsIHBvcEhpc3RvcnkgfSBmcm9tIFwiLi9sb2NhbFN0b3JhZ2VcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVhZERhdGE6IHJlYWREYXRhLFxuICAgIHdyaXRlRGF0YTogd3JpdGVEYXRhLFxuICAgIHJlYWRDb21wb25lbnQ6IHJlYWRDb21wb25lbnQsXG4gICAgd3JpdGVDb21wb25lbnQ6IHdyaXRlQ29tcG9uZW50LFxuICAgIHBvcEhpc3Rvcnk6IHBvcEhpc3Rvcnlcbn0iLCIvLyBFbGVtZW50cyB0byAgcmVhY3QgY29tcG9uZW50LlxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1JlYWN0IChjb21wb25lbnQpe1xuXG4gICAgbGV0IG1hcmt1cCA9IFwibWFya3VwXCI7XG5cbiAgICBjb21wb25lbnQuZXZlbnRzLmZvckVhY2goZXZlbnQ9PntcbiAgICAgICAgZXZlbnQuaWQgPSBldmVudC5pZC5yZXBsYWNlKFwiLVwiLFwiXCIpO1xuICAgIH0pXG5cbiAgICBsZXQgYWRkUHJvcHM9IChjb21wb25lbnQpPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnRbbWFya3VwXS5yZXBsYWNlKFwiPlwiLGAgey4uLnRoaXMucHJvcHN9Pnt0aGlzLnByb3BzLmNoaWxkcmVufWApXG4gICAgfVxuXG4gICAgbGV0IGdldENvbXBvbmVudEV2ZW50ZWRNYXJrdXAgPSAobWFya3VwLCBldmVudHMpPT57XG4gICAgICAgIGV2ZW50cy5mb3JFYWNoKGV2ZW50PT57XG4gICAgICAgICAgICBsZXQgaWQgPSBgaWQ9XCIke2V2ZW50LmlkfVwiYDtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG1hcmt1cCBjb250YWlucyB0aGUgaWQuXG4gICAgICAgICAgICBpZihtYXJrdXAuaW5jbHVkZXMoaWQpKXtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSBtYXJrdXAucmVwbGFjZShpZCwgYCR7aWR9ICR7ZXZlbnQubmFtZX09e3RoaXMuJHtldmVudC5pZCtldmVudC5uYW1lfS5iaW5kKHRoaXMpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaXRzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSBtYXJrdXAucmVwbGFjZShgPCR7ZXZlbnQuaWR9YCxgPCR7ZXZlbnQuaWR9ICR7ZXZlbnQubmFtZX09e3RoaXMuJHtldmVudC5pZCtldmVudC5uYW1lfS5iaW5kKHRoaXMpfWApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICByZXR1cm4gbWFya3VwLnNwbGl0KFwie3N0YXRlLlwiKS5qb2luKFwie3RoaXMuc3RhdGUuXCIpXG4gICAgfVxuXG4gICAgLy8gY2hlY2tzIGlmIHN0YXRlIG92ZXJyaWRlIGlzIG9uLiB0aGVuIGFkZHMgc3RhdGUgcHJvcCB0byBjaGlsZCBcbiAgICBsZXQgZ2V0U3RhdGVkTWFya3VwID0gKG1hcmt1cCk9PntcbiAgICAgICAgLy8gZm9yIGFsbCB0aGUgY29uZmlnLlxuICAgICAgICAvLyBmaWx0ZXIgY2hpbGQgd2l0aCBvdmVyaWRlIHN0YXRlIGlzIHRydWVcbiAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoY29tcG9uZW50LmNvbmZpZyk7XG4gICAgICAgIGxldCBjaGlsZHJlbkNvbmZpZyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7XG4gICAgICAgIGNoaWxkcmVuQ29uZmlnLmZvckVhY2goY2hpbGROYW1lPT57XG5cbiAgICAgICAgICAgIC8vIFBSRUNBVVRJT046IEVkaXQgbWFya3VwIGZvciByZW5kZXJpbmcgbGlzdC4gU2hvdWxkIG5vdCB1c2Ugb3RoZXIgY29uZmlndXJhdGlvbiB3aGlsZSB1c2luZyB0aGlzLlxuICAgICAgICAgICAgaWYoY29uZmlnW2NoaWxkTmFtZV0ub3ZlcnJpZGUgKXtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRNYXJrdXAgPSBgPCR7Y2hpbGROYW1lfT48LyR7Y2hpbGROYW1lfT5gO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkTWFya3VwV2l0aFByb3BzID0gYDwke2NoaWxkTmFtZX0gc3RhdGU9e2l0ZW19IGtleT17aX0+PC8ke2NoaWxkTmFtZX0+YDtcbiAgICAgICAgICAgICAgICBsZXQgcmVuZGVyTGlzdE1hcmt1cCA9IGB7dGhpcy5zdGF0ZS4ke2NoaWxkTmFtZX0ubWFwKChpdGVtLGkpPT4ke2NoaWxkTWFya3VwV2l0aFByb3BzfSl9YDtcbiAgICAgICAgICAgICAgICBtYXJrdXAgPSAgbWFya3VwLnJlcGxhY2UoY2hpbGRNYXJrdXAsIHJlbmRlckxpc3RNYXJrdXApOyAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gbWFya3VwO1xuICAgIH1cblxuICAgIC8vIGtlZXAgc2F2aW5nIHZhcmlhbnQgaW4gYnJvd3NlciwgYnV0IG5vdCBmb3IgY29kZSBleHBvcnRzLlxuICAgIGxldCBnZXRTYXZlVmFyaWFudCA9ICgpPT57XG4gICAgICAgIGlmKCF3aW5kb3cuRXhwb3J0TldCKXtcbiAgICAgICAgICAgIHJldHVybiBgd2luZG93LnNhdmVWYXJpYW50KFwiJHtjb21wb25lbnQubmFtZX1cIixzdGF0ZSlgXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgbGV0IHByb3BzSW5NYXJrdXAgPSBhZGRQcm9wcyhjb21wb25lbnQpO1xuICAgIGxldCBzdGF0ZU92ZXJpZGVNYXJrdXAgPSBnZXRTdGF0ZWRNYXJrdXAocHJvcHNJbk1hcmt1cCk7XG4gICAgbGV0IGNvbXBvbmVudEV2ZW50ZWRNYXJrdXAgPSBnZXRDb21wb25lbnRFdmVudGVkTWFya3VwKHN0YXRlT3ZlcmlkZU1hcmt1cCwgY29tcG9uZW50LmV2ZW50cyk7XG4gICAgbGV0IHNhdmVWYXJpYW50ID0gZ2V0U2F2ZVZhcmlhbnQoKTtcbiAgICBcbiAgICBsZXQgUmVhY3RDb21wb25lbnQgPSBcbiAgICBgKFxuICAgICAgICBjbGFzcyAke2NvbXBvbmVudC5uYW1lfSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvcHMuc3RhdGUgfHwgJHtjb21wb25lbnQuc3RhdGV9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGR5bmFtaWNTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgZHluYW1pY1N0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgICAgICAgIGR5bmFtaWNTdHlsZS5pbm5lckhUTUwgPSBcXGAke2NvbXBvbmVudC5zdHlsZX1cXGA7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkeW5hbWljU3R5bGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgJHtjb21wb25lbnQuZXZlbnRzLm1hcChldmVudD0+e1xuICAgICAgICAgICAgICAgIGlmKGV2ZW50LnB1Ymxpc2hhYmxlKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICR7ZXZlbnQuaWQrZXZlbnQubmFtZX0gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAke2V2ZW50LnJlZHVjZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy4ke2V2ZW50LnB1Ymxpc2hOYW1lfT8gdGhpcy5wcm9wcy4ke2V2ZW50LnB1Ymxpc2hOYW1lfShlKTpudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICAgICAgICAke2V2ZW50LmlkK2V2ZW50Lm5hbWV9IChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgJHtldmVudC5yZWR1Y2VyfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAke3NhdmVWYXJpYW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9KS5qb2luKFwiXFxuXCIpfVxuICAgICAgICBcbiAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCR7Y29tcG9uZW50RXZlbnRlZE1hcmt1cH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGBcbiAgICByZXR1cm4gUmVhY3RDb21wb25lbnQ7XG59XG4iLCJpbXBvcnQge3JlYWREYXRhLCB3cml0ZURhdGEsIHdyaXRlQ29tcG9uZW50LCByZWFkQ29tcG9uZW50LCBwb3BIaXN0b3J5IH0gZnJvbSBcIi4vbG9jYWxTdG9yYWdlXCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHJlYWREYXRhOiByZWFkRGF0YSxcbiAgICB3cml0ZURhdGE6IHdyaXRlRGF0YSxcbiAgICByZWFkQ29tcG9uZW50OiByZWFkQ29tcG9uZW50LFxuICAgIHdyaXRlQ29tcG9uZW50OiB3cml0ZUNvbXBvbmVudCxcbiAgICBwb3BIaXN0b3J5OiBwb3BIaXN0b3J5XG59IiwiLy8gRGVwZW5kZW5jaWVzLlxuXG5pbXBvcnQge2NyZWF0ZUNvbXBvbmVudH0gZnJvbSBcIi4uL2NyZWF0ZS1jb21wb25lbnRcIjtcbmltcG9ydCB7cmVhZERhdGEsIHdyaXRlRGF0YX0gZnJvbSBcIi4uL1N0b3JhZ2VcIjtcblxuLyoqXG4gKiBTdG9yZSBjb21wb25lbnQgc3RhdGUgYXMgdmFyaWFudHMuIEJlY2F1c2UgdmFyaWFudHMgYXJlIHZpc3VhbGx5IGRpZmZlcmVudCBmb3JtIG9mIGEgY29tcG9uZW50LlxuICogU2luY2UgdmlzdWFsbHkgZGlmZmVyZW50IGZvcm1zIGFyZSBkcml2ZW4gYnkgdGhlIHN0YXRlLCBpdHMgc2ltcGxlIHRvIGp1c3Qga2VlcCB0cmFjayBvZiB0aGUgc3RhdGVzLlxuICovXG53aW5kb3cuc2F2ZVZhcmlhbnQgPSBmdW5jdGlvbiBzYXZlVmFyaWFudChjb21wb25lbnROYW1lLCBzdGF0ZSkge1xuICAgIC8vIDEuIFJlYWQgYWxsIGNvbXBvbmVudHMuXG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICAvLyAyLiBGaW5kIHRoZSBwYXNzZWQgY29tcG9uZW50LlxuICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgLy8gMy4gSWYgY29tcG9uZW50LnZhcmlhbnRzIGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgYW4gZW1wdHkgYXJyYXkuXG4gICAgY29tcG9uZW50LnZhcmlhbnRzID0gY29tcG9uZW50LnZhcmlhbnRzIHx8IFt7XG4gICAgICAgIG5hbWU6IFwiRGVmYXVsdFwiLFxuICAgICAgICBzdGF0ZTogSlNPTi5wYXJzZShjb21wb25lbnQuc3RhdGUpXG4gICAgfV07XG4gICAgLy8gNC4gcHVzaCBzdGF0ZSBpbnRvIGNvbXBvbmVudC52YXJpYW50LlxuICAgIGNvbXBvbmVudC52YXJpYW50cy5wdXNoKHtcbiAgICAgICAgbmFtZTogYFZBUklBTlRfJHtjb21wb25lbnRzLmxlbmd0aH1gLFxuICAgICAgICBzdGF0ZTpzdGF0ZVxuICAgIH0pO1xuICAgIC8vIDUuIFJldGFpbiBvbmx5IHVuaXF1ZS5cbiAgICBjb21wb25lbnQudmFyaWFudHMgPSBbLi4ubmV3IFNldChjb21wb25lbnQudmFyaWFudHMubWFwKEpTT04uc3RyaW5naWZ5KSldLm1hcChKU09OLnBhcnNlKVxuICAgIC8vIDYuIHBlcnNpc3QuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yXCIsIGNvbXBvbmVudHMpXG59O1xuXG4vKipcbiAqIFxuICogQXNzZXQgaW4gc3R5bGUgc2hlZXQgc3ludGF4IC0gJGFzc2V0XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVzaGVldChzdHlsZSwgbmFtZSkge1xuXG4gICAgLy8gQ2hlY2sgaWYgc3R5bGUgaGFzICRhc3NldHNcbiAgICB3aGlsZShzdHlsZS5pbmNsdWRlcyhcIiRhc3NldHNcIikpe1xuICAgICAgICAvLyBSZXBsYWNlIGl0IHdpdGggYXNzZXQgYmxvYiB1cmxcbiAgICAgICAgbGV0IGFzc2V0ID0gc3R5bGUuc3BsaXQoXCJbJ1wiKVsxXS5zcGxpdChgXWApWzBdLnNwbGl0KFwiXCIpO1xuICAgICAgICBhc3NldC5wb3AoKTtcbiAgICAgICAgYXNzZXQgPSAgYXNzZXQuam9pbihcIlwiKTtcbiAgICAgICAgc3R5bGUgPSBzdHlsZS5yZXBsYWNlKGAkYXNzZXRzWycke2Fzc2V0fSddYCwgYHVybCgke3dpbmRvdy5hc3NldHNbYXNzZXRdfSlgKVxuICAgIH1cbiAgICBsZXQgdG9EZWxldGUgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWNvbXBvbmVudC1uYW1lPSdQYXJlbnRDb21wb25lbnQnXVwiKV07XG4gICAgdG9EZWxldGUuZm9yRWFjaChpdGVtPT57XG4gICAgICAgIGl0ZW0ucmVtb3ZlKClcbiAgICB9KVxuICAgIHZhciBkeW5hbWljU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIGR5bmFtaWNTdHlsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbXBvbmVudC1uYW1lXCIsIG5hbWUpO1xuICAgIGR5bmFtaWNTdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICBkeW5hbWljU3R5bGUuaW5uZXJIVE1MID0gc3R5bGU7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkeW5hbWljU3R5bGUpXG59XG5cbi8qKiBUYWtlcyBhIGNvbXBvbmVudCBhbmQgY29udmVydHMgaXQgYXMgYSByZWFjdCBjb21wb25lbnQgKi9cbmZ1bmN0aW9uIHNhdmVUb1dpbmRvdyggY29tcG9uZW50ICkge1xuICAgIGNyZWF0ZVN0eWxlc2hlZXQoY29tcG9uZW50LnN0eWxlLCBjb21wb25lbnQubmFtZSlcbiAgICB3aW5kb3dbY29tcG9uZW50Lm5hbWVdID0gY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrTmVzdGVkQ29tcG9uZW50cyggbWFya3VwKSB7XG5cbiAgICB2YXIgY29tcG9uZW50cyA9IHJlYWREYXRhKFwidWktZWRpdG9yXCIpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudHMuZmlsdGVyKGNvbXBvbmVudD0+IG1hcmt1cC5pbmNsdWRlcyhjb21wb25lbnQubmFtZSkpLmxlbmd0aCA+MDtcbn1cblxuLyoqIFRha2VzIGNvbXBvbmVudHMgYW5kIHNhdmVzIHRoZW0gdG8gd2luZG93IGFzIHJlYWN0IE9iamVjdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhdmVDb21wb25lbnRzVG9XaW5kb3coIG5lc3RlZENvbXBvbmVudHMpe1xuICAgIC8vIFRyYW5zcGlsZSB0aGVtIGFuZCBtYWtlIHRoZW0gZ2xvYmFsLlxuICAgIG5lc3RlZENvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgICBzYXZlVG9XaW5kb3coY29tcG9uZW50KVxuICAgIH0pO1xufVxuXG4vKiogVGFrZXMgbWFya3VwIGFuZCByZXR1cm5zIGNoaWxkcmVuIGNvbXBvbmVudCBvYmplY3RzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5lc3RlZENvbXBvbmVudHMgKHBhcmVudCkge1xuICAgIC8vIFNob3VsZCBiZSBhYmxlIHRvIGRldGVjdCBuZXN0ZWQgY29tcG9uZW50LlxuXG4gICAgbGV0IGNvbXBvbmVudHM9IHJlYWREYXRhKFwidWktZWRpdG9yXCIpO1xuICAgIGxldCBuZXN0ZWRDb21wb25lbnRzID0gW3BhcmVudF07XG4gICAgaWYoY2hlY2tOZXN0ZWRDb21wb25lbnRzKHBhcmVudC5tYXJrdXApKXtcbiAgICAgICAgLy8gZmluZCBhbGwgdGhlIG5lc3RlZCBjb21wb25lbnRzIGZyb20gdGhlIG1hcmt1cCBhbmQgcHVzaCBpdCB0byBuZXN0ZWRDb21wb25lbnRzLlxuICAgICAgICBsZXQgY2hpbGRyZW4gPSBjb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQ9PiBwYXJlbnQubWFya3VwLmluY2x1ZGVzKGNvbXBvbmVudC5uYW1lKSk7XG4gICAgICAgIC8vIEZpbmQgZ3JhbmQga2lkcy5cbiAgICAgICAgbGV0IGdyYW5kS2lkcyA9IGNoaWxkcmVuLm1hcChnZXROZXN0ZWRDb21wb25lbnRzKS5mbGF0KDMpXG4gICAgICAgIG5lc3RlZENvbXBvbmVudHMucHVzaCguLi5ncmFuZEtpZHMpXG4gICAgfVxuICAgIHJldHVybiBuZXN0ZWRDb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQ9PmNvbXBvbmVudCAmJiBjb21wb25lbnQubWFya3VwKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEZpbGUobmFtZSwgY29udGVudHMsIG1pbWVfdHlwZSkge1xuICAgIG1pbWVfdHlwZSA9IG1pbWVfdHlwZSB8fCBcInRleHQvcGxhaW5cIjtcblxuICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRzXSwge3R5cGU6IG1pbWVfdHlwZX0pO1xuXG4gICAgZG93bmxvYWQoYmxvYiwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZChibG9iLCBuYW1lKXtcbiAgICB2YXIgZGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgZGxpbmsuZG93bmxvYWQgPSBuYW1lO1xuICAgIGRsaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBkbGluay5vbmNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyByZXZva2VPYmplY3RVUkwgbmVlZHMgYSBkZWxheSB0byB3b3JrIHByb3Blcmx5XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHRoYXQuaHJlZik7XG4gICAgICAgIH0sIDE1MDApO1xuICAgIH07XG5cbiAgICBkbGluay5jbGljaygpO1xuICAgIGRsaW5rLnJlbW92ZSgpO1xufSIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5pbXBvcnQgTWVzc2FnZUNvbXBvbmVudCBmcm9tIFwiLi4vTWVzc2FnZUNvbXBvbmVudFwiO1xuXG5jbGFzcyBNZXNzYWdlc0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgbWVzc2FnZXMgPSB0aGlzLnByb3BzLm1lc3NhZ2VzO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7bWVzc2FnZXMubWFwKChtZXNzYWdlLGluZGV4KT0+PE1lc3NhZ2VDb21wb25lbnQga2V5PXtpbmRleH0gbWVzc2FnZT17bWVzc2FnZX0vPil9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApXG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VzQ29tcG9uZW50OyIsIi8vIERlcGVuZGVuY2llcy5cblxuaW1wb3J0IHtjcmVhdGVDb21wb25lbnR9IGZyb20gXCIuLi9jcmVhdGUtY29tcG9uZW50XCI7XG5pbXBvcnQge3JlYWREYXRhLCB3cml0ZURhdGF9IGZyb20gXCIuLi9TdG9yYWdlXCI7XG5cbi8qKlxuICogU3RvcmUgY29tcG9uZW50IHN0YXRlIGFzIHZhcmlhbnRzLiBCZWNhdXNlIHZhcmlhbnRzIGFyZSB2aXN1YWxseSBkaWZmZXJlbnQgZm9ybSBvZiBhIGNvbXBvbmVudC5cbiAqIFNpbmNlIHZpc3VhbGx5IGRpZmZlcmVudCBmb3JtcyBhcmUgZHJpdmVuIGJ5IHRoZSBzdGF0ZSwgaXRzIHNpbXBsZSB0byBqdXN0IGtlZXAgdHJhY2sgb2YgdGhlIHN0YXRlcy5cbiAqL1xud2luZG93LnNhdmVWYXJpYW50ID0gZnVuY3Rpb24gc2F2ZVZhcmlhbnQoY29tcG9uZW50TmFtZSwgc3RhdGUpIHtcbiAgICAvLyAxLiBSZWFkIGFsbCBjb21wb25lbnRzLlxuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgLy8gMi4gRmluZCB0aGUgcGFzc2VkIGNvbXBvbmVudC5cbiAgICBsZXQgY29tcG9uZW50ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWUuaW5jbHVkZXMoY29tcG9uZW50TmFtZSkpO1xuICAgIC8vIDMuIElmIGNvbXBvbmVudC52YXJpYW50cyBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGFuIGVtcHR5IGFycmF5LlxuICAgIGNvbXBvbmVudC52YXJpYW50cyA9IGNvbXBvbmVudC52YXJpYW50cyB8fCBbe1xuICAgICAgICBuYW1lOiBcIkRlZmF1bHRcIixcbiAgICAgICAgc3RhdGU6IEpTT04ucGFyc2UoY29tcG9uZW50LnN0YXRlKVxuICAgIH1dO1xuICAgIC8vIDQuIHB1c2ggc3RhdGUgaW50byBjb21wb25lbnQudmFyaWFudC5cbiAgICBjb21wb25lbnQudmFyaWFudHMucHVzaCh7XG4gICAgICAgIG5hbWU6IGBWQVJJQU5UXyR7Y29tcG9uZW50cy5sZW5ndGh9YCxcbiAgICAgICAgc3RhdGU6c3RhdGVcbiAgICB9KTtcbiAgICAvLyA1LiBSZXRhaW4gb25seSB1bmlxdWUuXG4gICAgY29tcG9uZW50LnZhcmlhbnRzID0gWy4uLm5ldyBTZXQoY29tcG9uZW50LnZhcmlhbnRzLm1hcChKU09OLnN0cmluZ2lmeSkpXS5tYXAoSlNPTi5wYXJzZSlcbiAgICAvLyA2LiBwZXJzaXN0LlxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBjb21wb25lbnRzKVxufTtcblxuLyoqXG4gKiBcbiAqIEFzc2V0IGluIHN0eWxlIHNoZWV0IHN5bnRheCAtICRhc3NldFxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlc2hlZXQoc3R5bGUsIG5hbWUpIHtcblxuICAgIC8vIENoZWNrIGlmIHN0eWxlIGhhcyAkYXNzZXRzXG4gICAgd2hpbGUoc3R5bGUuaW5jbHVkZXMoXCIkYXNzZXRzXCIpKXtcbiAgICAgICAgLy8gUmVwbGFjZSBpdCB3aXRoIGFzc2V0IGJsb2IgdXJsXG4gICAgICAgIGxldCBhc3NldCA9IHN0eWxlLnNwbGl0KFwiWydcIilbMV0uc3BsaXQoYF1gKVswXS5zcGxpdChcIlwiKTtcbiAgICAgICAgYXNzZXQucG9wKCk7XG4gICAgICAgIGFzc2V0ID0gIGFzc2V0LmpvaW4oXCJcIik7XG4gICAgICAgIHN0eWxlID0gc3R5bGUucmVwbGFjZShgJGFzc2V0c1snJHthc3NldH0nXWAsIGB1cmwoJHt3aW5kb3cuYXNzZXRzW2Fzc2V0XX0pYClcbiAgICB9XG4gICAgbGV0IHRvRGVsZXRlID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1jb21wb25lbnQtbmFtZT0nUGFyZW50Q29tcG9uZW50J11cIildO1xuICAgIHRvRGVsZXRlLmZvckVhY2goaXRlbT0+e1xuICAgICAgICBpdGVtLnJlbW92ZSgpXG4gICAgfSlcbiAgICB2YXIgZHluYW1pY1N0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBkeW5hbWljU3R5bGUuc2V0QXR0cmlidXRlKFwiZGF0YS1jb21wb25lbnQtbmFtZVwiLCBuYW1lKTtcbiAgICBkeW5hbWljU3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgZHluYW1pY1N0eWxlLmlubmVySFRNTCA9IHN0eWxlO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHluYW1pY1N0eWxlKVxufVxuXG4vKiogVGFrZXMgYSBjb21wb25lbnQgYW5kIGNvbnZlcnRzIGl0IGFzIGEgcmVhY3QgY29tcG9uZW50ICovXG5mdW5jdGlvbiBzYXZlVG9XaW5kb3coIGNvbXBvbmVudCApIHtcbiAgICBjcmVhdGVTdHlsZXNoZWV0KGNvbXBvbmVudC5zdHlsZSwgY29tcG9uZW50Lm5hbWUpXG4gICAgd2luZG93W2NvbXBvbmVudC5uYW1lXSA9IGNyZWF0ZUNvbXBvbmVudChjb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBjaGVja05lc3RlZENvbXBvbmVudHMoIG1hcmt1cCkge1xuXG4gICAgdmFyIGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcblxuICAgIHJldHVybiBjb21wb25lbnRzLmZpbHRlcihjb21wb25lbnQ9PiBtYXJrdXAuaW5jbHVkZXMoY29tcG9uZW50Lm5hbWUpKS5sZW5ndGggPjA7XG59XG5cbi8qKiBUYWtlcyBjb21wb25lbnRzIGFuZCBzYXZlcyB0aGVtIHRvIHdpbmRvdyBhcyByZWFjdCBPYmplY3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBzYXZlQ29tcG9uZW50c1RvV2luZG93KCBuZXN0ZWRDb21wb25lbnRzKXtcbiAgICAvLyBUcmFuc3BpbGUgdGhlbSBhbmQgbWFrZSB0aGVtIGdsb2JhbC5cbiAgICBuZXN0ZWRDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24oY29tcG9uZW50KXtcbiAgICAgICAgc2F2ZVRvV2luZG93KGNvbXBvbmVudClcbiAgICB9KTtcbn1cblxuLyoqIFRha2VzIG1hcmt1cCBhbmQgcmV0dXJucyBjaGlsZHJlbiBjb21wb25lbnQgb2JqZWN0cy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXN0ZWRDb21wb25lbnRzIChwYXJlbnQpIHtcbiAgICAvLyBTaG91bGQgYmUgYWJsZSB0byBkZXRlY3QgbmVzdGVkIGNvbXBvbmVudC5cblxuICAgIGxldCBjb21wb25lbnRzPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgbmVzdGVkQ29tcG9uZW50cyA9IFtwYXJlbnRdO1xuICAgIGlmKGNoZWNrTmVzdGVkQ29tcG9uZW50cyhwYXJlbnQubWFya3VwKSl7XG4gICAgICAgIC8vIGZpbmQgYWxsIHRoZSBuZXN0ZWQgY29tcG9uZW50cyBmcm9tIHRoZSBtYXJrdXAgYW5kIHB1c2ggaXQgdG8gbmVzdGVkQ29tcG9uZW50cy5cbiAgICAgICAgbGV0IGNoaWxkcmVuID0gY29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50PT4gcGFyZW50Lm1hcmt1cC5pbmNsdWRlcyhjb21wb25lbnQubmFtZSkpO1xuICAgICAgICAvLyBGaW5kIGdyYW5kIGtpZHMuXG4gICAgICAgIGxldCBncmFuZEtpZHMgPSBjaGlsZHJlbi5tYXAoZ2V0TmVzdGVkQ29tcG9uZW50cykuZmxhdCgzKVxuICAgICAgICBuZXN0ZWRDb21wb25lbnRzLnB1c2goLi4uZ3JhbmRLaWRzKVxuICAgIH1cbiAgICByZXR1cm4gbmVzdGVkQ29tcG9uZW50cy5maWx0ZXIoY29tcG9uZW50PT5jb21wb25lbnQgJiYgY29tcG9uZW50Lm1hcmt1cCk7XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG4gICAgY29sb3I6ICNkOWQ5ZDk7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTnVuaXRvIFNhbnNcXFwiLC1hcHBsZS1zeXN0ZW0sXFxcIi5TRk5TVGV4dC1SZWd1bGFyXFxcIixcXFwiU2FuIEZyYW5jaXNjb1xcXCIsQmxpbmtNYWNTeXN0ZW1Gb250LFxcXCJTZWdvZSBVSVxcXCIsXFxcIkhlbHZldGljYSBOZXVlXFxcIixIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gICAgbWFyZ2luOiAwcHg7XFxufVxcblxcbmxpICwgbGFiZWwsIHAsIC5ydWxlcyAsIGlucHV0LCB0ZXh0YXJlYXtcXG4gICAgZm9udC1zaXplOiA5cHg7XFxufVxcblxcbmlucHV0LCB0ZXh0YXJlYSB7IFxcbiAgICBiYWNrZ3JvdW5kOiAjMmIyYjJiO1xcbiAgICBjb2xvcjogI2Q5ZDlkOTtcXG4gICAgb3BhY2l0eTogMC43NTtcXG4gICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdIHtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0YXJlYTtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA3cHg7XFxufVxcblxcbnVsIGxhYmVsIGlucHV0IHtcXG4gICAgd2lkdGg6IDEwcHg7XFxufVxcblxcbnVsLCBsaSB7XFxuICAgIHBhZGRpbmctbGVmdDogNXB4O1xcbiAgICBtYXJnaW4tdG9wOiAwcHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDBweDtcXG59XFxuXFxuYnV0dG9uIHtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7XFxuICAgIG1hcmdpbi1sZWZ0OiA0cHg7XFxufVxcblxcbmJ1dHRvbiBpe1xcbiAgICBwYWRkaW5nLXJpZ2h0OjRweDtcXG59XFxuXFxuYnV0dG9uOmhvdmVyIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuXFxudWwsbGksIHVsIGxhYmVsIHtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG59XFxuXFxudWwgbGFiZWw6aG92ZXIsIGxpOmhvdmVyLCAuY29udGVudDpob3ZlcntcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuXFxuI2luZGV4e1xcbiAgICBtYXJnaW46LTRweDtcXG59XFxuXFxuLkNvZGVNaXJyb3Ige1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgbWFyZ2luLXRvcDo1cHg7XFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IEZvbGRlcnMgZnJvbSBcIi4uL1V0aWxpdGllcy9Db21wb25lbnRzL0ZvbGRlcnNcIjtcbmltcG9ydCB7IG9uRGVsZXRlQ29tcG9uZW50LCBvbkRlbGV0ZUZvbGRlciB9IGZyb20gXCIuL0V2ZW50c1wiO1xuXG4vLyBFdmVudHMuXG5cbmNsYXNzIENvbXBvbmVudHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IHRoaXMucHJvcHMuY29tcG9uZW50cyxcbiAgICAgICAgICAgIGZvbGRlcnM6IHRoaXMucHJvcHMuZm9sZGVycyxcbiAgICAgICAgICAgIHNob3dDb250cm9sczogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhZGRGb2xkZXIoKSB7XG4gICAgICAgIGxldCBmb2xkZXJzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmZvbGRlcnMpO1xuICAgICAgICBmb2xkZXJzLnVuc2hpZnQoe1xuICAgICAgICAgICAgdHlwZTogXCJOZXdGb2xkZXJcIixcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICBjb250ZW50czogW10sXG4gICAgICAgICAgICBzdGF0dXM6IFwiY2xvc2VkXCJcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZvbGRlcnMgfSlcbiAgICB9XG5cbiAgICBhZGRDb21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25PcGVuRWRpdG9yKCk7XG4gICAgfVxuXG4gICAgc2hvd0NvbnRyb2xzKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNob3dDb250cm9sczogdHJ1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGhpZGVDb250cm9scygpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaG93Q29udHJvbHM6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgbGV0IGNsYXNzZXMgPSB0aGlzLnN0YXRlLnNob3dDb250cm9scyA/ICdDb250cm9scycgOiAnQ29udHJvbHMgaGlkZUNvbnRyb2xzJ1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgZWxlbWVudHMtdGFiXCIgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIiBvbk1vdXNlRW50ZXI9e3RoaXMuc2hvd0NvbnRyb2xzLmJpbmQodGhpcyl9IG9uTW91c2VMZWF2ZT17dGhpcy5oaWRlQ29udHJvbHMuYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAgICAgIENvbXBvbmVudHNcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmFkZENvbXBvbmVudC5iaW5kKHRoaXMpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1lZGl0XCI+PC9pPntwcm9wcy5zZWxlY3RlZENvbXBvbmVudCA/IFwiRWRpdCBDb21wb25lbnRcIiA6IFwiQWRkIENvbXBvbmVudFwifTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmFkZEZvbGRlci5iaW5kKHRoaXMpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1mb2xkZXJcIj48L2k+QWRkIEZvbGRlcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvbGRlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPEZvbGRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHM9e3N0YXRlLmNvbXBvbmVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJzPXtzdGF0ZS5mb2xkZXJzfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb21wb25lbnQ9e3Byb3BzLnNlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Gb2xkZXJzVXBkYXRlPXtwcm9wcy5vbkZvbGRlcnNVcGRhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbj17cHJvcHMub25TZWxlY3Rpb259XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRlbGV0ZUNvbXBvbmVudD17b25EZWxldGVDb21wb25lbnQuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRGVsZXRlRm9sZGVyPXtvbkRlbGV0ZUZvbGRlci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnRzO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIub3ZlcnJpZGUge1xcbiAgICBsaW5lLWhlaWdodDogMCU7XFxufVxcblxcbnRleHRhcmVhIHtcXG4gICAgaGVpZ2h0OiA3MHB4O1xcbiAgICB3aWR0aDogNDUwcHg7XFxufVxcblxcbi50aXRsZXtcXG4gICAgbWFyZ2luLXRvcDogMTVweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTFweDtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYmFja2dyb3VuZDogcmdiKDY0LCA2NCwgNjQpO1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG59XFxuXFxuLmVsZW1lbnRzLXRhYiB7XFxuICAgIGxlZnQ6MHB4O1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICB3aWR0aDoyMXZ3O1xcbn1cXG5cXG4uQ29udHJvbHN7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmZvbGRlcnN7XFxuICAgIG92ZXJmbG93OiBzY3JvbGw7ICBcXG4gICAgaGVpZ2h0Ojg1dmg7XFxufVxcblxcbi5oaWRlQ29udHJvbHN7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuLy8gU3R5bGVzLlxuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuXG5pbXBvcnQge2ZvbGRlclN0cnVjdHVyZX0gZnJvbSBcIi4vcHJvY2Vzc0ZvbGRlclwiO1xuXG5jbGFzcyBGb2xkZXJzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiB0aGlzLnByb3BzLmNvbXBvbmVudHMsXG4gICAgICAgICAgICBmb2xkZXJzOiB0aGlzLnByb3BzLmZvbGRlcnNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmaW5kRm9sZGVyKGZvbGRlck5hbWUgLCBmb2xkZXIgKXtcblxuICAgICAgICBpZih0eXBlb2YgZm9sZGVyID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYodHlwZW9mIGZvbGRlciA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgICAgICBpZihmb2xkZXIubmFtZT09PWZvbGRlck5hbWUpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmb2xkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm9sZGVyLmNvbnRlbnRzLmZpbmQoZnVuY3Rpb24oY29udGVudCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZEZvbGRlcihmb2xkZXJOYW1lLCBjb250ZW50KVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQ29udGVudChmb2xkZXIsIGZvbGRlcnMpe1xuICAgICAgICBcbiAgICAgICAgbGV0IGNvbnRlbnRzID0gZm9sZGVyLmNvbnRlbnRzO1xuXG4gICAgICAgIC8vIE5hc3R5IGxvZ2ljLiBcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tBbmRSZW1vdmUoZm9sZGVyLCBjb250ZW50cyl7XG4gICAgICAgICAgICBsZXQgaW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgY29udGVudHMuZm9yRWFjaChjb250ZW50PT57XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGZvbGRlci5jb250ZW50cy5maW5kSW5kZXgoaXRlbT0+aXRlbT09PWNvbnRlbnQpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGluZGV4ZXMgPSBpbmRleGVzLmZpbHRlcihpbmRleD0+IGluZGV4Pi0xKTtcblxuICAgICAgICAgICAgaW5kZXhlcy5mb3JFYWNoKGluZGV4PT57XG4gICAgICAgICAgICAgICAgZm9sZGVyLmNvbnRlbnRzW2luZGV4XSA9IC0xO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZm9sZGVyLmNvbnRlbnRzID0gZm9sZGVyLmNvbnRlbnRzLmZpbHRlcihjb250ZW50PT5jb250ZW50IT09LTEpXG5cbiAgICAgICAgICAgIHJldHVybiBmb2xkZXIuY29udGVudHM7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIHRyYXZlcnNlRm9sZGVyKGN1cnJlbnRGb2xkZXIpe1xuXG4gICAgICAgICAgICAvLyBSZXR1cm4gaWYgaXQgaXMgdGhlIHNhbWUgZm9sZGVyLlxuICAgICAgICAgICAgaWYoZm9sZGVyLm5hbWU9PT1jdXJyZW50Rm9sZGVyLm5hbWUpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYW55IG9mIGNvbnRlbnRzIGFyZSBwcmVzZW50IGluIGZvbGRlci5cbiAgICAgICAgICAgIGN1cnJlbnRGb2xkZXIuY29udGVudHMgPSBjaGVja0FuZFJlbW92ZShjdXJyZW50Rm9sZGVyLGNvbnRlbnRzIClcblxuICAgICAgICAgICAgaWYodHlwZW9mIGN1cnJlbnRGb2xkZXIgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Rm9sZGVyLmNvbnRlbnRzLmZpbHRlcihpdGVtPT50eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIikuZmluZChmdW5jdGlvbihmb29sZWQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhdmVyc2VGb2xkZXIoZm9vbGVkKVxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyYXZlcnNlRm9sZGVyKGZvbGRlcnNbMF0pXG5cbiAgICB9XG5cbiAgICBjaGVja0ZvbGRlcihkYXRhKXtcbiAgICAgICAgbGV0IGZvbGRlcnMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuZm9sZGVycyk7XG4gICAgICAgIGxldCBlbXB0eUZvbGRlckluZGV4ID0gZm9sZGVycy5maW5kSW5kZXgoZm9sZGVyPT5mb2xkZXIudHlwZT09PVwiTmV3Rm9sZGVyXCIpO1xuICAgICAgICBpZihlbXB0eUZvbGRlckluZGV4IT09LTEpe1xuICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSBuZXdGb2xkZXJcbiAgICAgICAgICAgIGZvbGRlcnMuc3BsaWNlKGVtcHR5Rm9sZGVySW5kZXgsMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coZm9sZGVycylcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgbmV3bHkgY3JlYXRlZCBmb2xkZXIgXG4gICAgICAgIGxldCBmb2xkZXIgPSB0aGlzLmZpbmRGb2xkZXIoZGF0YS5uYW1lLCBmb2xkZXJzWzBdKVxuICAgICAgICBpZighZm9sZGVyKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb2xkZXIgbm90IGZvdW5kLCBhZGRpbmcgJHtKU09OLnN0cmluZ2lmeShkYXRhKX10byBsaXN0IG9mIGZvbGRlcnMgJHtKU09OLnN0cmluZ2lmeShmb2xkZXJzKX1gKTtcbiAgICAgICAgICAgIC8vIFB1c2ggaXQgaW50byBub0ZvbGRlci5jb250ZW50c1xuICAgICAgICAgICAgbGV0IG5vRm9sZGVyID0gZm9sZGVyc1swXTtcbiAgICAgICAgICAgIG5vRm9sZGVyLmNvbnRlbnRzLnVuc2hpZnQoZGF0YSk7XG4gICAgICAgIH0gXG4gICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBvbmVcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRm9sZGVyIGZvdW5kLCB1cGRhdGluZyB0aGUgZm9sZGVyIGNvbnRlbnQgZnJvbSAke2ZvbGRlci5jb250ZW50c30gdG8gJHtkYXRhLmNvbnRlbnRzfWApXG4gICAgICAgICAgICBmb2xkZXIuY29udGVudHMgPSBkYXRhLmNvbnRlbnRzO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgY3VycmVudCBkYXRhLmNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gb3RoZXIgZm9sZGVycy5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29udGVudChmb2xkZXIsIGZvbGRlcnMpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhmb2xkZXJzKVxuXG4gICAgICAgIHRoaXMucHJvcHMub25Gb2xkZXJzVXBkYXRlKGZvbGRlcnMpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZvbGRlclN0cnVjdHVyZSh0aGlzLnByb3BzLCB0aGlzLmNoZWNrRm9sZGVyLmJpbmQodGhpcykgKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9sZGVycztcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5ld0ZvbGRlcntcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5uZXdGb2xkZXIgaXtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBwYWRkaW5nOiA3cHg7XFxufVxcblxcbi5uZXdGb2xkZXIuZHJhZ092ZXIgaXtcXG4gICAgYW5pbWF0aW9uOiBibGluayAuNXMgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgYmxpbmt7XFxuICAgIGZyb20geyAgICBcXG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIH1cXG4gICAgdG8ge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxufVxcbi5mYS5mYS1mb2xkZXIgfiB1bCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5mYS5mYS1mb2xkZXItb3BlbiB+IHVsIHtcXG4gICAgZGlzcGxheTpibG9jaztcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IEZvbGRlciBmcm9tIFwiLi9Gb2xkZXJcIjtcbmltcG9ydCBDb21wb25lbnR0IGZyb20gXCIuLi8uLi8uLi9Db21wb25lbnRzL0NvbXBvbmVudHRcIjtcblxubGV0IHNlbGVjdGVkQ29tcG9uZW50LCBvblNlbGVjdGlvbiwgb25Gb2xkZXJVcGRhdGUsIG9uRGVsZXRlQ29tcG9uZW50LCBjb21wb25lbnRzLCBvbkRlbGV0ZUZvbGRlcjtcblxuZnVuY3Rpb24gaW5pdGlhbGlzZVByb3BzKHByb3BzLCBjaGVja0ZvbGRlcil7XG4gICAgc2VsZWN0ZWRDb21wb25lbnQgPSBwcm9wcy5zZWxlY3RlZENvbXBvbmVudDtcbiAgICBvblNlbGVjdGlvbiA9IHByb3BzLm9uU2VsZWN0aW9uO1xuICAgIGNvbXBvbmVudHMgPSBwcm9wcy5jb21wb25lbnRzO1xuICAgIG9uRm9sZGVyVXBkYXRlID0gY2hlY2tGb2xkZXI7XG4gICAgb25EZWxldGVDb21wb25lbnQgPSBwcm9wcy5vbkRlbGV0ZUNvbXBvbmVudDtcbiAgICBvbkRlbGV0ZUZvbGRlciA9IHByb3BzLm9uRGVsZXRlRm9sZGVyO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9sZGVyIChmb2xkZXIsIGkpe1xuICAgIGxldCBjb250ZW50cyA9IGZvbGRlci5jb250ZW50cztcblxuICAgIHJldHVybiA8Rm9sZGVyXG4gICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgIGZvbGRlcj17Zm9sZGVyfVxuICAgICAgICAgICAgICAgIGNvbnRlbnRzPXtjb250ZW50cy5tYXAoIHByb2Nlc3NDb250ZW50ICl9XG4gICAgICAgICAgICAgICAgb25Gb2xkZXJVcGRhdGU9e29uRm9sZGVyVXBkYXRlfVxuICAgICAgICAgICAgICAgIG9uRGVsZXRlRm9sZGVyPXtvbkRlbGV0ZUZvbGRlcn0vPlxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29udGVudCAoY29udGVudCwgaSl7XG5cbiAgICAvLyBDaGVjayBpZiBjb250ZW50IGlzIGEgY29tcG9uZW50IG5hbWUuXG4gICAgaWYodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIgKXtcblxuICAgICAgICByZXR1cm4gPENvbXBvbmVudHQgXG4gICAgICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXtjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZT09PWNvbnRlbnQpfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlPXtvblNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgb25EZWxldGVDb21wb25lbnQgPSB7b25EZWxldGVDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgfVxuICAgIC8vIGVsc2UgaXRzIGEgZm9sZGVyIHR5cGUuXG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBmb2xkZXIgPSBjb250ZW50O1xuICAgICAgICByZXR1cm4gPEZvbGRlclxuICAgICAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcj17Zm9sZGVyfVxuICAgICAgICAgICAgICAgICAgICBjb250ZW50cz17Zm9sZGVyLmNvbnRlbnRzLm1hcCggcHJvY2Vzc0NvbnRlbnQgKX1cbiAgICAgICAgICAgICAgICAgICAgb25Gb2xkZXJVcGRhdGU9e29uRm9sZGVyVXBkYXRlfVxuICAgICAgICAgICAgICAgICAgICBvbkRlbGV0ZUZvbGRlcj17b25EZWxldGVGb2xkZXJ9Lz5cbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZvbGRlclN0cnVjdHVyZShwcm9wcywgb25Gb2xkZXJVcGRhdGUpe1xuICAgIGxldCBmb2xkZXJzID0gcHJvcHMuZm9sZGVycztcblxuICAgIGluaXRpYWxpc2VQcm9wcyhwcm9wcywgb25Gb2xkZXJVcGRhdGUpO1xuXG4gICAgcmV0dXJuKGZvbGRlcnMubWFwKHByb2Nlc3NGb2xkZXIpKVxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcbmltcG9ydCBOZXdGb2xkZXIgZnJvbSBcIi4uL05ld0ZvbGRlclwiO1xuXG5pbXBvcnQge2RlbGV0ZUZvbGRlciwgdG9nZ2xlRm9sZGVyfSBmcm9tIFwiLi9SZWR1Y2VyXCI7XG5pbXBvcnQge2Ryb3BIYW5kbGVyLCBkcmFnT3ZlckhhbmRsZXIsIGRyYWdMZWF2ZUhhbmRsZXIsIGZvbGRlclN0YXJ0RHJhZ30gZnJvbSBcIi4vRXZlbnRzXCI7XG5cbmNsYXNzIEZvbGRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaWNvblN0YXR1czogXCJmYSBmYS1mb2xkZXJcIixcbiAgICAgICAgICAgIGZvbGRlckNsYXNzOiBcIm5ld0ZvbGRlclwiLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5mb2xkZXIubmFtZSxcbiAgICAgICAgICAgIGNvbnRlbnRzOiB0aGlzLnByb3BzLmZvbGRlci5jb250ZW50cyxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMucHJvcHMuZm9sZGVyLnR5cGUsXG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMucHJvcHMuZm9sZGVyLnN0YXR1c1xuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgbmV3Rm9sZGVyKGZvbGRlcil7XG4gICAgICAgIHRoaXMucHJvcHMub25Gb2xkZXJVcGRhdGUoZm9sZGVyKVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgZm9sZGVyID0gdGhpcy5wcm9wcy5mb2xkZXI7XG4gICAgICAgIGxldCBjb250ZW50cyA9IHRoaXMucHJvcHMuY29udGVudHM7XG4gICAgICAgIGxldCBpY29uU3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXMgPT09IFwib3BlblwiID8gXCJmYSBmYS1mb2xkZXItb3BlblwiIDogXCJmYSBmYS1mb2xkZXJcIjtcbiAgICAgICAgaWYoZm9sZGVyLnR5cGU9PVwiTmV3Rm9sZGVyXCIpe1xuICAgICAgICAgICAgcmV0dXJuICg8TmV3Rm9sZGVyIG9uTmV3Rm9sZGVyPXt0aGlzLm5ld0ZvbGRlci5iaW5kKHRoaXMpfS8+KVxuICAgICAgICB9XG4gICAgICAgIGlmKGZvbGRlci50eXBlPT1cImZvbGRlclwiKXtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLmZvbGRlckNsYXNzfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLWZvbGRlci1uYW1lPXtmb2xkZXIubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Ecm9wPXtkcm9wSGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXtkcmFnT3ZlckhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnTGVhdmU9e2RyYWdMZWF2ZUhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ9e2ZvbGRlclN0YXJ0RHJhZy5iaW5kKHRoaXMpfSA+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17aWNvblN0YXR1c30gb25DbGljaz17dG9nZ2xlRm9sZGVyLmJpbmQodGhpcyl9PjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwiZm9sZGVyXCIgcGxhY2Vob2xkZXI9XCJFbnRlciBmb2xkZXIgbmFtZVwiIHJlYWRPbmx5IHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9Lz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtkZWxldGVGb2xkZXIuYmluZCh0aGlzKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdHJhc2hcIj48L2k+RGVsZXRlPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnN0YXR1cyA9PT0gXCJvcGVuXCIgPyBjb250ZW50cyA6IG51bGx9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmKGZvbGRlci50eXBlPT1cIm5vRm9sZGVyXCIpe1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuc3RhdGUuZm9sZGVyQ2xhc3N9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEtZm9sZGVyLW5hbWU9e2ZvbGRlci5uYW1lfVxuICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyb3A9e2Ryb3BIYW5kbGVyLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI9e2RyYWdPdmVySGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZT17ZHJhZ0xlYXZlSGFuZGxlci5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdTdGFydD17Zm9sZGVyU3RhcnREcmFnLmJpbmQodGhpcyl9ID5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRlbnRzfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9sZGVyO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJpbnB1dC5mb2xkZXJ7XFxuICAgIGJvcmRlcjpub25lO1xcbiAgICBiYWNrZ3JvdW5kOm5vbmU7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxM3B4O1xcbn1cXG5cXG4ubmV3Rm9sZGVye1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLm5ld0ZvbGRlciBpe1xcbiAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwwLDAsMC45KTtcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIHBhZGRpbmc6IDdweDtcXG59XFxuXFxuLm5ld0ZvbGRlci5kcmFnT3ZlciBpe1xcbiAgICBhbmltYXRpb246IGJsaW5rIC41cyBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBibGlua3tcXG4gICAgZnJvbSB7ICAgIFxcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgfVxcbiAgICB0byB7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG59XFxuLmZhLmZhLWZvbGRlciB+IHVsIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuLmZhLmZhLWZvbGRlci1vcGVuIH4gdWwge1xcbiAgICBkaXNwbGF5OmJsb2NrO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG4vLyBTdHlsZXMuXG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbi8vIENvbXBvbmVudHMuXG5cbmNsYXNzIE5ld0ZvbGRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc3RhdHVzOiBcImZhIGZhLWZvbGRlclwiLFxuICAgICAgICAgICAgbmV3Rm9sZGVyQ2xhc3M6IFwibmV3Rm9sZGVyXCIsXG4gICAgICAgICAgICBmb2xkZXJOYW1lOiBcIlwiXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZm9sZGVyTmFtZUNoYW5nZWQoZSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9sZGVyTmFtZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2F2ZUZvbGRlck5hbWVPbkVudGVyKGUpe1xuICAgICAgICBpZihlLmtleT09PVwiRW50ZXJcIil7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uTmV3Rm9sZGVyKHtcbiAgICAgICAgICAgICAgICBuYW1lOnRoaXMuc3RhdGUuZm9sZGVyTmFtZSxcbiAgICAgICAgICAgICAgICBjb250ZW50czpbXSxcbiAgICAgICAgICAgICAgICB0eXBlOlwiZm9sZGVyXCIsXG4gICAgICAgICAgICAgICAgc3RhdHVzOlwiY2xvc2VkXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMuc3RhdGUubmV3Rm9sZGVyQ2xhc3N9PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLnN0YXR1c30+PC9pPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9sZGVyXCIgXG4gICAgICAgICAgICAgICAgYXV0b0ZvY3VzPXt0cnVlfSBcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGZvbGRlciBuYW1lXCJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHt0aGlzLnN0YXRlLmZvbGRlck5hbWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuZm9sZGVyTmFtZUNoYW5nZWQuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnNhdmVGb2xkZXJOYW1lT25FbnRlci5iaW5kKHRoaXMpfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmV3Rm9sZGVyO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubmV3Rm9sZGVyIGl7XFxuICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxuICAgIGJvcmRlci1jb2xvcjogcmdiYSgwLDAsMCwwLjkpO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgcGFkZGluZzogN3B4O1xcbn1cXG5cXG4ubmV3Rm9sZGVyLmRyYWdPdmVyIGl7XFxuICAgIGFuaW1hdGlvbjogYmxpbmsgLjVzIGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGJsaW5re1xcbiAgICBmcm9tIHsgICAgXFxuICAgICAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xcbiAgICB9XFxuICAgIHRvIHtcXG4gICAgICAgIGNvbG9yOiBncmVlbjtcXG4gICAgfVxcbn1cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnQgZnVuY3Rpb24gZGVsZXRlRm9sZGVyKGUpe1xuICAgIHRoaXMucHJvcHMub25EZWxldGVGb2xkZXIoXCJDT05URU5UU1wiLCB0aGlzLnN0YXRlLm5hbWUpO1xufVxuXG5mdW5jdGlvbiBvcGVuRm9sZGVyKCl7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogXCJvcGVuXCJcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2xvc2VGb2xkZXIoKXtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBcImNsb3NlZFwiXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVGb2xkZXIoKXtcbiAgICBpZih0aGlzLnN0YXRlLnN0YXR1cyA9PT0gXCJjbG9zZWRcIikge1xuICAgICAgICBvcGVuRm9sZGVyLmNhbGwodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VGb2xkZXIuY2FsbCh0aGlzKTtcbiAgICB9XG59XG4iLCJcbiAgICBleHBvcnQgZnVuY3Rpb24gZHJvcEhhbmRsZXIoZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudE5hbWUgPSBldi5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcImNvbXBvbmVudC1uYW1lXCIpO1xuICAgICAgICBsZXQgZm9sZGVyTmFtZSA9IGV2LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiZm9sZGVyLW5hbWVcIik7XG4gICAgICAgIGlmKGZvbGRlck5hbWU9PVwibnVsbFwiIHx8IGZvbGRlck5hbWU9PVwiXCIpe1xuICAgICAgICAgICAgZm9sZGVyTmFtZSA9IGV2LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2xkZXItbmFtZVwiKTtcbiAgICAgICAgICAgIGlmKGZvbGRlck5hbWUgPT1cIm51bGxcIilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnRzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlLmNvbnRlbnRzKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZHJvcHBlZCBpdGVtIGlzIGEgY29tcG9uZW50XG4gICAgICAgIGlmKGNvbXBvbmVudE5hbWUpe1xuICAgICAgICAgICAgY29udGVudHMucHVzaChjb21wb25lbnROYW1lKVxuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGlzIGEgZm9sZGVyLiBBbHNvIGNoZWNrIGlmIHdlIGFyZSBub3QgZHJvcHBpbmcgb24gdGhlIG9yaWdpbmFsIGZvbGRlci4gbWF5IGJlIHJlbW92ZSBpdCBmcm9tIHRoZSBkb20uIE5PUEUuIFxuICAgICAgICBlbHNlIGlmKGZvbGRlck5hbWUgJiYgZm9sZGVyTmFtZSE9PXRoaXMuc3RhdGUuZm9sZGVyTmFtZSl7XG4gICAgICAgICAgICBjb250ZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBmb2xkZXJOYW1lLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOltdLFxuICAgICAgICAgICAgICAgIHR5cGU6XCJmb2xkZXJcIixcbiAgICAgICAgICAgICAgICBzdGF0dXM6XCJjbG9zZWRcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3BzLm9uRm9sZGVyVXBkYXRlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIGNvbnRlbnRzIDogY29udGVudHMsXG4gICAgICAgICAgICB0eXBlOlwiZm9sZGVyXCIsXG4gICAgICAgICAgICBzdGF0dXM6XCJvcGVuXCJcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zb2xlLmxvZyhcIkRyb3AgZnJvbSBmb2xkZXJcIik7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRyYWdPdmVySGFuZGxlcihldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvbGRlckNsYXNzOiBcIm5ld0ZvbGRlciBkcmFnT3ZlclwiLFxuICAgICAgICAgICAgc3RhdHVzOiBcIm9wZW5cIlxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkcmFnTGVhdmVIYW5kbGVyKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmb2xkZXJDbGFzczogXCJuZXdGb2xkZXJcIixcbiAgICAgICAgICAgIHN0YXR1czogXCJjbG9zZWRcIlxuICAgICAgICB9KVxuICAgIH1cblxuXG5leHBvcnQgZnVuY3Rpb24gZm9sZGVyU3RhcnREcmFnKGUpe1xuICAgIGNvbnNvbGUubG9nKFwiRm9sZGVyIHN0YXJ0ZWQgZHJhZ2VkXCIpXG4gICAgbGV0IG5hbWUgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2xkZXItbmFtZVwiKVxuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJmb2xkZXItbmFtZVwiLCBuYW1lKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7c2VsZWN0aW9uQ2hhbmdlZCwgYWRkQ29tcG9uZW50RGV0YWlsc30gZnJvbSBcIi4vRXZlbnRzXCI7XG5cbmltcG9ydCB7b25FeHBvcnR9IGZyb20gXCIuLi8uLi9VdGlsaXRpZXMvRXhwb3J0XCI7XG5cbmltcG9ydCAgXCIuL1N0eWxlLmNzc1wiO1xuXG5jbGFzcyBDb21wb25lbnR0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZENvbXBvbmVudDogdGhpcy5wcm9wcy5zZWxlY3RlZENvbXBvbmVudFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlc3RvcmVDbGFzcyhldmVudCl7XG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZUFkZGl0aW9uYWxzXCIpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBwcm9wcy5zZWxlY3RlZENvbXBvbmVudDtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudDtcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMucHJvcHMuaW5kZXgsIGluc3RlYWQgdXNlIHRoaXMgZWxlbWVudCBpbnN0YW5jZSBpbmRleC4gUmVtb3ZlcyBkdXBsaWNhdGUgY29kZVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYWNrZ3JvdW5kXCIgZHJhZ2dhYmxlPVwidHJ1ZVwiIGRhdGEtbmFtZT17Y29tcG9uZW50Lm5hbWV9IG9uRHJhZ1N0YXJ0PXthZGRDb21wb25lbnREZXRhaWxzLmJpbmQodGhpcyl9IG9uRHJhZ0VuZD17dGhpcy5yZXN0b3JlQ2xhc3N9PlxuICAgICAgICAgICAgICAgIDxsaSBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lID0ge3NlbGVjdGVkQ29tcG9uZW50ICYmIHByb3BzLmNvbXBvbmVudC5uYW1lPT09c2VsZWN0ZWRDb21wb25lbnQubmFtZSA/IFwic2VsZWN0ZWQgY29tcG9uZW50XCI6IFwiY29tcG9uZW50XCJ9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2sgPSB7c2VsZWN0aW9uQ2hhbmdlZC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHtwcm9wcy5pbmRleH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNvbXBvbmVudE5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjb21wb25lbnQubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB7cHJvcHMuaW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25FeHBvcnQuYmluZChudWxsLGNvbXBvbmVudC5uYW1lKX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWZpbGUtZXhwb3J0XCI+PC9pPkV4cG9ydDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHtwcm9wcy5pbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtwcm9wcy5vbkRlbGV0ZUNvbXBvbmVudH0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdHJhc2hcIj48L2k+RGVsZXRlPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC8gZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50dDtcbiIsImV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rpb25DaGFuZ2VkKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uU2VsZWN0aW9uQ2hhbmdlKGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29tcG9uZW50RGV0YWlscyhlKXtcbiAgICBjb25zb2xlLmxvZyhcIkNvbXBvbmVudCBkcmFnZ2VkXCIpXG4gICAgbGV0IG5hbWUgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIpXG4gICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJoaWRlQWRkaXRpb25hbHNcIik7XG4gICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcImNvbXBvbmVudC1uYW1lXCIsIG5hbWUpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5cbndpbmRvdy5ldmVudENhbGxiYWNrcyA9IHtcbiAgICBhZGRDb21wb25lbnREZXRhaWxzOiBhZGRDb21wb25lbnREZXRhaWxzXG59OyIsImltcG9ydCB7IGV4cG9ydFN0b3J5Ym9vayB9IGZyb20gXCIuL0V4cG9ydFN0b3J5Ym9va1wiO1xuaW1wb3J0IHsgZXhwb3J0TldCIH0gZnJvbSBcIi4vRXhwb3J0TldCXCI7XG5pbXBvcnQgeyBleHBvcnRTaW1wbGUgfSBmcm9tIFwiLi9FeHBvcnRTaW1wbGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uRXhwb3J0KGNvbXBvbmVudE5hbWUpe1xuICAgIGRlYnVnZ2VyO1xuICAgIHN3aXRjaCAod2luZG93LkVYUE9SVF9UWVBFKSB7XG4gICAgICAgIGNhc2UgXCJTSU1QTEVcIjogXG4gICAgICAgICAgICBleHBvcnRTaW1wbGUoY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiTldCXCI6XG4gICAgICAgICAgICBleHBvcnROV0IoY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiU1RPUllCT09LXCI6XG4gICAgICAgICAgICBleHBvcnRTdG9yeWJvb2soY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBleHBvcnRTaW1wbGUoY29tcG9uZW50TmFtZSk7XG4gICAgfVxufSIsImltcG9ydCB7IGNvbnZlcnRUb1JlYWN0U3RvcmllcyB9IGZyb20gXCIuLi8uLi9Db2RlR2VuZXJhdG9yL1JlYWN0U3Rvcmllc1wiO1xuaW1wb3J0IHsgY29udmVydFRvUmVhY3QgfSBmcm9tIFwiLi4vLi4vQ29kZUdlbmVyYXRvci9SZWFjdFwiO1xuXG5pbXBvcnQge8KgZ2V0TmVzdGVkQ29tcG9uZW50cyB9IGZyb20gXCIuLi8uLi9SdW50aW1lXCI7XG5pbXBvcnQgeyByZWFkRGF0YSB9IGZyb20gXCIuLi8uLi9TdG9yYWdlXCI7XG5pbXBvcnQgeyB6aXBGaWxlcyB9IGZyb20gXCIuLi8uLi9MaWJyYXJpZXMvemlwRmlsZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydFN0b3J5Ym9vayhjb21wb25lbnROYW1lKSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHNlbGVjdGVkQ29tcG9uZW50KTtcblxuICAgIGxldCB1bmlxdWVDb21wb25lbnRzID0gWy4uLm5ldyBTZXQobmVzdGVkQ29tcG9uZW50cy5tYXAoY29tPT5jb20ubmFtZSkpXS5tYXAobmFtZT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PW5hbWUpXG4gICAgfSlcbiAgICBjb25zdCByZW1vdmVQYXJhbnRoZXNpcyA9IChjb21wb25lbnQpPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnQucmVwbGFjZShcIihcIixcIlwiKS5yZXBsYWNlKFwifSlcIixcIn1cIilcbiAgICB9XG5cbiAgICBsZXQgaGVhZGVySW1wb3J0cyA9IGAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICBpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbiAgICBgO1xuXG4gICAgd2luZG93LkV4cG9ydE5XQiA9IHRydWU7XG5cbiAgICBsZXQgY29tcG9uZW50U3RyaW5ncyA9IHVuaXF1ZUNvbXBvbmVudHMubWFwKGNvbnZlcnRUb1JlYWN0KS5tYXAocmVtb3ZlUGFyYW50aGVzaXMpO1xuICAgIGNvbXBvbmVudFN0cmluZ3NbMF0gPSBcImV4cG9ydCBkZWZhdWx0IFwiKyBjb21wb25lbnRTdHJpbmdzWzBdO1xuXG4gICAgbGV0IFJlYWN0Q2xhc3NDb21wb25lbnRTdHJpbmcgPSBoZWFkZXJJbXBvcnRzICsgY29tcG9uZW50U3RyaW5ncy5yZXZlcnNlKCkuam9pbihcIlxcblwiKTtcblxuICAgIHdpbmRvdy5FeHBvcnROV0IgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiBleHBvcnQgc3Rvcnlib29rXG4gICAgICogMS4gRXhwb3J0IGNvbXBvbmVudC5qc1xuICAgICAqIDIuIEV4cG9ydCBjb21wb25lbnQuc3Rvcmllcy5qc1xuICAgICAqL1xuXG4gICAgbGV0IFJlYWN0U3Rvcmllc1N0cmluZyA9IGNvbnZlcnRUb1JlYWN0U3RvcmllcyhzZWxlY3RlZENvbXBvbmVudCk7XG4gICAgemlwRmlsZXMoW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBgJHtjb21wb25lbnROYW1lfS5qc2AsXG4gICAgICAgICAgICBjb250ZW50OiBSZWFjdENsYXNzQ29tcG9uZW50U3RyaW5nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IGAke2NvbXBvbmVudE5hbWV9LnN0b3JpZXMuanNgLFxuICAgICAgICAgICAgY29udGVudDogUmVhY3RTdG9yaWVzU3RyaW5nXG4gICAgICAgIH1cbiAgICBdKVxufTsiLCIvLyBFbGVtZW50cyB0byAgcmVhY3QgY29tcG9uZW50LlxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1JlYWN0U3RvcmllcyAoY29tcG9uZW50KXtcblxuICAgIGxldCBSZWFjdFN0b3JpZXMgPSBcbiAgICBgaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuICAgIGltcG9ydCAke2NvbXBvbmVudC5uYW1lfSBmcm9tIFwiLi8ke2NvbXBvbmVudC5uYW1lfVwiO1xuICAgIFxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgdGl0bGU6ICcke2NvbXBvbmVudC5uYW1lfScsXG4gICAgICAgIGNvbXBvbmVudDogJHtjb21wb25lbnQubmFtZX1cbiAgICB9XG4gICAgXG4gICAgJHtjb21wb25lbnQudmFyaWFudHMubWFwKGZ1bmN0aW9uICh2YXJpYW50KXtcbiAgICAgICAgcmV0dXJuIGBleHBvcnQgY29uc3QgJHt2YXJpYW50Lm5hbWV9ID0gKCkgPT4gPCR7Y29tcG9uZW50Lm5hbWV9IHN0YXRlPXske0pTT04uc3RyaW5naWZ5KHZhcmlhbnQuc3RhdGUpfX0+PC8ke2NvbXBvbmVudC5uYW1lfT47YFxuICAgIH0pLmpvaW4oXCJcIil9YFxuXG4gICAgcmV0dXJuIFJlYWN0U3Rvcmllcztcbn1cbiIsImltcG9ydCB7Y29udmVydFRvUmVhY3R9IGZyb20gXCIuL0NvZGVHZW5lcmF0b3IvUmVhY3RcIjtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudCl7XG5cbiAgICBsZXQgY29tcG9uZW50U3RyaW5nID0gY29udmVydFRvUmVhY3QoY29tcG9uZW50KTtcblxuICAgIC8vIGV2YWwgZG9lcyBub3QgZXZhbHVhdGUgY2xhc3MgaWYgbm90IGV4Y2xvc2VkIGluIHBhcmFudGhlc2lzLlxuICAgIHJldHVybiBldmFsKEJhYmVsLnRyYW5zZm9ybShjb21wb25lbnRTdHJpbmcsIHsgcHJlc2V0czogWydyZWFjdCddLCBwbHVnaW5zOiBbXCJ0cmFuc2Zvcm0tZXMyMDE1LWNsYXNzZXNcIl0gIH0pLmNvZGUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNyZWF0ZUNvbXBvbmVudFxufSIsImltcG9ydCB7c2FtcGxlfSBmcm9tIFwiLi9TYW1wbGVcIjtcblxuZnVuY3Rpb24gcHVzaEhpc3RvcnkoY29tcG9uZW50cyl7XG5cbiAgICB3aW5kb3cuZWRpdG9ySGlzdG9yeSA9IHJlYWREYXRhKFwidWktZWRpdG9yLWhpc3RvcnlcIik7XG4gICAgZWRpdG9ySGlzdG9yeS5wdXNoKGNvbXBvbmVudHMpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidWktZWRpdG9yLWhpc3RvcnlcIixKU09OLnN0cmluZ2lmeShlZGl0b3JIaXN0b3J5KSApO1xufVxuXG4vLyBJZiBlbXB0eSwgcmV0dXJuIGVtcHR5IGFycmF5LlxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZERhdGEoa2V5KXtcblxuICAgIGlmKGtleSA9PT1cInVpLWVkaXRvclwiKXtcbiAgICAgICAgaWYoIXdpbmRvdy5jb21wb25lbnRzICl7XG4gICAgICAgICAgICB3aW5kb3cuY29tcG9uZW50cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSkgfHwgc2FtcGxlO1xuICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh3aW5kb3cuY29tcG9uZW50cykpO1xuICAgIH1cbiAgICBpZihrZXk9PT1cInVpLWVkaXRvci1oaXN0b3J5XCIpe1xuICAgICAgICBsZXQgaGlzdG9yeSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIFxuICAgICAgICBpZihoaXN0b3J5KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoaGlzdG9yeSk7XG4gICAgfVxuICAgIGlmKGtleSA9PT1cImZvbGRlcnNcIil7XG4gICAgICAgIGxldCBmb2xkZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKTtcblxuICAgICAgICBsZXQgY29tcG9uZW50TmFtZXMgPSB3aW5kb3cuY29tcG9uZW50cy5tYXAoY29tcG9uZW50PT5jb21wb25lbnQubmFtZSk7XG4gICAgICAgIGlmKGZvbGRlcnMgPT09IG51bGwpe1xuICAgICAgICAgICAgcmV0dXJuICBbe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwibm9Gb2xkZXJcIixcbiAgICAgICAgICAgICAgICBjb250ZW50czogY29tcG9uZW50TmFtZXMsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICBzdGF0dXM6XCJvcGVuXCJcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsIHB1c2ggaXQgaW50byBub0ZvbGRlci5cbiAgICAgICAgbGV0IGNvbXBvbmVudFdpdGhvdXRQYXJlbnRGb2xkZXIgPSBjb21wb25lbnROYW1lcy5maWx0ZXIoY29tcG9uZW50TmFtZT0+e1xuICAgICAgICAgICAgcmV0dXJuIGZvbGRlcnMuZXZlcnkoZm9sZGVyPT5mb2xkZXIuY29udGVudHMuZXZlcnkoY29udGVudCA9PiAgY29udGVudCAhPT0gY29tcG9uZW50TmFtZSApKVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG5vRm9sZGVyID0gZm9sZGVycy5maW5kKGZvbGRlcj0+Zm9sZGVyLnR5cGU9PT1cIm5vRm9sZGVyXCIpO1xuICAgICAgICBub0ZvbGRlci5jb250ZW50cy5wdXNoKC4uLmNvbXBvbmVudFdpdGhvdXRQYXJlbnRGb2xkZXIpO1xuICAgICAgICByZXR1cm4gZm9sZGVycztcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRGF0YShrZXksIGNvbXBvbmVudHMsIG5vUHVzaCl7XG5cbiAgICBpZihrZXk9PVwiZm9sZGVyc1wiKXtcbiAgICAgICAgY29uc29sZS5sb2coXCJ3cml0aW5nIGZvbGRlcnNcIilcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShjb21wb25lbnRzKSk7XG4gICAgfVxuICAgIGlmKGtleT09XCJ1aS1lZGl0b3JcIil7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiV1JJVEVcIilcbiAgICAgICAgd2luZG93LmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHMpKTtcbiAgICAgICAgaWYoIW5vUHVzaCl7XG4gICAgICAgICAgICBwdXNoSGlzdG9yeShjb21wb25lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRDb21wb25lbnQoY29tcG9uZW50TmFtZSl7XG5cbiAgICBsZXQgY29tcG9uZW50cyA9IHJlYWREYXRhKFwidWktZWRpdG9yXCIpO1xuICAgIGlmKCFjb21wb25lbnRzKXtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09Y29tcG9uZW50TmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUNvbXBvbmVudChwYXJlbnQpIHtcblxuICAgIGlmKCFBcnJheS5pc0FycmF5KHBhcmVudCkgJiYgcGFyZW50Lm5hbWUpe1xuICAgICAgICBsZXQgY29tcG9uZW50cyA9IHJlYWREYXRhKCBcInVpLWVkaXRvclwiKTtcbiAgICAgICAgbGV0IGluZGV4ID0gY29tcG9uZW50cy5maW5kSW5kZXgoY29tcD0+Y29tcC5uYW1lID09PSBwYXJlbnQubmFtZSk7XG4gICAgICAgIGNvbXBvbmVudHNbaW5kZXhdID0gcGFyZW50O1xuICAgICAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgY29tcG9uZW50cyk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wSGlzdG9yeSgpe1xuICAgIFxuICAgIGxldCBlZGl0b3JIaXN0b3J5ID0gcmVhZERhdGEoXCJ1aS1lZGl0b3ItaGlzdG9yeVwiKTtcbiAgICBpZighZWRpdG9ySGlzdG9yeSl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbGFzdEl0ZW0gPSBlZGl0b3JIaXN0b3J5LnBvcCgpO1xuICAgIFxuICAgIGlmKCFlZGl0b3JIaXN0b3J5KXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvci1oaXN0b3J5XCIsIGVkaXRvckhpc3RvcnksIHRydWUpO1xuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yXCIsIGxhc3RJdGVtLCB0cnVlKTtcbn0iLCJsZXQgc2FtcGxlID0gW1xuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiRm9yZ290UGFzc3dvcmRcIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT1cXFwidnNCdXR0b25cXFwiPjxidXR0b24gaWQ9XFxcImYxMjNcXFwiPkZvcmdvdCBQYXNzd29yZDwvYnV0dG9uPjwvZGl2PlwiLFxuICAgICAgICBcImV2ZW50c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICAgICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLnNob3dcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uUGFzc3dvcmRGb3Jnb3R0ZW5cIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiZjEyM1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7XFxcInNob3dcXFwiOlxcXCJmYWxzZVxcXCJ9XCIsXG4gICAgICAgIFwic3R5bGVcIjogXCIudnNCdXR0b257XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmNvbG9yOiByZ2IoMCwgMCwgMCk7XFxufVxcblxcblxcbi52c0J1dHRvbiBidXR0b257XFxuYm9yZGVyLWNvbG9yOiAjYmYyMTVkO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZDogI2VmNWY5NjtcXG5ib3JkZXI6IDFweCBzb2xpZDtcXG59XFxuXFxuLnZzQnV0dG9uIGJ1dHRvbjpob3ZlcntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiTW9kYWxcIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuPGhlYWRlcj5cXG4gIDxoMz5Gb3Jnb3QgUGFzc3dvcmQ8L2gzPlxcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cXFwiY2xvc2VCdXR0b25cXFwiIGlkPVxcXCJ4XFxcIj54PC9idXR0b24+XFxuPC9oZWFkZXI+XFxuPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRlbnRcXFwiPjxQcml2YWN5QW5kUG9saWN5PjwvUHJpdmFjeUFuZFBvbGljeT5cXG4gXFxuPC9zZWN0aW9uPlxcbjxmb290ZXI+Zm9vdGVyPC9mb290ZXI+XFxuPC9kaXY+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvbkNsaWNrXCIsXG4gICAgICAgICAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUubmFtZT1cXFwiXFxcIjtcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uQ2xvc2VNb2RhbFwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJzdGF0ZVwiOiBcInt9XCIsXG4gICAgICAgIFwic3R5bGVcIjogXCIubW9kYWx7XFxuICB3aWR0aDo0MDBweDtcXG4gIGZvbnQtc2l6ZToyMnB4O1xcbiAgcG9zaXRpb246cmVsYXRpdmU7XFxuYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuY29sb3I6IGJsYWNrO1xcbiAgZm9udC1mYW1pbHk6IEJlbnRvblNhbnNMaWdodCxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OjQwMDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuXFxufVxcblxcbi5tb2RhbCBoM3tcXG4gIHBhZGRpbmc6MXJlbTtcXG5mb250LXNpemU6MjZweDtcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNvbnRlbnR7XFxucGFkZGluZzoxcmVtO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCBmb290ZXJ7XFxucGFkZGluZzoxcmVtO1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG4ubW9kYWwgaGVhZGVye1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNsb3NlQnV0dG9ue1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB0b3A6IDIwcHg7XFxufVxcblxcbi5tb2RhbCAuY29udGVudHtcXG4gICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIkNhbmNlbEJ1dHRvblwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3NOYW1lPVxcXCJ2c0J1dHRvblxcXCI+PGJ1dHRvbj57c3RhdGUuY2FuY2VsQnV0dG9ufTwvYnV0dG9uPjwvZGl2PlwiLFxuICAgICAgICBcImV2ZW50c1wiOiBbXSxcbiAgICAgICAgXCJzdGF0ZVwiOiBcIntcXFwiY2FuY2VsQnV0dG9uXFxcIjpcXFwiQ2FuY2VsXFxcIn1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi52c0J1dHRvbntcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XFxuXFxuXFxuLnZzQnV0dG9uIGJ1dHRvbntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjZWY1Zjk2O1xcbmJvcmRlcjogMXB4IHNvbGlkO1xcbnBhZGRpbmc6IC41cmVtIDJyZW07XFxufVxcblxcbi52c0J1dHRvbiBidXR0b246aG92ZXJ7XFxuYm9yZGVyLWNvbG9yOiAjYmYyMTVkO1xcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlN1Ym1pdEJ1dHRvblwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3NOYW1lPVxcXCJ2c0J1dHRvblxcXCI+PGJ1dHRvbj57c3RhdGUuc3VibWl0QnV0dG9ufTwvYnV0dG9uPjwvZGl2PlwiLFxuICAgICAgICBcImV2ZW50c1wiOiBbXSxcbiAgICAgICAgXCJzdGF0ZVwiOiBcIntcXFwic3VibWl0QnV0dG9uXFxcIjpcXFwiU3VibWl0XFxcIn1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi52c0J1dHRvbntcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XFxuXFxuXFxuLnZzQnV0dG9uIGJ1dHRvbntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjZWY1Zjk2O1xcbmJvcmRlcjogMXB4IHNvbGlkO1xcbnBhZGRpbmc6IC41cmVtIDJyZW07XFxufVxcblxcbi52c0J1dHRvbiBidXR0b246aG92ZXJ7XFxuYm9yZGVyLWNvbG9yOiAjYmYyMTVkO1xcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlByaXZhY3lBbmRQb2xpY3lcIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJwcml2YWN5UG9saWN5XFxcIj5cXG4gIFBsZWFzZSBlbnRlciB0aGUgZW1haWwgYWRkcmVzcyB5b3UgdXNlZCB0byBjcmVhdGUgeW91ciBhY2NvdW50IGFuZCB3ZSB3aWxsIHNlbmQgeW91IGEgbGluayB0byByZXNldCB5b3VyIHBhc3N3b3JkLiBTZWUgUHJpdmFjeSBQb2xpY3lcXG48L2Rpdj5cIixcbiAgICAgICAgXCJldmVudHNcIjogW10sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7fVwiLFxuICAgICAgICBcInN0eWxlXCI6IFwiLnByaXZhY3lQb2xpY3l7XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmZvbnQtc2l6ZTogMTFweDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiVGVybXNBbmRTZXJ2aWNlXCIsXG4gICAgICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzcz1cXFwicHJpdmFjeVBvbGljeVxcXCI+XFxue3N0YXRlLnZhcmlhbnR9XFxuPC9kaXY+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtdLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwiVGhpcyBzaXRlIGlzIHByb3RlY3RlZCBieSByZUNBUFRDSEEgYW5kIHRoZSBHb29nbGUgUHJpdmFjeSBQb2xpY3kgYW5kIFRlcm1zIG9mIFNlcnZpY2UgYXBwbHkuXFxcIn1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi5wcml2YWN5UG9saWN5e1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5mb250LXNpemU6IDExcHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW07XFxuICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIkZvcm1cIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8Zm9ybSBjbGFzc05hbWU9XFxcInZzZnJtXFxcIj5cXG48L2Zvcm0+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtdLFxuICAgICAgICBcInN0YXRlXCI6IFwie31cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi52c2ZybXtcXG5oZWlnaHQ6NDAwcHg7XFxud2lkdGg6NDAwcHg7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiRW1haWxJbnB1dFwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxzcGFuIGNsYXNzTmFtZT1cXFwiZW1haWxJbnB1dFxcXCI+XFxuPGlucHV0IGlkPVxcXCJpbnB1dFxcXCIgY2xhc3NOYW1lPVxcXCJlbWFpbFxcXCIgdHlwZT1cXFwiZW1haWxcXFwiIHZhbHVlPXtzdGF0ZS5lbWFpbH0gcGxhY2Vob2xkZXI9XFxcIkVtYWlsIEFkZHJlc3MgKlxcXCIvPlxcbjwvc3Bhbj5cIixcbiAgICAgICAgXCJldmVudHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9uQ2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUuZW1haWwgPSBlLnRhcmdldC52YWx1ZVwiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaGFibGVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJpZFwiOiBcImlucHV0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJzdGF0ZVwiOiBcInt9XCIsXG4gICAgICAgIFwic3R5bGVcIjogXCIuZW1haWxJbnB1dCAuZW1haWx7XFxucGFkZGluZzogLjc1cmVtO1xcbmJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTtcXG4gICAgYm94LXNoYWRvdzogbm9uZTtcXG5cXG59XCIsXG4gICAgICAgIFwiY29uZmlnXCI6IFwie31cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJSZXNldFBhc3N3b3JkRm9ybVwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxmb3JtPjxUZXJtc0FuZFNlcnZpY2U+PC9UZXJtc0FuZFNlcnZpY2U+PEVtYWlsSW5wdXQ+PC9FbWFpbElucHV0PjxTdWJtaXRCdXR0b24+PC9TdWJtaXRCdXR0b24+PENhbmNlbEJ1dHRvbj48L0NhbmNlbEJ1dHRvbj48VGVybXNBbmRTZXJ2aWNlPjxQcml2YWN5QW5kUG9saWN5PjwvUHJpdmFjeUFuZFBvbGljeT48L1Rlcm1zQW5kU2VydmljZT5cXG48L2Zvcm0+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtdLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJ2YXJpYW50XFxcIjpcXFwidGV4dFxcXCJ9XCIsXG4gICAgICAgIFwic3R5bGVcIjogXCJmb3Jte1xcbmhlaWdodDo0MDBweDt9XCIsXG4gICAgICAgIFwiY29uZmlnXCI6IFwie31cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJQYWdlXCIsXG4gICAgICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInBhZ2VcXFwiPjxGb3Jnb3RQYXNzd29yZD48L0ZvcmdvdFBhc3N3b3JkPjxSZXNldFBhc3N3b3JkTW9kYWw+PC9SZXNldFBhc3N3b3JkTW9kYWw+PC9kaXY+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvbkNsb3NlTW9kYWxcIixcbiAgICAgICAgICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5SZXNldFBhc3N3b3JkTW9kYWwgPSBbXTtcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJWYXJpYW50TW9kYWxcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvbkNsb3NlXCIsXG4gICAgICAgICAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUuUmVzZXRQYXNzd29yZE1vZGFsID0gW107XCIsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiUmVzZXRQYXNzd29yZE1vZGFsXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib25QYXNzd29yZEZvcmdvdHRlblwiLFxuICAgICAgICAgICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLlJlc2V0UGFzc3dvcmRNb2RhbCA9W3t0aXRsZTogXFxcIkZvcmdvdCBQYXNzd29yZFxcXCIsXFxcImZvb3RlclxcXCI6IFxcXCJDb3B5cmlndHNcXFwiLFxcXCJzaG93XFxcIjogXFxcInNkXFxcIn1dXCIsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiRm9yZ290UGFzc3dvcmRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJzaG93TW9kYWxcXFwiOmZhbHNlLFxcXCJsaXN0XFxcIjpbMSwyLDMsNCw1XSxcXFwiUmVzZXRQYXNzd29yZE1vZGFsXFxcIjpbXX1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi5wYWdle1xcbmhlaWdodDogNzAwcHg7XFxud2lkdGg6IDUwMHB4O1xcblxcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7XFxcIlZhcmlhbnRNb2RhbFxcXCI6e1xcXCJzaG93SGlkZVByb3BcXFwiOlxcXCJzaG93TW9kYWxcXFwiLFxcXCJvdmVycmlkZVxcXCI6ZmFsc2V9LFxcXCJGb3Jnb3RQYXNzd29yZEJ1dHRvblxcXCI6e1xcXCJzaG93SGlkZVByb3BcXFwiOlxcXCJcXFwiLFxcXCJvdmVycmlkZVxcXCI6ZmFsc2V9LFxcXCJGb3Jnb3RQYXNzd29yZFxcXCI6e1xcXCJzaG93SGlkZVByb3BcXFwiOlxcXCJcXFwiLFxcXCJvdmVycmlkZVxcXCI6ZmFsc2UsXFxcInJlbmRlckxpc3RQcm9wXFxcIjpcXFwiXFxcIn0sXFxcIlJlc2V0UGFzc3dvcmRNb2RhbFxcXCI6e1xcXCJzaG93SGlkZVByb3BcXFwiOlxcXCJzaG93TW9kYWxcXFwiLFxcXCJvdmVycmlkZVxcXCI6dHJ1ZSxcXFwicmVuZGVyTGlzdFByb3BcXFwiOlxcXCJcXFwifX1cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJSZXNldFBhc3N3b3JkTW9kYWxcIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCI+XFxuPGhlYWRlcj5cXG4gIDxoMz57c3RhdGUudGl0bGV9PC9oMz5cXG4gICAgPGJ1dHRvbiBpZD1cXFwiY2xvc2VcXFwiIGNsYXNzTmFtZT1cXFwiY2xvc2VCdXR0b25cXFwiPng8L2J1dHRvbj5cXG48L2hlYWRlcj5cXG48c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudFxcXCI+PFJlc2V0UGFzc3dvcmRGb3JtPjwvUmVzZXRQYXNzd29yZEZvcm0+XFxuPC9zZWN0aW9uPlxcbjxmb290ZXI+e3N0YXRlLmZvb3Rlcn08L2Zvb3Rlcj5cXG48L2Rpdj5cIixcbiAgICAgICAgXCJldmVudHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5zaG93ID0gXFxcInNkXFxcIjtcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIm9uQ2xvc2VcIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiY2xvc2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJ0aXRsZVxcXCI6XFxcIkZvcmdvdCBQYXNzd29yZFxcXCIsXFxcImZvb3RlclxcXCI6XFxcIkNvcHlyaWd0c1xcXCJ9XCIsXG4gICAgICAgIFwic3R5bGVcIjogXCIubW9kYWx7XFxuICB3aWR0aDo0MDBweDtcXG4gIGZvbnQtc2l6ZToyMnB4O1xcbiAgcG9zaXRpb246cmVsYXRpdmU7XFxuYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuY29sb3I6IGJsYWNrO1xcbiAgZm9udC1mYW1pbHk6IEJlbnRvblNhbnNMaWdodCxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OjQwMDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuXFxufVxcblxcbi5tb2RhbCBoM3tcXG4gIHBhZGRpbmc6MXJlbTtcXG5mb250LXNpemU6MjZweDtcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNvbnRlbnR7XFxucGFkZGluZzoxcmVtO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCBmb290ZXJ7XFxucGFkZGluZzoxcmVtO1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG4ubW9kYWwgaGVhZGVye1xcbiAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubW9kYWwgLmNsb3NlQnV0dG9ue1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB0b3A6IDIwcHg7XFxufVxcblxcbi5tb2RhbCAuY29udGVudHtcXG4gICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcXG5mb250LXdlaWdodDogNDAwO1xcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfVxuXVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBzYW1wbGU6IHNhbXBsZVxufSIsImltcG9ydCB7ZG93bmxvYWR9IGZyb20gXCIuL2Rvd25sb2FkRmlsZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gemlwRmlsZXMgKGFycmF5KXtcbiAgICB2YXIgemlwID0gbmV3IEpTWmlwKCk7XG5cbiAgICAvLyBHZW5lcmF0ZSBhIGRpcmVjdG9yeSB3aXRoaW4gdGhlIFppcCBmaWxlIHN0cnVjdHVyZVxuICAgIHZhciBzcmMgPSB6aXAuZm9sZGVyKFwic3JjXCIpO1xuXG4gICAgYXJyYXkuZm9yRWFjaChpdGVtPT57XG4gICAgICAgIHNyYy5maWxlKGl0ZW0ubmFtZSwgaXRlbS5jb250ZW50KVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIHRoZSB6aXAgZmlsZSBhc3luY2hyb25vdXNseVxuICAgIHppcC5nZW5lcmF0ZUFzeW5jKHt0eXBlOlwiYmxvYlwifSlcbiAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgIC8vIEZvcmNlIGRvd24gb2YgdGhlIFppcCBmaWxlXG4gICAgICAgIGRvd25sb2FkKGNvbnRlbnQsIFwiYXJjaGl2ZS56aXBcIik7XG4gICAgfSk7XG59IiwiaW1wb3J0IHvCoGdldE5lc3RlZENvbXBvbmVudHMgfSBmcm9tIFwiLi4vLi4vUnVudGltZVwiO1xuaW1wb3J0IHsgY29udmVydFRvUmVhY3QgfSBmcm9tIFwiLi4vLi4vQ29kZUdlbmVyYXRvci9SZWFjdFwiO1xuaW1wb3J0IHsgZG93bmxvYWRGaWxlIH0gZnJvbSBcIi4uLy4uL0xpYnJhcmllcy9kb3dubG9hZEZpbGVcIjtcbmltcG9ydCB7IHJlYWREYXRhIH0gZnJvbSBcIi4uLy4uL1N0b3JhZ2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydE5XQihjb21wb25lbnROYW1lKSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHNlbGVjdGVkQ29tcG9uZW50KTtcblxuICAgIGxldCB1bmlxdWVDb21wb25lbnRzID0gWy4uLm5ldyBTZXQobmVzdGVkQ29tcG9uZW50cy5tYXAoY29tPT5jb20ubmFtZSkpXS5tYXAobmFtZT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PW5hbWUpXG4gICAgfSlcbiAgICBjb25zdCByZW1vdmVQYXJhbnRoZXNpcyA9IChjb21wb25lbnQpPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnQucmVwbGFjZShcIihcIixcIlwiKS5yZXBsYWNlKFwifSlcIixcIn1cIilcbiAgICB9XG5cbiAgICBsZXQgaGVhZGVySW1wb3J0cyA9IGBpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcXG5gO1xuXG4gICAgd2luZG93LkV4cG9ydE5XQiA9IHRydWU7XG5cbiAgICBsZXQgY29tcG9uZW50U3RyaW5ncyA9IHVuaXF1ZUNvbXBvbmVudHMubWFwKGNvbnZlcnRUb1JlYWN0KS5tYXAocmVtb3ZlUGFyYW50aGVzaXMpO1xuICAgIGNvbXBvbmVudFN0cmluZ3NbMF0gPSBcImV4cG9ydCBkZWZhdWx0IFwiKyBjb21wb25lbnRTdHJpbmdzWzBdO1xuXG4gICAgbGV0IFJlYWN0Q2xhc3NDb21wb25lbnRTdHJpbmcgPSBoZWFkZXJJbXBvcnRzICsgY29tcG9uZW50U3RyaW5ncy5yZXZlcnNlKCkuam9pbihcIlxcblwiKTtcbiAgICBjb25zb2xlLmxvZyhSZWFjdENsYXNzQ29tcG9uZW50U3RyaW5nKTtcblxuICAgIHdpbmRvdy5FeHBvcnROV0IgPSBmYWxzZTtcblxuICAgIGRvd25sb2FkRmlsZShgJHtjb21wb25lbnROYW1lfS5qc2AsUmVhY3RDbGFzc0NvbXBvbmVudFN0cmluZyApO1xufSIsImltcG9ydCB7wqBnZXROZXN0ZWRDb21wb25lbnRzIH0gZnJvbSBcIi4uLy4uL1J1bnRpbWVcIjtcbmltcG9ydCB7IGNvbnZlcnRUb1JlYWN0IH0gZnJvbSBcIi4uLy4uL0NvZGVHZW5lcmF0b3IvUmVhY3RcIjtcbmltcG9ydCB7IHJlYWREYXRhIH0gZnJvbSBcIi4uLy4uL1N0b3JhZ2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydFNpbXBsZShjb21wb25lbnROYW1lKSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50PT5jb21wb25lbnQubmFtZS5pbmNsdWRlcyhjb21wb25lbnROYW1lKSk7XG4gICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHNlbGVjdGVkQ29tcG9uZW50KTtcblxuICAgIGxldCB1bmlxdWVDb21wb25lbnRzID0gWy4uLm5ldyBTZXQobmVzdGVkQ29tcG9uZW50cy5tYXAoY29tPT5jb20ubmFtZSkpXS5tYXAobmFtZT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PW5hbWUpXG4gICAgfSlcbiAgICBjb25zdCByZW1vdmVQYXJhbnRoZXNpcyA9IChjb21wb25lbnQpPT57XG4gICAgICAgIHJldHVybiBjb21wb25lbnQucmVwbGFjZShcIihcIixcIlwiKS5yZXBsYWNlKFwifSlcIixcIn1cIilcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdW5pcXVlQ29tcG9uZW50cy5tYXAoY29udmVydFRvUmVhY3QpLm1hcChyZW1vdmVQYXJhbnRoZXNpcykucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgY29uc29sZS5sb2cocmVzdWx0KTtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zZWxlY3RlZCwgLmdyZWVuIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW47XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuXFxuLmJhY2tncm91bmQge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzMzMzO1xcbn1cXG5cXG4uY29tcG9uZW50IHtcXG4gICAgZGlzcGxheTpmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5jb21wb25lbnQgLmNvbXBvbmVudE5hbWV7XFxuICAgIHBhZGRpbmc6N3B4O1xcbn1cXG5cXG4uaGlkZUFkZGl0aW9uYWxzIHNwYW46bm90KC5jb21wb25lbnROYW1lKXtcXG4gICAgZGlzcGxheTpub25lO1xcbn1cXG5cXG4uaGlkZUFkZGl0aW9uYWxzIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQge3dyaXRlRGF0YX0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gb25EZWxldGVDb21wb25lbnQoZXZlbnQpIHtcbiAgICBcbiAgICAvLyBzdG9wIGV2ZW50IHByb3BhZ2F0aW9uLiBlbHNlIG9uU2VsZWN0aW9uQ2hhbmdlIGdldHMgcmUgdHJpZ2dlcmVkLlxuICAgIFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBjb21wb25lbnROYW1lID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5pbm5lclRleHQuc3BsaXQoXCJcXG5cIilbMF07XG5cbiAgICBpZih0aGlzLnN0YXRlLmNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09Y29tcG9uZW50TmFtZSkubGVuZ3RoPDEpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEdldCBhbGwgdGhlIGVsZW1lbnRzXG4gICAgbGV0IGNvbXBvbmVudHMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuY29tcG9uZW50cyk7XG4gICAgXG4gICAgLy8gRmluZCB0aGUgaW5kZXggb2YgZWxlbWVudCB0byBiZSBkZWxldGVkLlxuICAgIGxldCBpbmRleCA9IGNvbXBvbmVudHMuZmluZEluZGV4KGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1jb21wb25lbnROYW1lKVxuXG4gICAgLy8gUmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gdGhlIGxpc3RcbiAgICBjb21wb25lbnRzLnNwbGljZShpbmRleCwxKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgc3RhdGUgd2l0aCBuZXcgZWxlbWVudHMuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHNcbiAgICB9KVxuXG4gICAgLy8gUGVyc2lzdCB0aGUgY2hhbmdlcy5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgY29tcG9uZW50cylcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gb25EZWxldGVGb2xkZXIoVFlQRSwgZm9sZGVyTmFtZSl7XG4gICAgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgIGNhc2UgXCJGT0xERVJcIjpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgICAgY2FzZSBcIkZPTERFUl9BTkRfQ09OVEVOVFNcIjpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJDT05URU5UU1wiOlxuICAgICAgICAgICAgbGV0IGZvbGRlcnMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuZm9sZGVycylcbiAgICAgICAgICAgIGxldCBmb2xkZXJUb0RlbGV0ZSA9IGZvbGRlcnMuZmluZChmb2xkZXI9PiBmb2xkZXIubmFtZT09PWZvbGRlck5hbWUpO1xuICAgICAgICAgICAgbGV0IG5vRm9sZGVyID0gZm9sZGVycy5maW5kKGZvbGRlcj0+IGZvbGRlci50eXBlPT09XCJub0ZvbGRlclwiKTtcbiAgICAgICAgICAgIC8vIFB1c2ggY29udGVudHMgdG8gXCJub0ZvbGRlclwiLlxuICAgICAgICAgICAgbm9Gb2xkZXIuY29udGVudHMucHVzaCguLi5mb2xkZXJUb0RlbGV0ZS5jb250ZW50cyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERlbGV0ZSBmb2xkZXIuXG4gICAgICAgICAgICAgICAgLy8gIGZpbmQgaW5kZXguXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBmb2xkZXJzLmZpbmRJbmRleChmb2xkZXIgPT4gZm9sZGVyLm5hbWU9PT1mb2xkZXJOYW1lKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGl0ZW0uXG4gICAgICAgICAgICBmb2xkZXJzLnNwbGljZShpbmRleCwxKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0ZS5cbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Gb2xkZXJzVXBkYXRlKGZvbGRlcnMpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59IiwiaW1wb3J0IHtzYW1wbGV9IGZyb20gXCIuL1NhbXBsZVwiO1xuXG5mdW5jdGlvbiBwdXNoSGlzdG9yeShjb21wb25lbnRzKXtcblxuICAgIHdpbmRvdy5lZGl0b3JIaXN0b3J5ID0gcmVhZERhdGEoXCJ1aS1lZGl0b3ItaGlzdG9yeVwiKTtcbiAgICBlZGl0b3JIaXN0b3J5LnB1c2goY29tcG9uZW50cyk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1aS1lZGl0b3ItaGlzdG9yeVwiLEpTT04uc3RyaW5naWZ5KGVkaXRvckhpc3RvcnkpICk7XG59XG5cbi8vIElmIGVtcHR5LCByZXR1cm4gZW1wdHkgYXJyYXkuXG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRGF0YShrZXkpe1xuXG4gICAgaWYoa2V5ID09PVwidWktZWRpdG9yXCIpe1xuICAgICAgICBpZighd2luZG93LmNvbXBvbmVudHMgKXtcbiAgICAgICAgICAgIHdpbmRvdy5jb21wb25lbnRzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKSB8fCBzYW1wbGU7XG4gICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHdpbmRvdy5jb21wb25lbnRzKSk7XG4gICAgfVxuICAgIGlmKGtleT09PVwidWktZWRpdG9yLWhpc3RvcnlcIil7XG4gICAgICAgIGxldCBoaXN0b3J5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgXG4gICAgICAgIGlmKGhpc3RvcnkpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShoaXN0b3J5KTtcbiAgICB9XG4gICAgaWYoa2V5ID09PVwiZm9sZGVyc1wiKXtcbiAgICAgICAgbGV0IGZvbGRlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpO1xuXG4gICAgICAgIGxldCBjb21wb25lbnROYW1lcyA9IHdpbmRvdy5jb21wb25lbnRzLm1hcChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lKTtcbiAgICAgICAgaWYoZm9sZGVycyA9PT0gbnVsbCl7XG4gICAgICAgICAgICByZXR1cm4gIFt7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJub0ZvbGRlclwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBjb21wb25lbnROYW1lcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIHN0YXR1czpcIm9wZW5cIlxuICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCwgcHVzaCBpdCBpbnRvIG5vRm9sZGVyLlxuICAgICAgICBsZXQgY29tcG9uZW50V2l0aG91dFBhcmVudEZvbGRlciA9IGNvbXBvbmVudE5hbWVzLmZpbHRlcihjb21wb25lbnROYW1lPT57XG4gICAgICAgICAgICByZXR1cm4gZm9sZGVycy5ldmVyeShmb2xkZXI9PmZvbGRlci5jb250ZW50cy5ldmVyeShjb250ZW50ID0+ICBjb250ZW50ICE9PSBjb21wb25lbnROYW1lICkpXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbm9Gb2xkZXIgPSBmb2xkZXJzLmZpbmQoZm9sZGVyPT5mb2xkZXIudHlwZT09PVwibm9Gb2xkZXJcIik7XG4gICAgICAgIG5vRm9sZGVyLmNvbnRlbnRzLnB1c2goLi4uY29tcG9uZW50V2l0aG91dFBhcmVudEZvbGRlcik7XG4gICAgICAgIHJldHVybiBmb2xkZXJzO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVEYXRhKGtleSwgY29tcG9uZW50cywgbm9QdXNoKXtcblxuICAgIGlmKGtleT09XCJmb2xkZXJzXCIpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIndyaXRpbmcgZm9sZGVyc1wiKVxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHMpKTtcbiAgICB9XG4gICAgaWYoa2V5PT1cInVpLWVkaXRvclwiKXtcbiAgICAgICAgY29uc29sZS5sb2coXCJXUklURVwiKVxuICAgICAgICB3aW5kb3cuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50cykpO1xuICAgICAgICBpZighbm9QdXNoKXtcbiAgICAgICAgICAgIHB1c2hIaXN0b3J5KGNvbXBvbmVudHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZENvbXBvbmVudChjb21wb25lbnROYW1lKXtcblxuICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoXCJ1aS1lZGl0b3JcIik7XG4gICAgaWYoIWNvbXBvbmVudHMpe1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1jb21wb25lbnROYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQ29tcG9uZW50KHBhcmVudCkge1xuXG4gICAgaWYoIUFycmF5LmlzQXJyYXkocGFyZW50KSAmJiBwYXJlbnQubmFtZSl7XG4gICAgICAgIGxldCBjb21wb25lbnRzID0gcmVhZERhdGEoIFwidWktZWRpdG9yXCIpO1xuICAgICAgICBsZXQgaW5kZXggPSBjb21wb25lbnRzLmZpbmRJbmRleChjb21wPT5jb21wLm5hbWUgPT09IHBhcmVudC5uYW1lKTtcbiAgICAgICAgY29tcG9uZW50c1tpbmRleF0gPSBwYXJlbnQ7XG4gICAgICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBjb21wb25lbnRzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BIaXN0b3J5KCl7XG4gICAgXG4gICAgbGV0IGVkaXRvckhpc3RvcnkgPSByZWFkRGF0YShcInVpLWVkaXRvci1oaXN0b3J5XCIpO1xuICAgIGlmKCFlZGl0b3JIaXN0b3J5KXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsYXN0SXRlbSA9IGVkaXRvckhpc3RvcnkucG9wKCk7XG4gICAgXG4gICAgaWYoIWVkaXRvckhpc3Rvcnkpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yLWhpc3RvcnlcIiwgZWRpdG9ySGlzdG9yeSwgdHJ1ZSk7XG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgbGFzdEl0ZW0sIHRydWUpO1xufSIsImxldCBzYW1wbGUgPSBbXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJGb3Jnb3RQYXNzd29yZFwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3NOYW1lPVxcXCJ2c0J1dHRvblxcXCI+PGJ1dHRvbiBpZD1cXFwiZjEyM1xcXCI+Rm9yZ290IFBhc3N3b3JkPC9idXR0b24+PC9kaXY+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvbkNsaWNrXCIsXG4gICAgICAgICAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUuc2hvd1wiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwib25QYXNzd29yZEZvcmdvdHRlblwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJmMTIzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJzdGF0ZVwiOiBcIntcXFwic2hvd1xcXCI6XFxcImZhbHNlXFxcIn1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi52c0J1dHRvbntcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XFxuXFxuXFxuLnZzQnV0dG9uIGJ1dHRvbntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjZWY1Zjk2O1xcbmJvcmRlcjogMXB4IHNvbGlkO1xcbn1cXG5cXG4udnNCdXR0b24gYnV0dG9uOmhvdmVye1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG59XCIsXG4gICAgICAgIFwiY29uZmlnXCI6IFwie31cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJNb2RhbFwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsXFxcIj5cXG48aGVhZGVyPlxcbiAgPGgzPkZvcmdvdCBQYXNzd29yZDwvaDM+XFxuICAgIDxidXR0b24gY2xhc3NOYW1lPVxcXCJjbG9zZUJ1dHRvblxcXCIgaWQ9XFxcInhcXFwiPng8L2J1dHRvbj5cXG48L2hlYWRlcj5cXG48c2VjdGlvbiBjbGFzcz1cXFwiY29udGVudFxcXCI+PFByaXZhY3lBbmRQb2xpY3k+PC9Qcml2YWN5QW5kUG9saWN5PlxcbiBcXG48L3NlY3Rpb24+XFxuPGZvb3Rlcj5mb290ZXI8L2Zvb3Rlcj5cXG48L2Rpdj5cIixcbiAgICAgICAgXCJldmVudHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9uQ2xpY2tcIixcbiAgICAgICAgICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5uYW1lPVxcXCJcXFwiO1wiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwib25DbG9zZU1vZGFsXCIsXG4gICAgICAgICAgICAgICAgXCJpZFwiOiBcInhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInN0YXRlXCI6IFwie31cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi5tb2RhbHtcXG4gIHdpZHRoOjQwMHB4O1xcbiAgZm9udC1zaXplOjIycHg7XFxuICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG5iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG5jb2xvcjogYmxhY2s7XFxuICBmb250LWZhbWlseTogQmVudG9uU2Fuc0xpZ2h0LEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6NDAwO1xcbiAgICBsaW5lLWhlaWdodDogMTdweDtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wNGVtO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdDtcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXG5cXG59XFxuXFxuLm1vZGFsIGgze1xcbiAgcGFkZGluZzoxcmVtO1xcbmZvbnQtc2l6ZToyNnB4O1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCAuY29udGVudHtcXG5wYWRkaW5nOjFyZW07XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLm1vZGFsIGZvb3RlcntcXG5wYWRkaW5nOjFyZW07XFxuICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcbi5tb2RhbCBoZWFkZXJ7XFxuICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCAuY2xvc2VCdXR0b257XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIHRvcDogMjBweDtcXG59XFxuXFxuLm1vZGFsIC5jb250ZW50e1xcbiAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQ2FuY2VsQnV0dG9uXCIsXG4gICAgICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInZzQnV0dG9uXFxcIj48YnV0dG9uPntzdGF0ZS5jYW5jZWxCdXR0b259PC9idXR0b24+PC9kaXY+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtdLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJjYW5jZWxCdXR0b25cXFwiOlxcXCJDYW5jZWxcXFwifVwiLFxuICAgICAgICBcInN0eWxlXCI6IFwiLnZzQnV0dG9ue1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5jb2xvcjogcmdiKDAsIDAsIDApO1xcbn1cXG5cXG5cXG4udnNCdXR0b24gYnV0dG9ue1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6ICNlZjVmOTY7XFxuYm9yZGVyOiAxcHggc29saWQ7XFxucGFkZGluZzogLjVyZW0gMnJlbTtcXG59XFxuXFxuLnZzQnV0dG9uIGJ1dHRvbjpob3ZlcntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiU3VibWl0QnV0dG9uXCIsXG4gICAgICAgIFwibWFya3VwXCI6IFwiPGRpdiBjbGFzc05hbWU9XFxcInZzQnV0dG9uXFxcIj48YnV0dG9uPntzdGF0ZS5zdWJtaXRCdXR0b259PC9idXR0b24+PC9kaXY+XCIsXG4gICAgICAgIFwiZXZlbnRzXCI6IFtdLFxuICAgICAgICBcInN0YXRlXCI6IFwie1xcXCJzdWJtaXRCdXR0b25cXFwiOlxcXCJTdWJtaXRcXFwifVwiLFxuICAgICAgICBcInN0eWxlXCI6IFwiLnZzQnV0dG9ue1xcbmZvbnQtZmFtaWx5OiBCZW50b25TYW5zQm9vayxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcXG5jb2xvcjogcmdiKDAsIDAsIDApO1xcbn1cXG5cXG5cXG4udnNCdXR0b24gYnV0dG9ue1xcbmJvcmRlci1jb2xvcjogI2JmMjE1ZDtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQ6ICNlZjVmOTY7XFxuYm9yZGVyOiAxcHggc29saWQ7XFxucGFkZGluZzogLjVyZW0gMnJlbTtcXG59XFxuXFxuLnZzQnV0dG9uIGJ1dHRvbjpob3ZlcntcXG5ib3JkZXItY29sb3I6ICNiZjIxNWQ7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiUHJpdmFjeUFuZFBvbGljeVwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3M9XFxcInByaXZhY3lQb2xpY3lcXFwiPlxcbiAgUGxlYXNlIGVudGVyIHRoZSBlbWFpbCBhZGRyZXNzIHlvdSB1c2VkIHRvIGNyZWF0ZSB5b3VyIGFjY291bnQgYW5kIHdlIHdpbGwgc2VuZCB5b3UgYSBsaW5rIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuIFNlZSBQcml2YWN5IFBvbGljeVxcbjwvZGl2PlwiLFxuICAgICAgICBcImV2ZW50c1wiOiBbXSxcbiAgICAgICAgXCJzdGF0ZVwiOiBcInt9XCIsXG4gICAgICAgIFwic3R5bGVcIjogXCIucHJpdmFjeVBvbGljeXtcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuZm9udC1zaXplOiAxMXB4O1xcbiAgICBsaW5lLWhlaWdodDogMTdweDtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wNGVtO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdDtcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XCIsXG4gICAgICAgIFwiY29uZmlnXCI6IFwie31cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJUZXJtc0FuZFNlcnZpY2VcIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzPVxcXCJwcml2YWN5UG9saWN5XFxcIj5cXG57c3RhdGUudmFyaWFudH1cXG48L2Rpdj5cIixcbiAgICAgICAgXCJldmVudHNcIjogW10sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7XFxcInZhcmlhbnRcXFwiOlxcXCJUaGlzIHNpdGUgaXMgcHJvdGVjdGVkIGJ5IHJlQ0FQVENIQSBhbmQgdGhlIEdvb2dsZSBQcml2YWN5IFBvbGljeSBhbmQgVGVybXMgb2YgU2VydmljZSBhcHBseS5cXFwifVwiLFxuICAgICAgICBcInN0eWxlXCI6IFwiLnByaXZhY3lQb2xpY3l7XFxuZm9udC1mYW1pbHk6IEJlbnRvblNhbnNCb29rLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbmZvbnQtc2l6ZTogMTFweDtcXG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiRm9ybVwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxmb3JtIGNsYXNzTmFtZT1cXFwidnNmcm1cXFwiPlxcbjwvZm9ybT5cIixcbiAgICAgICAgXCJldmVudHNcIjogW10sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7fVwiLFxuICAgICAgICBcInN0eWxlXCI6IFwiLnZzZnJte1xcbmhlaWdodDo0MDBweDtcXG53aWR0aDo0MDBweDtcXG59XCIsXG4gICAgICAgIFwiY29uZmlnXCI6IFwie31cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIjogXCJFbWFpbElucHV0XCIsXG4gICAgICAgIFwibWFya3VwXCI6IFwiPHNwYW4gY2xhc3NOYW1lPVxcXCJlbWFpbElucHV0XFxcIj5cXG48aW5wdXQgaWQ9XFxcImlucHV0XFxcIiBjbGFzc05hbWU9XFxcImVtYWlsXFxcIiB0eXBlPVxcXCJlbWFpbFxcXCIgdmFsdWU9e3N0YXRlLmVtYWlsfSBwbGFjZWhvbGRlcj1cXFwiRW1haWwgQWRkcmVzcyAqXFxcIi8+XFxuPC9zcGFuPlwiLFxuICAgICAgICBcImV2ZW50c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib25DaGFuZ2VcIixcbiAgICAgICAgICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5lbWFpbCA9IGUudGFyZ2V0LnZhbHVlXCIsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoYWJsZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaE5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiaW5wdXRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInN0YXRlXCI6IFwie31cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi5lbWFpbElucHV0IC5lbWFpbHtcXG5wYWRkaW5nOiAuNzVyZW07XFxuYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcXG5mb250LWZhbWlseTogQmVudG9uU2Fuc0Jvb2ssSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYm9yZGVyLXJhZGl1czogMDtcXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lO1xcbiAgICBib3gtc2hhZG93OiBub25lO1xcblxcbn1cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlJlc2V0UGFzc3dvcmRGb3JtXCIsXG4gICAgICAgIFwibWFya3VwXCI6IFwiPGZvcm0+PFRlcm1zQW5kU2VydmljZT48L1Rlcm1zQW5kU2VydmljZT48RW1haWxJbnB1dD48L0VtYWlsSW5wdXQ+PFN1Ym1pdEJ1dHRvbj48L1N1Ym1pdEJ1dHRvbj48Q2FuY2VsQnV0dG9uPjwvQ2FuY2VsQnV0dG9uPjxUZXJtc0FuZFNlcnZpY2U+PFByaXZhY3lBbmRQb2xpY3k+PC9Qcml2YWN5QW5kUG9saWN5PjwvVGVybXNBbmRTZXJ2aWNlPlxcbjwvZm9ybT5cIixcbiAgICAgICAgXCJldmVudHNcIjogW10sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7XFxcInZhcmlhbnRcXFwiOlxcXCJ0ZXh0XFxcIn1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcImZvcm17XFxuaGVpZ2h0OjQwMHB4O31cIixcbiAgICAgICAgXCJjb25maWdcIjogXCJ7fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlBhZ2VcIixcbiAgICAgICAgXCJtYXJrdXBcIjogXCI8ZGl2IGNsYXNzTmFtZT1cXFwicGFnZVxcXCI+PEZvcmdvdFBhc3N3b3JkPjwvRm9yZ290UGFzc3dvcmQ+PFJlc2V0UGFzc3dvcmRNb2RhbD48L1Jlc2V0UGFzc3dvcmRNb2RhbD48L2Rpdj5cIixcbiAgICAgICAgXCJldmVudHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9uQ2xvc2VNb2RhbFwiLFxuICAgICAgICAgICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLlJlc2V0UGFzc3dvcmRNb2RhbCA9IFtdO1wiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaGFibGVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJpZFwiOiBcIlZhcmlhbnRNb2RhbFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9uQ2xvc2VcIixcbiAgICAgICAgICAgICAgICBcInJlZHVjZXJcIjogXCJzdGF0ZS5SZXNldFBhc3N3b3JkTW9kYWwgPSBbXTtcIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJSZXNldFBhc3N3b3JkTW9kYWxcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvblBhc3N3b3JkRm9yZ290dGVuXCIsXG4gICAgICAgICAgICAgICAgXCJyZWR1Y2VyXCI6IFwic3RhdGUuUmVzZXRQYXNzd29yZE1vZGFsID1be3RpdGxlOiBcXFwiRm9yZ290IFBhc3N3b3JkXFxcIixcXFwiZm9vdGVyXFxcIjogXFxcIkNvcHlyaWd0c1xcXCIsXFxcInNob3dcXFwiOiBcXFwic2RcXFwifV1cIixcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hhYmxlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJwdWJsaXNoTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJGb3Jnb3RQYXNzd29yZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7XFxcInNob3dNb2RhbFxcXCI6ZmFsc2UsXFxcImxpc3RcXFwiOlsxLDIsMyw0LDVdLFxcXCJSZXNldFBhc3N3b3JkTW9kYWxcXFwiOltdfVwiLFxuICAgICAgICBcInN0eWxlXCI6IFwiLnBhZ2V7XFxuaGVpZ2h0OiA3MDBweDtcXG53aWR0aDogNTAwcHg7XFxuXFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcIntcXFwiVmFyaWFudE1vZGFsXFxcIjp7XFxcInNob3dIaWRlUHJvcFxcXCI6XFxcInNob3dNb2RhbFxcXCIsXFxcIm92ZXJyaWRlXFxcIjpmYWxzZX0sXFxcIkZvcmdvdFBhc3N3b3JkQnV0dG9uXFxcIjp7XFxcInNob3dIaWRlUHJvcFxcXCI6XFxcIlxcXCIsXFxcIm92ZXJyaWRlXFxcIjpmYWxzZX0sXFxcIkZvcmdvdFBhc3N3b3JkXFxcIjp7XFxcInNob3dIaWRlUHJvcFxcXCI6XFxcIlxcXCIsXFxcIm92ZXJyaWRlXFxcIjpmYWxzZSxcXFwicmVuZGVyTGlzdFByb3BcXFwiOlxcXCJcXFwifSxcXFwiUmVzZXRQYXNzd29yZE1vZGFsXFxcIjp7XFxcInNob3dIaWRlUHJvcFxcXCI6XFxcInNob3dNb2RhbFxcXCIsXFxcIm92ZXJyaWRlXFxcIjp0cnVlLFxcXCJyZW5kZXJMaXN0UHJvcFxcXCI6XFxcIlxcXCJ9fVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlJlc2V0UGFzc3dvcmRNb2RhbFwiLFxuICAgICAgICBcIm1hcmt1cFwiOiBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsXFxcIj5cXG48aGVhZGVyPlxcbiAgPGgzPntzdGF0ZS50aXRsZX08L2gzPlxcbiAgICA8YnV0dG9uIGlkPVxcXCJjbG9zZVxcXCIgY2xhc3NOYW1lPVxcXCJjbG9zZUJ1dHRvblxcXCI+eDwvYnV0dG9uPlxcbjwvaGVhZGVyPlxcbjxzZWN0aW9uIGNsYXNzPVxcXCJjb250ZW50XFxcIj48UmVzZXRQYXNzd29yZEZvcm0+PC9SZXNldFBhc3N3b3JkRm9ybT5cXG48L3NlY3Rpb24+XFxuPGZvb3Rlcj57c3RhdGUuZm9vdGVyfTwvZm9vdGVyPlxcbjwvZGl2PlwiLFxuICAgICAgICBcImV2ZW50c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib25DbGlja1wiLFxuICAgICAgICAgICAgICAgIFwicmVkdWNlclwiOiBcInN0YXRlLnNob3cgPSBcXFwic2RcXFwiO1wiLFxuICAgICAgICAgICAgICAgIFwicHVibGlzaGFibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hOYW1lXCI6IFwib25DbG9zZVwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJjbG9zZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic3RhdGVcIjogXCJ7XFxcInRpdGxlXFxcIjpcXFwiRm9yZ290IFBhc3N3b3JkXFxcIixcXFwiZm9vdGVyXFxcIjpcXFwiQ29weXJpZ3RzXFxcIn1cIixcbiAgICAgICAgXCJzdHlsZVwiOiBcIi5tb2RhbHtcXG4gIHdpZHRoOjQwMHB4O1xcbiAgZm9udC1zaXplOjIycHg7XFxuICBwb3NpdGlvbjpyZWxhdGl2ZTtcXG5iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG5jb2xvcjogYmxhY2s7XFxuICBmb250LWZhbWlseTogQmVudG9uU2Fuc0xpZ2h0LEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6NDAwO1xcbiAgICBsaW5lLWhlaWdodDogMTdweDtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wNGVtO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdDtcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXG5cXG59XFxuXFxuLm1vZGFsIGgze1xcbiAgcGFkZGluZzoxcmVtO1xcbmZvbnQtc2l6ZToyNnB4O1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCAuY29udGVudHtcXG5wYWRkaW5nOjFyZW07XFxuZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLm1vZGFsIGZvb3RlcntcXG5wYWRkaW5nOjFyZW07XFxuICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcbi5tb2RhbCBoZWFkZXJ7XFxuICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5tb2RhbCAuY2xvc2VCdXR0b257XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIHRvcDogMjBweDtcXG59XFxuXFxuLm1vZGFsIC5jb250ZW50e1xcbiAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbmZvbnQtd2VpZ2h0OiA0MDA7XFxufVwiLFxuICAgICAgICBcImNvbmZpZ1wiOiBcInt9XCJcbiAgICB9XG5dXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNhbXBsZTogc2FtcGxlXG59IiwiXG4vLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbmltcG9ydCB7cmVhZENvbXBvbmVudH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmltcG9ydCB7VW5Db250cm9sbGVkIGFzIENvZGVNaXJyb3J9IGZyb20gJ3JlYWN0LWNvZGVtaXJyb3IyJztcblxuLyoqXG4gKiBTaG93cyBDb25maWd1cmF0b3Igb24gc2VsZWN0IG9mIHZhbGlkIGNoaWxkIGNvbXBvbmVudCBuYW1lIGluIHRoZSBtYXJrdXAgYW5kIG1vdXNlT3V0IGZyb20gbWFya3VwXG4gKiBIaWRlcyBDb25maWd1cmF0b3Igb24gbW91c2VMZWF2ZSBmcm9tIHRoZSBlZGl0b3IuXG4gKi9cbmNsYXNzIEVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gcmVhZENvbXBvbmVudCh0aGlzLnByb3BzLm5hbWUpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuYW1lOiBjb21wb25lbnQ/IGNvbXBvbmVudC5uYW1lIDogXCJcIixcbiAgICAgICAgICAgIG1hcmt1cDogY29tcG9uZW50PyBjb21wb25lbnQubWFya3VwIDogXCJcIixcbiAgICAgICAgICAgIHN0YXRlOiBjb21wb25lbnQ/IGNvbXBvbmVudC5zdGF0ZSA6IFwiXCIsXG4gICAgICAgICAgICBzdHlsZTogY29tcG9uZW50PyBjb21wb25lbnQuc3R5bGUgOiBcIlwiXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBzYXZlRWxlbWVudCAoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25TYXZlKHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogdGhpcy5zdGF0ZS5tYXJrdXAsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5zdGF0ZS5zdHlsZSxcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLnN0YXRlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgbmFtZT0gdGhpcy5zdGF0ZS5uYW1lO1xuICAgICAgICBsZXQgbWFya3VwPSB0aGlzLnN0YXRlLm1hcmt1cDtcbiAgICAgICAgbGV0IHN0eWxlPSB0aGlzLnN0YXRlLnN0eWxlO1xuICAgICAgICBsZXQgc3RhdGU9IHRoaXMuc3RhdGUuc3RhdGU7XG5cbiAgICAgICAgLy8gVE9ETzogU2hvdWxkIHBhc3MgdGhlIGN1cnJlbnQgZGF0YS4gSW5zdGVhZCBvZiBhY2Nlc3NpbmcgaXQgZnJvbSBnbG9iYWxcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGVkaXRvci10YWJcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2F2ZUVsZW1lbnQuYmluZCh0aGlzKX0gaWQ9XCJzYXZlXCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNhdmVcIj48L2k+U2F2ZSAmIGNsb3NlPC9idXR0b24+ICAgIFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yIG5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5Db21wb25lbnQgTmFtZTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbnRlciBlbGVtZW50IG5hbWVcIiB2YWx1ZT17bmFtZX0gb25DaGFuZ2U9eyhlKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH19IGlkPVwiZWxlbWVudE5hbWVcIi8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3IgbWFya3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+Q29tcG9uZW50IE1hcmt1cDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENvZGVNaXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3Vyc29yPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bWFya3VwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInRleHQvamF2YXNjcmlwdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZTogXCJkYXJjdWxhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hcnRJbmRlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlZGl0b3IsIGRhdGEsIG1hcmt1cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmt1cDogbWFya3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXRvciBjc3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5Db21wb25lbnQgQ1NTPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29kZU1pcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9DdXJzb3I9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzdHlsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6IFwiZGFyY3VsYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0SW5kZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV3JhcHBpbmc6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZWRpdG9yLCBkYXRhLCBzdHlsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXRvciBzdGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkNvbXBvbmVudCBTdGF0ZTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENvZGVNaXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3Vyc29yPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c3RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwidGV4dC9qYXZhc2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOiBcImRhcmN1bGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFydEluZGVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdyYXBwaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGVkaXRvciwgZGF0YSwgc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZWRpdG9yLXRhYiB7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgYW5pbWF0aW9uOiBzbGlkZS11cCAwLjJzIGVhc2U7XFxufVxcblxcbkBrZXlmcmFtZXMgc2xpZGUtdXAge1xcbiAgICAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDIwcHgpO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG4gICAgfVxcbn1cXG5cXG5pbnB1dC5mb2xkZXI6cmVhZC1vbmx5IHtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcblxcbi5lZGl0b3ItdGFiIGJ1dHRvbiB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAtNSU7XFxuICAgIGxlZnQ6IDUwJTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxufVxcblxcbi5zaG93RWRpdG9ye1xcbiAgICBtYXJnaW4tYm90dG9tOjMwcHg7XFxufVxcblxcbi5lZGl0b3IubmFtZXtcXG4gICAgd2lkdGg6MTAlO1xcbn1cXG5cXG4uZWRpdG9ye1xcbiAgICB3aWR0aDogMjklO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIG1hcmdpbjogNXB4O1xcbiAgICBtYXJnaW4tdG9wOiAycHg7XFxufVxcblwiLCBcIlwiXSk7XG5cbiIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBEZXBlbmRlbmNpZXMuXG5cblxuLy8gQ29tcG9uZW50cy4gXG5cbmltcG9ydCBDb25maWd1cmF0b3IgZnJvbSBcIi4vQ29uZmlndXJhdG9yXCI7XG5pbXBvcnQgTm9kZXMgZnJvbSBcIi4uL3V0aWxpdGllcy9Db21wb25lbnRzL05vZGVzXCI7XG5pbXBvcnQgRXZlbnQgZnJvbSBcIi4vRXZlbnRcIjtcbmltcG9ydCBnZXRNZXNzYWdlcyBmcm9tIFwiLi9NZXNzYWdlc1wiO1xuXG4vLyBTdHlsZXMuXG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbi8vIFJlZHVjZXJzLlxuXG5pbXBvcnQgeyB1cGRhdGVFdmVudCwgc2VsZWN0ZWRUYWdDaGFuZ2VkLCBkZWxldGVFdmVudCwgdXBkYXRlQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuL1JlZHVjZXJcIjtcblxuXG4vLyBVdGlscy5cblxuaW1wb3J0IHsgZ2V0Tm9kZVRyZWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2dldC1ub2RlLXRyZWUuanNcIjtcbmltcG9ydCB7IHJlYWREYXRhIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmNsYXNzIEV2ZW50cyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRUYWcgPSB0aGlzLnByb3BzLnNlbGVjdGVkVGFnO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5wcm9wcy5jb21wb25lbnQ7XG5cbiAgICAgICAgLy8gUmVwb3J0IGlmIG5vIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb21wb25lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJjb250YWluZXIgZXZlbnRzLXRhYlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+RXZlbnRzPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxwPkxvb2tzIGxpa2UgeW91IGRvIG5vdCBoYXZlIGFueSBXZWIgY29tcG9uZW50IGNyZWF0ZWQuIFR5cGUgc29tZSBcImh0bWxcIiBvbiB0aGUgcmlnaHQgXCJFZGl0b3JcIiB0YWI8L3A+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXBvcnQgaWYgbm8gY29tcG9uZW50IGlzIHNlbGVjdGVkLlxuICAgICAgICBpZiAoY29tcG9uZW50Lm5hbWUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnN0YXRlLmNvbXBvbmVudHMubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImNvbnRhaW5lciBldmVudHMtdGFiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5FdmVudHM8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+TG9va3MgbGlrZSB5b3UgaGF2ZSBub3Qgc2VsZWN0ZWQgYW55IGNvbXBvbmVudC4gQ2xpY2sgb24gYW55IG9mIHRoZSBjb21wb25lbnQgaW4gdGhlIGxlZnQgcGFuZS48L3A+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IG5vZGVUcmVlID0gZ2V0Tm9kZVRyZWUoY29tcG9uZW50LCBjb21wb25lbnQubWFya3VwLCBjb21wb25lbnQuc3R5bGUsIEpTT04ucGFyc2UoY29tcG9uZW50LnN0YXRlKSwgY29tcG9uZW50LmV2ZW50cyk7XG5cbiAgICAgICAgLy8gUmVwb3J0IGVycm9yLlxuICAgICAgICBpZiAobm9kZVRyZWUuZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE1lc3NhZ2VzKG5vZGVUcmVlLmVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcG9ydCBlcnJvciBpZiBjb21wb25lbnQgaXMgbm90IFxuICAgICAgICBpZiAobm9kZVRyZWUucmVzdWx0ID09PSB1bmRlZmluZWQgJiYgdGhpcy5zdGF0ZS5jb21wb25lbnRzLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJjb250YWluZXIgZXZlbnRzLXRhYlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+RXZlbnRzPC9kaXY+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZWxlY3RlZFRhZyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRUYWcgfHwgXCJcIjtcbiAgICAgICAgbGV0IGV2ZW50c09mU2VsZWN0ZWRUYWcsIGNvbmZpZ3VyYXRvciwgZXZlbnROYW1lcyA9IFtdO1xuICAgICAgICAvLyBDaGVjayBpZiBpdCBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgICBpZiAoc2VsZWN0ZWRUYWcuaW5jbHVkZXMoXCJjaGlsZC1jb21wb25lbnQtXCIpKSB7XG4gICAgICAgICAgICAvLyBHZXQgbGlzdCBvZiBjb21wb25lbnRzLlxuICAgICAgICAgICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcblxuICAgICAgICAgICAgLy8gR2V0IGNoaWxkIGNvbXBvbmVudCBuYW1lIGZyb20gdGhlIHNlbGVjdGVkIHRhZy5cbiAgICAgICAgICAgIGxldCBjaGlsZENvbXBvbmVudE5hbWUgPSBzZWxlY3RlZFRhZy5zcGxpdChcImNoaWxkLWNvbXBvbmVudC1cIilbMV07XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNoaWxkIGNvbXBvbmVudCBmcm9tIHRoZSBsaXN0IG9mIGNvbXBvbmVudHMuXG4gICAgICAgICAgICBsZXQgY2hpbGRDb21wb25lbnQgPSBjb21wb25lbnRzLmZpbmQoY29tcG9uZW50ID0+IGNvbXBvbmVudC5uYW1lID09PSBjaGlsZENvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgICAgICAvLyBGaW5kIGV2ZW50cyB0aGF0IGFyZSBwdWJsaXNoYWJsZSBmcm9tIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAgICAgICBldmVudE5hbWVzID0gY2hpbGRDb21wb25lbnQuZXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5wdWJsaXNoYWJsZSA9PT0gdHJ1ZSkubWFwKHB1Ymxpc2hhYmxlRXZlbnQgPT4gcHVibGlzaGFibGVFdmVudC5wdWJsaXNoTmFtZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBldmVudCB2aWV3IGZvciBsaXN0IG9mIGFsbCBldmVudHNcbiAgICAgICAgICAgIGxldCBldmVudHMgPSBjb21wb25lbnQuZXZlbnRzLmZpbHRlcihldmVudD0+ZXZlbnROYW1lcy5maW5kKGV2ZW50TmFtZSA9PmV2ZW50TmFtZSAgPT09IGV2ZW50Lm5hbWUgJiYgZXZlbnQuaWQ9PT1jaGlsZENvbXBvbmVudC5uYW1lKSlcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5tYXAoKGV2ZW50LCBpbmRleCkgPT4gPEV2ZW50IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleD17aW5kZXh9IGV2ZW50PXtldmVudH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnSUQ9e3NlbGVjdGVkVGFnfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lcz17ZXZlbnROYW1lc30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZT17dXBkYXRlRXZlbnQuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUV2ZW50PXtkZWxldGVFdmVudC5iaW5kKHRoaXMpfSAvPik7XG5cbiAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgZXZlbnRzIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHNlbGVjdGVkVGFnXG4gICAgICAgICAgICBldmVudHNPZlNlbGVjdGVkVGFnID0gc2VsZWN0ZWRUYWcgPyBldmVudHMgOiBudWxsO1xuXG4gICAgICAgICAgICBjb25maWd1cmF0b3IgPSA8Q29uZmlndXJhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt1cGRhdGVDb25maWd1cmF0aW9uLmJpbmQodGhpcyl9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5hbWU9e2NoaWxkQ29tcG9uZW50TmFtZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudD17Y29tcG9uZW50fSAvPjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IGNvbXBvbmVudC5ldmVudHNcbiAgICAgICAgICAgICAgICAubWFwKChldmVudCwgaW5kZXgpID0+IDxFdmVudCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ9e2V2ZW50fSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWdJRD17c2VsZWN0ZWRUYWd9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE5hbWVzPXtldmVudE5hbWVzfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TYXZlPXt1cGRhdGVFdmVudC5iaW5kKHRoaXMpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRXZlbnQ9e2RlbGV0ZUV2ZW50LmJpbmQodGhpcyl9IC8+KTtcbiAgICAgICAgICAgIGV2ZW50c09mU2VsZWN0ZWRUYWcgPSBzZWxlY3RlZFRhZyA/IGV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gc2VsZWN0ZWRUYWcuaW5jbHVkZXMoZXZlbnQucHJvcHMuZXZlbnQuaWQpKSA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImNvbnRhaW5lciBldmVudHMtdGFiXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWdzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxOb2RlcyBub2RlPXtub2RlVHJlZS5yZXN1bHR9IG9uU2VsZWN0ZWRUYWdDaGFuZ2VkPXtzZWxlY3RlZFRhZ0NoYW5nZWQuYmluZCh0aGlzKX0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7Y29uZmlndXJhdG9yfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzT2ZTZWxlY3RlZFRhZyAmJiBldmVudHNPZlNlbGVjdGVkVGFnLmxlbmd0aD4wXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4aXN0aW5nIEV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+e2V2ZW50c09mU2VsZWN0ZWRUYWd9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAge3NlbGVjdGVkVGFnP1xuICAgICAgICAgICAgICAgICAgIDxkaXY+PGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkFkZCBFdmVudFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj48RXZlbnQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17Y29tcG9uZW50LmV2ZW50cy5sZW5ndGh9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE5hbWVzPXtldmVudE5hbWVzfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWdJRD17c2VsZWN0ZWRUYWd9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNhdmU9e3VwZGF0ZUV2ZW50LmJpbmQodGhpcyl9IC8+PC9kaXY+IFxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBudWxsfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50cztcbiIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiXG5cblxuY2xhc3MgQ29uZmlndXJhdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UodGhpcy5wcm9wcy5wYXJlbnQuY29uZmlnKVt0aGlzLnByb3BzLmNoaWxkTmFtZV0gfHwgeyBvdmVycmlkZTogZmFsc2V9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgb3ZlcnJpZGU6IGNvbmZpZy5vdmVycmlkZSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dlbE92ZXJyaWRlKCl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgb3ZlcnJpZGU6ICF0aGlzLnN0YXRlLm92ZXJyaWRlXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZTogIXRoaXMuc3RhdGUub3ZlcnJpZGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZE5hbWU6IHRoaXMucHJvcHMuY2hpbGROYW1lLFxuICAgICAgICAgICAgcGFyZW50TmFtZTogdGhpcy5wcm9wcy5wYXJlbnQubmFtZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzYXZlQ29uZmlnKCl7XG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGU6IHRoaXMuc3RhdGUub3ZlcnJpZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGROYW1lOiB0aGlzLnByb3BzLmNoaWxkTmFtZSxcbiAgICAgICAgICAgIHBhcmVudE5hbWU6IHRoaXMucHJvcHMucGFyZW50Lm5hbWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPkNoaWxkIENvbmZpZ3VyYXRpb25zPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5PdmVycmlkZSBzdGF0ZTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbkNoYW5nZT17dGhpcy50b2dnZWxPdmVycmlkZS5iaW5kKHRoaXMpfSBjaGVja2VkPXt0aGlzLnN0YXRlLm92ZXJyaWRlID8gXCJjaGVja2VkXCIgOiBcIlwifSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpZ3VyYXRvcjtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmVycm9yIHtcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuLmluZm8ge1xcbiAgICBjb2xvcjogeWVsbG93Z3JlZW47XFxufVxcblxcbmxhYmVsIHtcXG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuXFxuLmNvbmZpZ3VyYXRvciB7XFxuICAgIGJhY2tncm91bmQ6IHJnYig2NCwgNjQsIDY0KTtcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXG4gICAgcGFkZGluZzogNXB4O1xcbn1cXG5cXG4uc3BhY2luZ3tcXG4gICAgbWFyZ2luOiAxMHB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuY2xhc3MgTm9kZXMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5wcm9wcy5ub2RlO1xuXG5cbiAgICAgICAgaWYoIW5vZGUpe1xuICAgICAgICAgICAgcmV0dXJuICg8c3Bhbj5udWxsPC9zcGFuPilcbiAgICAgICAgfVxuICAgICAgICBpZih0eXBlb2Ygbm9kZT09PVwic3RyaW5nXCIpe1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPGxpPntub2RlfTwvbGk+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IG5vZGUucHJvcHMuaWQgPyAoXCItXCIrbm9kZS5wcm9wcy5pZCkgOiBcIlwiO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGNvbnRhaW5zIGNoaWxkcmVuLlxuICAgICAgICBpZihub2RlLnByb3BzICYmIEFycmF5LmlzQXJyYXkobm9kZS5wcm9wcy5jaGlsZHJlbikpe1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5wcm9wcy5jaGlsZHJlbi5tYXAoKGNoaWxkLGluZGV4KT0+PE5vZGVzIGtleT17aW5kZXh9IG5vZGU9e2NoaWxkfSBvblNlbGVjdGVkVGFnQ2hhbmdlZD17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0vPik7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzZWxlY3RlZEVsZW1lbnRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e25vZGUudHlwZSArIGlkfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bm9kZS50eXBlICtpZH1cbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIG5vZGUgY29udGFpbnMgb25seSBvbmUgY2hpbGRyZW4sIGpzeCBnZXQgdHJhbnNwaWxlZCB0byBvYmplY3QgcmF0aGVyIHRoYW4gYXJyYXkuXG4gICAgICAgIGVsc2UgaWYodHlwZW9mIG5vZGUucHJvcHMuY2hpbGRyZW4gPT09IFwib2JqZWN0XCIpe1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gbm9kZS5wcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInNlbGVjdGVkRWxlbWVudFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByb3BzLm9uU2VsZWN0ZWRUYWdDaGFuZ2VkfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17KG5vZGUudHlwZS5uYW1lIHx8IG5vZGUudHlwZSkraWR9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsobm9kZS50eXBlLm5hbWUgfHwgbm9kZS50eXBlKX1cbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPE5vZGVzIGtleT17aW5kZXh9IG5vZGU9e2NoaWxkfSBvblNlbGVjdGVkVGFnQ2hhbmdlZD17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0vPlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5lc3RlZCBjb21wb25lbnQuXG4gICAgICAgIGVsc2UgaWYodHlwZW9mIG5vZGUudHlwZSA9PT0gXCJmdW5jdGlvblwiKXtcbiAgICAgICAgICAgIHJldHVybiAoPHVsPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwic2VsZWN0ZWRFbGVtZW50XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17XCJjaGlsZC1jb21wb25lbnQtXCIrbm9kZS50eXBlLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICB7bm9kZS50eXBlLm5hbWV9XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzZWxlY3RlZEVsZW1lbnRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtub2RlLnR5cGUraWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdGVkVGFnQ2hhbmdlZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICB7bm9kZS50eXBlICtpZH1cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZXM7IiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCJcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IGdldE1lc3NhZ2VzIGZyb20gXCIuL01lc3NhZ2VzXCI7XG5pbXBvcnQge1VuQ29udHJvbGxlZCBhcyBDb2RlTWlycm9yfSBmcm9tICdyZWFjdC1jb2RlbWlycm9yMic7XG5cbi8vIFJlZHVjZXJzLiBcblxuaW1wb3J0IHt1cGRhdGVFdmVudE5hbWUsIHVwZGF0ZUV2ZW50VHlwZSwgdXBkYXRlUHVibGlzaE5hbWV9IGZyb20gXCIuL1JlZHVjZXJcIjtcblxuLy8gRXZlbnRzLlxuXG5pbXBvcnQge3B1Ymxpc2hFdmVudCwgZGVsZXRlRXZlbnR9IGZyb20gJy4vRXZlbnRzJztcblxuY2xhc3MgRXZlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMuZXZlbnQgPyB0aGlzLnByb3BzLmV2ZW50Lm5hbWUgOiBcIlwiLFxuICAgICAgICAgICAgcmVkdWNlcjogdGhpcy5wcm9wcy5ldmVudCA/IHRoaXMucHJvcHMuZXZlbnQucmVkdWNlciA6IFwiXCIsXG4gICAgICAgICAgICBwdWJsaXNoYWJsZTogdGhpcy5wcm9wcy5ldmVudCA/IHRoaXMucHJvcHMuZXZlbnQucHVibGlzaGFibGUgOiBcIlwiLFxuICAgICAgICAgICAgcHVibGlzaE5hbWU6IHRoaXMucHJvcHMuZXZlbnQgPyB0aGlzLnByb3BzLmV2ZW50LnB1Ymxpc2hOYW1lIDogXCJcIixcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZFRhZ0lEID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNZXNzYWdlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHB1Ymxpc2hOYW1lID0gdGhpcy5zdGF0ZS5wdWJsaXNoYWJsZT8gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgb25DaGFuZ2U9e3VwZGF0ZVB1Ymxpc2hOYW1lLmJpbmQodGhpcyl9IHZhbHVlPXt0aGlzLnN0YXRlLnB1Ymxpc2hOYW1lfSBwbGFjZWhvbGRlcj1cIkVudGVyIGV2ZW50IHB1Ymxpc2ggbmFtZSBmb3Igb3RoZXIgY29tcG9uZW50cyB0byBzdWJzY3JpYmUgdG9cIi8+IDogbnVsbDtcbiAgICAgICAgbGV0IGV2ZW50TmFtZXMgPSB0aGlzLnByb3BzLmV2ZW50TmFtZXMubWFwKGV2ZW50TmFtZT0+PG9wdGlvbiB2YWx1ZT17ZXZlbnROYW1lfT48L29wdGlvbj4pXG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZXZlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3BhY2luZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+RXZlbnQgbmFtZTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBsaXN0PVwiZXZlbnRzXCIgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dXBkYXRlRXZlbnROYW1lLmJpbmQodGhpcyl9IHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9IHRpdGxlPVwiRXZlbnQgTmFtZVwiLz5cbiAgICAgICAgICAgICAgICAgICAgPGRhdGFsaXN0IGlkPVwiZXZlbnRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZXZlbnROYW1lc31cbiAgICAgICAgICAgICAgICAgICAgPC9kYXRhbGlzdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGFjaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIFB1Ymxpc2hhYmxlXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbkNoYW5nZT17dXBkYXRlRXZlbnRUeXBlLmJpbmQodGhpcyl9IGNoZWNrZWQ9e3RoaXMuc3RhdGUucHVibGlzaGFibGU/IFwiY2hlY2tlZFwiOiBcIlwifS8+XG5cbiAgICAgICAgICAgICAgICAgICAge3B1Ymxpc2hOYW1lfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwYWNpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkV2ZW50IHJlZHVjZXI8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8Q29kZU1pcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnJlZHVjZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0N1cnNvcj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwidGV4dC9qYXZhc2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOiBcImRhcmN1bGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50V2l0aFRhYnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFydEluZGVudDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlZGl0b3IsIGRhdGEsIHJlZHVjZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWR1Y2VyOiByZWR1Y2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3B1Ymxpc2hFdmVudC5iaW5kKHRoaXMpfSBpZD1cInNhdmVFdmVudFwiPjxpIGNsYXNzTmFtZT1cImZhcyBmYS1zYXZlXCI+PC9pPlNhdmU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtkZWxldGVFdmVudC5iaW5kKHRoaXMpfSBpZD1cImRlbGV0ZUV2ZW50XCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRyYXNoXCI+PC9pPkRlbGV0ZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudDtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmVycm9yIHtcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuXFxuLmluZm8ge1xcbiAgICBjb2xvcjogeWVsbG93Z3JlZW47XFxufVxcblxcbmxhYmVsIHtcXG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuXFxuLmV2ZW50IGlucHV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6NXB4O1xcbiAgICB3aWR0aDoxNTBweDtcXG59XFxuXFxuLmV2ZW50IHRleHRhcmVhIHtcXG4gICAgbWFyZ2luLXRvcDogOHB4O1xcbiAgICB3aWR0aDogMzAwcHg7XFxufVxcblxcbi5pbnB1dCB7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IE1lc3NhZ2VzQ29tcG9uZW50IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlc0NvbXBvbmVudFwiO1xuXG5mdW5jdGlvbiBnZXRNZXNzYWdlcyAoKSB7XG4gICAgbGV0IG1lc3NhZ2VzID0gW3tcbiAgICAgICAgdHlwZTogXCJpbmZvXCIsXG4gICAgICAgIHRleHQ6IFwiIzEgSU5GTzogU2VsZWN0IGFueSBlbGVtZW50IGluIHRoZSBsZWZ0IG1vc3QgcGFuZShlZGl0b3IgcGFuZSkgdG8gc2VlIGl0cyBjb250ZW50XCJcbiAgICB9LHtcbiAgICAgICAgdHlwZTogXCJpbmZvXCIsXG4gICAgICAgIHRleHQ6IFwiIzIgSU5GTzogQ2xpY2sgb24gJ0FkZCcgdG8gYWRkIGFuIGNvbXBvbmVudFwiXG4gICAgfV1cblxuICAgIHJldHVybiA8TWVzc2FnZXNDb21wb25lbnQgbWVzc2FnZXM9e21lc3NhZ2VzfSAvPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TWVzc2FnZXM7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZXJyb3Ige1xcbiAgICBjb2xvcjogcmVkO1xcbn1cXG5cXG5cXG4uaW5mbyB7XFxuICAgIGNvbG9yOiB5ZWxsb3dncmVlbjtcXG59XCIsIFwiXCJdKTtcblxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmNsYXNzIE1lc3NhZ2VDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0ICBtZXNzYWdlID0gdGhpcy5wcm9wcy5tZXNzYWdlO1xuXG4gICAgICAgIGlmKG1lc3NhZ2UudHlwZSA9PT0gXCJlcnJvclwiIHx8IG1lc3NhZ2UudHlwZT09PSBcImluZm9cIikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17bWVzc2FnZS50eXBlfT5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGU+e21lc3NhZ2UudGV4dH08L2NvZGU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZS50eXBlICsgXCIgaXMgdW5pZGVudGlmaWVkIG1lc3NhZ2UgdHlwZSBmb3IgPE1lc3NhZ2VzQ29tcG9uZW50Lz4uIFBsZWFzZSB1c2UgZWl0aGVyICdlcnJvcicgb3IgJ2luZm8nIG9ubHkuIElmIHlvdSByZXF1aXJlIGEgZGlmZmVyZW50IHR5cGUsIHJhaXNlIGFuIGlzc3VlLCBzZW5kIGEgUFJcIilcbiAgICAgICAgICAgIHJldHVybiAgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWVycm9yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPntcImVycm9yIDogdW5pZGVudGlmaWVkIG1lc3NhZ2UgdHlwZS4gUGxlYXNlIHVzZSBlaXRoZXIgZXJyb3IvIGluZm8gb25seVwifTwvY29kZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQ29tcG9uZW50OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLmVycm9yIHtcXG4gICAgY29sb3I6IHJlZDtcXG59XFxuXFxuXFxuLmluZm8ge1xcbiAgICBjb2xvcjogeWVsbG93Z3JlZW47XFxufVwiLCBcIlwiXSk7XG5cbiIsIlxuICBmdW5jdGlvbiAgdXBkYXRlRXZlbnROYW1lKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBuYW1lOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiBmdW5jdGlvbiAgIHVwZGF0ZVB1Ymxpc2hOYW1lKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwdWJsaXNoTmFtZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgZnVuY3Rpb24gIHVwZGF0ZUV2ZW50VHlwZShlKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwdWJsaXNoYWJsZTogZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgdXBkYXRlRXZlbnROYW1lLFxuICAgICAgICB1cGRhdGVFdmVudFR5cGUsXG4gICAgICAgIHVwZGF0ZVB1Ymxpc2hOYW1lLFxuICAgICAgICB1cGRhdGVFdmVudFR5cGVcbiAgICB9IiwiZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hFdmVudCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblNhdmUoe1xuICAgICAgICAgICAgbmFtZTogdGhpcy5zdGF0ZS5uYW1lLFxuICAgICAgICAgICAgcmVkdWNlcjogdGhpcy5zdGF0ZS5yZWR1Y2VyLFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgICAgICBwdWJsaXNoYWJsZTogdGhpcy5zdGF0ZS5wdWJsaXNoYWJsZSxcbiAgICAgICAgICAgIHB1Ymxpc2hOYW1lOiB0aGlzLnN0YXRlLnB1Ymxpc2hOYW1lXG4gICAgICAgIH0pXG4gICAgfVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlRXZlbnQoKXtcbiAgICAgICAgdGhpcy5wcm9wcy5kZWxldGVFdmVudCh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB9IiwiaW1wb3J0IE1lc3NhZ2VzQ29tcG9uZW50IGZyb20gXCIuLi91dGlsaXRpZXMvQ29tcG9uZW50cy9NZXNzYWdlc0NvbXBvbmVudFwiO1xuXG5mdW5jdGlvbiBnZXRNZXNzYWdlcyAoZXJyb3IpIHtcblxuICAgIGxldCBtZXNzYWdlcyA9IFt7XG4gICAgICAgIHR5cGU6XCJlcnJvclwiLFxuICAgICAgICB0ZXh0OlwiRVJST1IgOiBcIitlcnJvcitcImRldmVsb3BlciBsb2c6IGxvb2sgaW4gY29uc29sZSByZWxhdGVkIHRvIGV2YWxcIlxuICAgIH1dXG4gICAgcmV0dXJuIChcbiAgICAgICAgPE1lc3NhZ2VzQ29tcG9uZW50IG1lc3NhZ2VzID0ge21lc3NhZ2VzfS8+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNZXNzYWdlczsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5ldmVudHMge1xcbiAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xcbiAgICBwYWRkaW5nOiA1cHg7XFxufVxcblxcbi5lcnJvciB7XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbi50YWdzLnRhZ3MgdWwge1xcbiAgICBib3JkZXI6IDBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XFxuICAgIHBhZGRpbmc6NXB4O1xcbn1cXG5cXG4udGFncyB1bDpmaXJzdC1jaGlsZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMnB4O1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbiAgICBleHBvcnQgZnVuY3Rpb24gdXBkYXRlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuY29tcG9uZW50KSlcblxuICAgICAgICAvLyBLZWVwIHRoZSBjaGlsZCBjb21wb25lbnQgbmFtZSBhcyB0aGUgSUQuIFdpbGwgY2F1c2UgcHJvYmxlbSBpbiBmdXR1cmUgZm9yIGxpc3QgcmVuZGVyaW5nIGJveS5cbiAgICAgICAgaWYodGhpcy5zdGF0ZS5zZWxlY3RlZFRhZy5pbmNsdWRlcyhcImNoaWxkLWNvbXBvbmVudC1cIikpe1xuICAgICAgICAgICAgZXZlbnQuaWQgPSB0aGlzLnN0YXRlLnNlbGVjdGVkVGFnLnNwbGl0KFwiY2hpbGQtY29tcG9uZW50LVwiKVsxXVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBldmVudC5pZCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRUYWcuc3BsaXQoXCItXCIpWzFdO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBcbiAgICAgICAgaWYgKGV2ZW50LmluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRWRpdFxuICAgICAgICAgICAgZWxlbWVudC5ldmVudHNbZXZlbnQuaW5kZXhdID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb3BzLm9uRXZlbnRzVXBkYXRlKGVsZW1lbnQuZXZlbnRzKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2VsZWN0ZWRUYWdDaGFuZ2VkKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3RlZFRhZzogZS5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUV2ZW50KGluZGV4KSB7XG5cbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgY29tcG9uZW50LlxuICAgICAgICBsZXQgY29tcG9uZW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLmNvbXBvbmVudCkpO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZXZlbnQgdG8gYmUgZGVsZXRlZC5cbiAgICAgICAgY29tcG9uZW50LmV2ZW50cyA9IGNvbXBvbmVudC5ldmVudHMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICAvLyBVcGRhdGUgZWxlbWVudHMgd2l0aCBuZXcgZXZlbnRzLlxuICAgICAgICB0aGlzLnByb3BzLm9uRXZlbnRzVXBkYXRlKGNvbXBvbmVudC5ldmVudHMpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDb25maWd1cmF0aW9uKGNvbmZpZyl7XG4gICAgICAgIHRoaXMucHJvcHMub25Db25maWdVcGRhdGUoY29uZmlnKTtcbiAgICB9IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge8Kgc2F2ZUNvbXBvbmVudHNUb1dpbmRvdywgZ2V0TmVzdGVkQ29tcG9uZW50cyB9IGZyb20gXCIuL1J1bnRpbWVcIjtcblxuLy8gV2h5PyBCZWNhdXNlIGltcG9ydGluZyBSZWFjdCBhcyB2YXJpYWJsZSBhdCBsaW5lIzIgd2lsbCBiZSBhbHRlcnRlZCBieSBiYWJlbC4gS2VlcCBpdCBhcyBhIHByb3BlcnR5LCBiYWJlbCB3aWxsIGlnbm9yZSBpdC5cbndpbmRvdy5SZWFjdCA9IFJlYWN0O1xud2luZG93LkNvbXBvbmVudCA9IFJlYWN0LkNvbXBvbmVudDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vZGVUcmVlKGVsZW1lbnQsIGpzeCwgc3R5bGUsIHN0YXRlLCBldmVudHMpIHtcbiAgICBcbiAgICBsZXQgcmVzdWx0LCBlcnJvcjtcbiAgICB0cnl7XG4gICAgICAgIGxldCBuZXN0ZWRDb21wb25lbnRzID0gZ2V0TmVzdGVkQ29tcG9uZW50cyhlbGVtZW50KTtcbiAgICAgICAgaWYgKG5lc3RlZENvbXBvbmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2F2ZUNvbXBvbmVudHNUb1dpbmRvdyhuZXN0ZWRDb21wb25lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBldmFsKEJhYmVsLnRyYW5zZm9ybShqc3gsIHsgcHJlc2V0czogWydyZWFjdCddIH0pLmNvZGUpXG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgZXJyb3IgPSBlO1xuICAgIH1cbiAgICBmaW5hbGx5e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgcmVzdWx0LCByZXN1bHRcbiAgICAgICAgfTtcbiAgICB9XG59IiwiaW1wb3J0IHtjb252ZXJ0VG9SZWFjdH0gZnJvbSBcIi4vQ29kZUdlbmVyYXRvci9SZWFjdFwiO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50KXtcblxuICAgIGxldCBjb21wb25lbnRTdHJpbmcgPSBjb252ZXJ0VG9SZWFjdChjb21wb25lbnQpO1xuXG4gICAgLy8gZXZhbCBkb2VzIG5vdCBldmFsdWF0ZSBjbGFzcyBpZiBub3QgZXhjbG9zZWQgaW4gcGFyYW50aGVzaXMuXG4gICAgcmV0dXJuIGV2YWwoQmFiZWwudHJhbnNmb3JtKGNvbXBvbmVudFN0cmluZywgeyBwcmVzZXRzOiBbJ3JlYWN0J10sIHBsdWdpbnM6IFtcInRyYW5zZm9ybS1lczIwMTUtY2xhc3Nlc1wiXSAgfSkuY29kZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY3JlYXRlQ29tcG9uZW50XG59IiwiLy8gRWxlbWVudHMgdG8gIHJlYWN0IGNvbXBvbmVudC5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9SZWFjdCAoY29tcG9uZW50KXtcblxuICAgIGxldCBtYXJrdXAgPSBcIm1hcmt1cFwiO1xuXG4gICAgY29tcG9uZW50LmV2ZW50cy5mb3JFYWNoKGV2ZW50PT57XG4gICAgICAgIGV2ZW50LmlkID0gZXZlbnQuaWQucmVwbGFjZShcIi1cIixcIlwiKTtcbiAgICB9KVxuXG4gICAgbGV0IGFkZFByb3BzPSAoY29tcG9uZW50KT0+e1xuICAgICAgICByZXR1cm4gY29tcG9uZW50W21hcmt1cF0ucmVwbGFjZShcIj5cIixgIHsuLi50aGlzLnByb3BzfT57dGhpcy5wcm9wcy5jaGlsZHJlbn1gKVxuICAgIH1cblxuICAgIGxldCBnZXRDb21wb25lbnRFdmVudGVkTWFya3VwID0gKG1hcmt1cCwgZXZlbnRzKT0+e1xuICAgICAgICBldmVudHMuZm9yRWFjaChldmVudD0+e1xuICAgICAgICAgICAgbGV0IGlkID0gYGlkPVwiJHtldmVudC5pZH1cImA7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBtYXJrdXAgY29udGFpbnMgdGhlIGlkLlxuICAgICAgICAgICAgaWYobWFya3VwLmluY2x1ZGVzKGlkKSl7XG4gICAgICAgICAgICAgICAgbWFya3VwID0gbWFya3VwLnJlcGxhY2UoaWQsIGAke2lkfSAke2V2ZW50Lm5hbWV9PXt0aGlzLiR7ZXZlbnQuaWQrZXZlbnQubmFtZX0uYmluZCh0aGlzKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGl0cyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgbWFya3VwID0gbWFya3VwLnJlcGxhY2UoYDwke2V2ZW50LmlkfWAsYDwke2V2ZW50LmlkfSAke2V2ZW50Lm5hbWV9PXt0aGlzLiR7ZXZlbnQuaWQrZXZlbnQubmFtZX0uYmluZCh0aGlzKX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgcmV0dXJuIG1hcmt1cC5zcGxpdChcIntzdGF0ZS5cIikuam9pbihcInt0aGlzLnN0YXRlLlwiKVxuICAgIH1cblxuICAgIC8vIGNoZWNrcyBpZiBzdGF0ZSBvdmVycmlkZSBpcyBvbi4gdGhlbiBhZGRzIHN0YXRlIHByb3AgdG8gY2hpbGQgXG4gICAgbGV0IGdldFN0YXRlZE1hcmt1cCA9IChtYXJrdXApPT57XG4gICAgICAgIC8vIGZvciBhbGwgdGhlIGNvbmZpZy5cbiAgICAgICAgLy8gZmlsdGVyIGNoaWxkIHdpdGggb3ZlcmlkZSBzdGF0ZSBpcyB0cnVlXG4gICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKGNvbXBvbmVudC5jb25maWcpO1xuICAgICAgICBsZXQgY2hpbGRyZW5Db25maWcgPSBPYmplY3Qua2V5cyhjb25maWcpO1xuICAgICAgICBjaGlsZHJlbkNvbmZpZy5mb3JFYWNoKGNoaWxkTmFtZT0+e1xuXG4gICAgICAgICAgICAvLyBQUkVDQVVUSU9OOiBFZGl0IG1hcmt1cCBmb3IgcmVuZGVyaW5nIGxpc3QuIFNob3VsZCBub3QgdXNlIG90aGVyIGNvbmZpZ3VyYXRpb24gd2hpbGUgdXNpbmcgdGhpcy5cbiAgICAgICAgICAgIGlmKGNvbmZpZ1tjaGlsZE5hbWVdLm92ZXJyaWRlICl7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkTWFya3VwID0gYDwke2NoaWxkTmFtZX0+PC8ke2NoaWxkTmFtZX0+YDtcblxuICAgICAgICAgICAgICAgIGxldCBjaGlsZE1hcmt1cFdpdGhQcm9wcyA9IGA8JHtjaGlsZE5hbWV9IHN0YXRlPXtpdGVtfSBrZXk9e2l9PjwvJHtjaGlsZE5hbWV9PmA7XG4gICAgICAgICAgICAgICAgbGV0IHJlbmRlckxpc3RNYXJrdXAgPSBge3RoaXMuc3RhdGUuJHtjaGlsZE5hbWV9Lm1hcCgoaXRlbSxpKT0+JHtjaGlsZE1hcmt1cFdpdGhQcm9wc30pfWA7XG4gICAgICAgICAgICAgICAgbWFya3VwID0gIG1hcmt1cC5yZXBsYWNlKGNoaWxkTWFya3VwLCByZW5kZXJMaXN0TWFya3VwKTsgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICB9XG5cbiAgICAvLyBrZWVwIHNhdmluZyB2YXJpYW50IGluIGJyb3dzZXIsIGJ1dCBub3QgZm9yIGNvZGUgZXhwb3J0cy5cbiAgICBsZXQgZ2V0U2F2ZVZhcmlhbnQgPSAoKT0+e1xuICAgICAgICBpZighd2luZG93LkV4cG9ydE5XQil7XG4gICAgICAgICAgICByZXR1cm4gYHdpbmRvdy5zYXZlVmFyaWFudChcIiR7Y29tcG9uZW50Lm5hbWV9XCIsc3RhdGUpYFxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGxldCBwcm9wc0luTWFya3VwID0gYWRkUHJvcHMoY29tcG9uZW50KTtcbiAgICBsZXQgc3RhdGVPdmVyaWRlTWFya3VwID0gZ2V0U3RhdGVkTWFya3VwKHByb3BzSW5NYXJrdXApO1xuICAgIGxldCBjb21wb25lbnRFdmVudGVkTWFya3VwID0gZ2V0Q29tcG9uZW50RXZlbnRlZE1hcmt1cChzdGF0ZU92ZXJpZGVNYXJrdXAsIGNvbXBvbmVudC5ldmVudHMpO1xuICAgIGxldCBzYXZlVmFyaWFudCA9IGdldFNhdmVWYXJpYW50KCk7XG4gICAgXG4gICAgbGV0IFJlYWN0Q29tcG9uZW50ID0gXG4gICAgYChcbiAgICAgICAgY2xhc3MgJHtjb21wb25lbnQubmFtZX0gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb3BzLnN0YXRlIHx8ICR7Y29tcG9uZW50LnN0YXRlfTtcblxuICAgICAgICAgICAgICAgIHZhciBkeW5hbWljU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIGR5bmFtaWNTdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgICAgICBkeW5hbWljU3R5bGUuaW5uZXJIVE1MID0gXFxgJHtjb21wb25lbnQuc3R5bGV9XFxgO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHluYW1pY1N0eWxlKVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICR7Y29tcG9uZW50LmV2ZW50cy5tYXAoZXZlbnQ9PntcbiAgICAgICAgICAgICAgICBpZihldmVudC5wdWJsaXNoYWJsZSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAke2V2ZW50LmlkK2V2ZW50Lm5hbWV9IChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgJHtldmVudC5yZWR1Y2VyfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuJHtldmVudC5wdWJsaXNoTmFtZX0/IHRoaXMucHJvcHMuJHtldmVudC5wdWJsaXNoTmFtZX0oZSk6bnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICAgICAgJHtldmVudC5pZCtldmVudC5uYW1lfSAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICR7ZXZlbnQucmVkdWNlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtzYXZlVmFyaWFudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfSkuam9pbihcIlxcblwiKX1cbiAgICAgICAgXG4gICAgICAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgke2NvbXBvbmVudEV2ZW50ZWRNYXJrdXB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBgXG4gICAgcmV0dXJuIFJlYWN0Q29tcG9uZW50O1xufVxuIiwiLy8gTGlicmFyaWVzLlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmltcG9ydCBEeW5hbWljQ29tcG9uZW50IGZyb20gXCIuL0R5bmFtaWNDb21wb25lbnRcIjtcblxuLy8gVXRpbGl0aWVzLlxuXG5pbXBvcnQgeyByZWFkQ29tcG9uZW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmNsYXNzIFByZXZpZXcgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZnJlc2goICl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29tcG9uZW50OiByZWFkQ29tcG9uZW50KHRoaXMuc3RhdGUuY29tcG9uZW50Lm5hbWUpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIC8vIEhlbHBzIHRvIHJlcmVuZGVyIHdoZW4gY2hhbmdlcyB0byBtYXJrdXAvZXZlbnRzIGFyZSBtYWRlIHRvIHRoZSBjb21wb25lbnQgYW5kIHByZXZpZXcgdGhlbS5cbiAgICAgICAgbGV0IHJhbmRvbUtleSA9IHRoaXMucHJvcHMuY29tcG9uZW50LmlkKih+fihNYXRoLnJhbmRvbSgpKjEwKSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBwcmV2aWV3XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICBQcmV2aWV3XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkeW5hbWljQ29tcG9uZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RHluYW1pY0NvbXBvbmVudCBrZXk9e3JhbmRvbUtleX0gY29tcG9uZW50PXt0aGlzLnN0YXRlLmNvbXBvbmVudH0vPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmV2aWV3OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNvbnRhaW5lcntcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBiYWNrZ3JvdW5kOiAjMkMzMTM0O1xcbn1cXG5cXG4uZHJvcFBvaW50e1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmVlbjtcXG59XFxuXFxuLnRhcmdldENoaWxke1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjM0U4Q0U0O1xcbn1cXG5cXG4ucHJldmlldyBkaXY6bnRoLWNoaWxkKDIpIHtcXG4gICAgaGVpZ2h0OjUwdmg7XFxuICAgIHdpZHRoOjMwdnc7XFxuICAgIG92ZXJmbG93OnNjcm9sbDtcXG4gICAgem9vbTogLjgwO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHvCoGdldE5lc3RlZENvbXBvbmVudHMsIHNhdmVDb21wb25lbnRzVG9XaW5kb3cgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL1J1bnRpbWVcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgRHluYW1pY0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBpZih0aGlzLnN0YXRlLmNvbXBvbmVudC5uYW1lPT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHJldHVybiAoPHA+Tm8gY29tcG9uZW50IHNlbGVjdGVkLjwvcD4pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5lc3RlZENvbXBvbmVudHMgPSBnZXROZXN0ZWRDb21wb25lbnRzKHRoaXMuc3RhdGUuY29tcG9uZW50KTtcbiAgICAgICAgaWYgKG5lc3RlZENvbXBvbmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2F2ZUNvbXBvbmVudHNUb1dpbmRvdyhuZXN0ZWRDb21wb25lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCF3aW5kb3dbdGhpcy5zdGF0ZS5jb21wb25lbnQubmFtZV0pe1xuICAgICAgICAgICAgcmV0dXJuICg8ZGl2PjwvZGl2PilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KHdpbmRvd1t0aGlzLnN0YXRlLmNvbXBvbmVudC5uYW1lXSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRHluYW1pY0NvbXBvbmVudDsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbi8vIFN0eWxlcy5cblxuaW1wb3J0IFwiLi9TdHlsZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IEFzc2V0IGZyb20gXCIuL0Fzc2V0XCI7XG5cbi8vIEV2ZW50cy5cblxuaW1wb3J0IHtkcm9wSGFuZGxlciwgZHJhZ092ZXJIYW5kbGVyLCBkcmFnTGVhdmVIYW5kbGVyfSBmcm9tIFwiLi9SZWR1Y2VyXCI7XG5cbi8vIERiIHV0aWxzLlxuXG5pbXBvcnQge2ZldGNoRnJvbURCLCB3cml0ZVRvREJ9IGZyb20gXCIuL2RiXCI7XG5cbmNsYXNzIEFzc2V0cyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY2xhc3M6IFwiZHJvcF96b25lXCIsXG4gICAgICAgICAgICBpbWFnZVVSTDpcIlwiLFxuICAgICAgICAgICAgYXNzZXRzOiBbXSxcbiAgICAgICAgICAgIHNlbGVjdGVkQXNzZXQ6XCJcIlxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndyaXRlVG9EQiA9IHdyaXRlVG9EQi5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIGFwcGVuZFRvQm9keShmaWxlKXtcbiAgICAgICAgdmFyIGJpbiA9IHRoaXMucmVzdWx0O1xuICAgICAgICB2YXIgbmV3RmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBuZXdGaWxlLmlubmVySFRNTCA9ICdMb2FkZWQgOiAnICsgZmlsZS5uYW1lICsgJyBzaXplICcgKyBmaWxlLnNpemUgKyAnIEInO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5ld0ZpbGUpO1xuXG5cbiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgIGltZy5maWxlID0gZmlsZTtcbiAgICAgICAgaW1nLnNyYyA9IGJpbjtcbiAgICAgICAgbmV3RmlsZS5hcHBlbmRDaGlsZChpbWcpO1xuICAgIH1cblxuICAgIHVwZGF0ZWRTZWxlY3RlZChlKSB7XG4gICAgICAgIGxldCBhc3NldE5hbWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW5hbWVcIik7IFxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGVkQXNzZXQ6IGFzc2V0TmFtZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgYXNzZXRzID0gdGhpcy5zdGF0ZS5hc3NldHMubWFwKGFzc2V0PT4gPEFzc2V0IGFzc2V0PXthc3NldH0gc2VsZWN0ZWQ9e3RoaXMuc3RhdGUuc2VsZWN0ZWRBc3NldH0gb25TZWxlY3RlZD17dGhpcy51cGRhdGVkU2VsZWN0ZWQuYmluZCh0aGlzKX0vPik7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiYXNzZXRzXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtmZXRjaEZyb21EQi5iaW5kKHRoaXMpfT5Mb2FkIEFzc2V0czwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5jbGFzc31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJvcD17ZHJvcEhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXtkcmFnT3ZlckhhbmRsZXIuYmluZCh0aGlzKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZT17ZHJhZ0xlYXZlSGFuZGxlci5iaW5kKHRoaXMpfT5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxwPkRyYWcgb25lIG9yIG1vcmUgZmlsZXMgdG8gdGhpcyBEcm9wIFpvbmUgLi4uPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkQXNzZXQubmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7YXNzZXRzfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFzc2V0cztcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmRyb3Bfem9uZSB7XFxuICAgICAgYm9yZGVyOiAxcHggbGlnaHRncmF5IGRhc2hlZDtcXG4gICAgICB3aWR0aDogIDIwMHB4O1xcbiAgICAgIGhlaWdodDogMTAwcHg7XFxuICB9XFxuXFxuICAuZHJhZ19vdmVyIHtcXG4gICAgYm9yZGVyOiAycHggbGlnaHRncmF5IGRhc2hlZDtcXG4gICAgd2lkdGg6ICAyMDBweDtcXG4gICAgaGVpZ2h0OiAxMDBweDtcXG4gIH1cXG5cXG4gIC5hc3NldHMgcHtcXG4gICAgcGFkZGluZzoxNXB4O1xcbiAgfVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCAgXCIuL1N0eWxlLmNzc1wiO1xuXG5jbGFzcyBBc3NldCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMucHJvcHMuaW5kZXgsIGluc3RlYWQgdXNlIHRoaXMgZWxlbWVudCBpbnN0YW5jZSBpbmRleC4gUmVtb3ZlcyBkdXBsaWNhdGUgY29kZVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8cCBkYXRhLW5hbWU9e3RoaXMucHJvcHMuYXNzZXQubmFtZX0gb25DbGljaz17dGhpcy5wcm9wcy5vblNlbGVjdGVkfT57dGhpcy5wcm9wcy5hc3NldC5uYW1lfTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXNzZXQ7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zZWxlY3RlZCwgLmdyZWVuIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW47XFxuICAgIGJhY2tncm91bmQ6IHJnYig0MywgNDMsIDQzKTtcXG59XFxuXFxuLmJhY2tncm91bmQge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNjQsIDY0LCA2NCk7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzMzMzO1xcbn1cXG5cXG4uY29tcG9uZW50IHtcXG4gICAgZGlzcGxheTpmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5jb21wb25lbnQgLmNvbXBvbmVudE5hbWV7XFxuICAgIHBhZGRpbmc6N3B4O1xcbn1cXG5cXG4uc2VsZWN0ZWRBc3NldHtcXG4gICAgYm9yZGVyOiAxcHggbGlnaHRncmF5IGRhc2hlZDtcXG59XCIsIFwiXCJdKTtcblxuIiwiaW1wb3J0IGluZGV4ZWREQiBmcm9tIFwiLi4vVXRpbGl0aWVzL0xpYnJhcmllcy9pbmRleGVkREIvaW5kZXhlREJcIlxuZXhwb3J0IGZ1bmN0aW9uIGRyb3BIYW5kbGVyKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIFtdLmZvckVhY2guY2FsbChldi5kYXRhVHJhbnNmZXIuZmlsZXMsIChmaWxlKT0+e1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAgZnVuY3Rpb24gKGV2ZW50LGIpIHtcbiAgICAgICAgICAgIC8vIDEuIGFwcGVuZCB0byBib2R5XG4gICAgICAgICAgICAvLyAyLiB3cml0ZSB0byBkYi5cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kVG9Cb2R5KGZpbGUpO1xuICAgICAgICAgICAgdGhpcy53cml0ZVRvREIoZXZlbnQudGFyZ2V0LnJlc3VsdCwgZmlsZS5uYW1lKTtcblxuICAgICAgICB9LmJpbmQodGhpcyk7XG4gICAgfSlcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjbGFzczogXCJkcm9wX3pvbmVcIlxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmFnT3ZlckhhbmRsZXIoZXYpIHtcbiAgICBjb25zb2xlLmxvZygnRmlsZShzKSBpbiBkcm9wIHpvbmUnKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjbGFzczogXCJkcmFnX292ZXJcIlxuICAgIH0pXG5cbiAgICAvLyBQcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3IgKFByZXZlbnQgZmlsZSBmcm9tIGJlaW5nIG9wZW5lZClcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhZ0xlYXZlSGFuZGxlcihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNsYXNzOiBcImRyb3Bfem9uZVwiXG4gICAgfSlcbn0iLCJ3aW5kb3cuaURCID0gXCJcIjtcbmltcG9ydCB7IE1pbmRleGVkREIgfSBmcm9tIFwiLi9NaW5kZXhlZERCXCI7XG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKXtcbiAgICB3aW5kb3cuaURCID0gbmV3IE1pbmRleGVkREIoXCJ1aUVkaXRvclwiLCB7dWlFZGl0b3I6IFwibmFtZVwifSk7XG4gICAgLy8gaURCLnB1dChcInVpRWRpdG9yXCIsIHtkYXRhOjEyM30pXG4gICAgd2luZG93LmlEQi5jb25uZWN0KCk7XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgaURCOyIsIi8vIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1RvbUFudGhvbnkvTWluLmRleGVkREIvYmxvYi9tYXN0ZXIvbWluZGV4ZWRkYi5qc1xuZXhwb3J0IGZ1bmN0aW9uIE1pbmRleGVkREIoZGF0YWJhc2VOYW1lLCBvYmplY3RTdG9yZXMpIHtcblx0dGhpcy5pZGIgPSB3aW5kb3cuaW5kZXhlZERCIHx8IHdpbmRvdy5tb3pJbmRleGVkREIgfHwgd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCB3aW5kb3cubXNJbmRleGVkREIgfHwgd2luZG93LnNoaW1JbmRleGVkREI7XG5cdHRoaXMuZGIgPSBkYXRhYmFzZU5hbWU7XG5cdHRoaXMub2JqU3RycyA9IEFycmF5LmlzQXJyYXkob2JqZWN0U3RvcmVzKSA/IG9iamVjdFN0b3JlcyA6IFtvYmplY3RTdG9yZXNdO1xuXHR0aGlzLnN0b3JlID0gXCJ1aUVkaXRvclwiO1xuXG5cdHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uKGtleSkge1xuXHRcdHZhciBjb25uID0gdGhpcy5pZGIub3Blbih0aGlzLmRiLCAxKTtcblx0XHRjb25uLm1kYiA9IHRoaXM7XG5cblx0XHRjb25uLm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRibCA9IGNvbm4ucmVzdWx0O1xuXHRcdFx0dGhpcy5tZGIub2JqU3Rycy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXHRcdFx0XHR2YXIgc3RvcmUgPSBPYmplY3QuZW50cmllcyhlbGVtZW50KTtcblx0XHRcdFx0ZGJsLmNyZWF0ZU9iamVjdFN0b3JlKHN0b3JlWzBdWzBdLCB7a2V5UGF0aDogc3RvcmVbMF1bMV19KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7IFxuXHRcdFx0Y29ubi5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5tZGIuZGIgPSBjb25uLnJlc3VsdDtcblx0XHRcdFx0cmVzb2x2ZSh0aGlzLm1kYi5kYik7XG5cdFx0XHR9XG5cdFx0XHRjb25uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVqZWN0KGNvbm4uZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0dGhpcy5jcyA9IGZ1bmN0aW9uKHN0b3JlKSB7XG5cdFx0aWYgKHRoaXMuZGIgPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJbTWluLmRleGVkREJdIERCIG5vdCBvcGVuLlwiO1xuXHRcdHZhciB0eCA9IHRoaXMuZGIudHJhbnNhY3Rpb24oc3RvcmUsIFwicmVhZHdyaXRlXCIpO1xuXHRcdHJldHVybiB0eC5vYmplY3RTdG9yZShzdG9yZSk7XG5cdH1cblxuXHR0aGlzLnB1dCA9IGZ1bmN0aW9uKG9iaikge1xuXHRcdGxldCBvcyA9IHRoaXMuY3ModGhpcy5zdG9yZSk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHR2YXIgcmVzcG9uc2UgPSBvcy5wdXQob2JqKTtcblx0XHRcdHJlc3BvbnNlLm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLnJlc3VsdCk7XG5cdFx0XHR9O1xuXHRcdFx0cmVzcG9uc2Uub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZWplY3QocmVzcG9uc2UuZXJyb3IpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fVxuXG5cdHRoaXMuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG5cdFx0bGV0IG9zID0gdGhpcy5jcyh0aGlzLnN0b3JlKTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdHZhciByZXNwb25zZSA9IG9zLmdldChrZXkpO1xuXHRcdFx0cmVzcG9uc2Uub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UucmVzdWx0KTtcblx0XHRcdH07XG5cdFx0XHRyZXNwb25zZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlamVjdChyZXNwb25zZS5lcnJvcik7XG5cdFx0XHR9O1xuXHRcdH0pO1xuXHR9XG5cblx0dGhpcy5nZXRBbGwgPSBmdW5jdGlvbigpIHtcblx0XHRsZXQgb3MgPSB0aGlzLmNzKHRoaXMuc3RvcmUpO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0dmFyIHJlc3BvbnNlID0gb3MuZ2V0QWxsKCk7XG5cdFx0XHRyZXNwb25zZS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuXHRcdFx0fTtcblx0XHRcdHJlc3BvbnNlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVqZWN0KHJlc3BvbnNlLmVycm9yKTtcblx0XHRcdH07XG5cdFx0fSk7XG5cdH1cblxuXHR0aGlzLmNsb3NlID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5kYi5jbG9zZSgpO1xuXHR9XG59IiwiXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVUb0RCKHJlc3VsdCwgbmFtZSkge1xuICAgIHdpbmRvdy5pREIuZ2V0KG5hbWUpLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICBpbWcuaHJlZiA9IGRhdGEucmVzdWx0O1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGltYWdlVVJMOiBkYXRhLnJlc3VsdFxuICAgICAgICB9KVxuICAgIH0pXG4gICAgd2luZG93LmlEQi5wdXQoeyBuYW1lOiBuYW1lLCByZXN1bHQ6IHJlc3VsdCB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hGcm9tREIoKSB7XG4gICAgd2luZG93LmlEQi5nZXRBbGwoKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAvLyBzYXZlIGl0IHRvIHdpbmRvd1xuICAgICAgICB3aW5kb3cuYXNzZXRzID0ge307XG4gICAgICAgIGRhdGEuZm9yRWFjaChpbWFnZSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuYXNzZXRzW2ltYWdlLm5hbWVdID0gaW1hZ2UucmVzdWx0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgYXNzZXRzOiBkYXRhXG4gICAgICAgIH0pXG4gICAgfSk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgXCIuL1N0eWxlLmNzc1wiO1xuXG5jbGFzcyBFeHBvcnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGV4cG9ydFR5cGU6IFwiU0lNUExFXCJcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPLCBjbGVhbnVwIGFsbCBsb2NhbCBzdG9yYWdlIHRvIHdyaXRlIHRvIHdpbmRvdy5cbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIHdpbmRvdy5FWFBPUlRfVFlQRSA9IFwiU0lNUExFXCI7XG4gICAgfVxuXG4gICAgb25FeHBvcnRUeXBlQ2hhbmdlZChlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZXhwb3J0VHlwZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICAgICAgLy8gVE9ETywgY2xlYW51cCBhbGwgbG9jYWwgc3RvcmFnZSB0byB3cml0ZSB0byB3aW5kb3cuXG4gICAgICAgIHdpbmRvdy5FWFBPUlRfVFlQRSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIH1cblxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvLyBSZW1vdmUgdGhpcy5wcm9wcy5pbmRleCwgaW5zdGVhZCB1c2UgdGhpcyBlbGVtZW50IGluc3RhbmNlIGluZGV4LiBSZW1vdmVzIGR1cGxpY2F0ZSBjb2RlXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJFeHBvcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIlNJTVBMRVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuZXhwb3J0VHlwZSA9PT0gXCJTSU1QTEVcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25FeHBvcnRUeXBlQ2hhbmdlZC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3RKUyAtIGxvZ3Mgb3V0cHV0IHRvIHlvdXIgY29uc29sZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIkV4cG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiTldCXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5leHBvcnRUeXBlID09PSBcIk5XQlwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkV4cG9ydFR5cGVDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdEpTIC0gQ29kZWJhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIkV4cG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiU1RPUllCT09LXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5leHBvcnRUeXBlID09PSBcIlNUT1JZQk9PS1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkV4cG9ydFR5cGVDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5SZWFjdEpTIHdpdGggU3Rvcnlib29rIC0gQ29kZWJhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cG9ydDtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlbGVjdGVkLCAuZ3JlZW4ge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmVlbjtcXG4gICAgYmFja2dyb3VuZDogcmdiKDQzLCA0MywgNDMpO1xcbn1cXG5cXG4uYmFja2dyb3VuZCB7XFxuICAgIGJhY2tncm91bmQ6IHJnYig2NCwgNjQsIDY0KTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMzMzMzMzM7XFxufVxcblxcbi5jb21wb25lbnQge1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuLmNvbXBvbmVudCAuY29tcG9uZW50TmFtZXtcXG4gICAgcGFkZGluZzo3cHg7XFxufVxcblxcbi5zZWxlY3RlZEFzc2V0e1xcbiAgICBib3JkZXI6IDFweCBsaWdodGdyYXkgZGFzaGVkO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBwb3BIaXN0b3J5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TdG9yYWdlXCI7XG5cbmltcG9ydCBcIi4vU3R5bGUuY3NzXCI7XG5cbmNsYXNzIEhpc3RvcnkgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIHJlZnJlc2hUb1ByZXZpb3VzKCkge1xuICAgICAgICBwb3BIaXN0b3J5KCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5yZWZyZXNoVG9QcmV2aW91cy5iaW5kKHRoaXMpfT5HbyBiYWNrPC9idXR0b24+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGlzdG9yeTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlbGVjdGVkLCAuZ3JlZW4ge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmVlbjtcXG4gICAgYmFja2dyb3VuZDogcmdiKDQzLCA0MywgNDMpO1xcbn1cXG5cXG4uYmFja2dyb3VuZCB7XFxuICAgIGJhY2tncm91bmQ6IHJnYig2NCwgNjQsIDY0KTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMzMzMzMzM7XFxufVxcblxcbi5jb21wb25lbnQge1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuLmNvbXBvbmVudCAuY29tcG9uZW50TmFtZXtcXG4gICAgcGFkZGluZzo3cHg7XFxufVxcblxcbi5zZWxlY3RlZEFzc2V0e1xcbiAgICBib3JkZXI6IDFweCBsaWdodGdyYXkgZGFzaGVkO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgQ2VudGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDZW50ZXI7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2VudGVye1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogNTAlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgQm90dG9tIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJCb3R0b21cIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCb3R0b207IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYm90dG9te1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJvdHRvbTowcHg7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgYW5pbWF0aW9uOiBzbGlkZS11cCAwLjRzIGVhc2U7XFxufVxcblxcbkBrZXlmcmFtZXMgc2xpZGUtdXAge1xcbiAgICAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDIwcHgpO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG4gICAgfVxcbn1cIiwgXCJcIl0pO1xuXG4iLCIvLyBMaWJyYXJpZXMuXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuY2xhc3MgTGVmdCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IExlZnQ7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuTGVmdHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OjBweDtcXG4gICAgYW5pbWF0aW9uOiBzbGlkZS10by1zY3JlZW4gMC43cyBlYXNlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLXRvLXNjcmVlbiB7XFxuICAgIDAlIHtcXG4gICAgICAgIGxlZnQ6LTMwMHB4O1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgbGVmdDogMHB4O1xcbiAgICB9XFxufVwiLCBcIlwiXSk7XG5cbiIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jbGFzcyBSaWdodCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2VsZWN0ZWQ6XCJFdmVudHNcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlU2VsZWN0ZWRUYWIoZXZlbnQpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdGVkOmV2ZW50LnRhcmdldC5pbm5lclRleHRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHQgY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW4ubWFwKGNoaWxkPT57XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gICg8ZGl2IGNsYXNzTmFtZT17Y2hpbGQucHJvcHMudGl0bGU9PT10aGlzLnN0YXRlLnNlbGVjdGVkPyBcInRhYnMgdGl0bGVcIjogXCJ0YWJzXCJ9IG9uQ2xpY2s9e3RoaXMudXBkYXRlU2VsZWN0ZWRUYWIuYmluZCh0aGlzKX0+XG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZC5wcm9wcy50aXRsZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj4pXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWItY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbi5maWx0ZXIoY2hpbGQ9PmNoaWxkLnByb3BzLnRpdGxlPT09dGhpcy5zdGF0ZS5zZWxlY3RlZCl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmlnaHQ7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuUmlnaHR7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6MHB4O1xcbiAgICBhbmltYXRpb246IHNsaWRlLXJpZ2h0IDAuMnMgZWFzZTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgICB3aWR0aDo0MDBweDtcXG59XFxuXFxuQGtleWZyYW1lcyBzbGlkZS1yaWdodCB7XFxuICAgIDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICByaWdodDotMTAwcHg7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgICAgcmlnaHQ6IDBweDtcXG4gICAgfVxcbn1cXG5cXG4udGFiLWNvbnRlbnR7XFxuICAgIGhlaWdodDoxMDAlO1xcbiAgICBib3JkZXI6IDFweCAjNDA0MDQwIHNvbGlkO1xcbn1cXG5cXG4udGFiLWNvbnRlbnQgdWwge1xcbiAgICBwYWRkaW5nOiAxMnB4O1xcbn1cXG5cXG4udGFicyB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICBcXG4gICAgbWFyZ2luLXRvcDogMTVweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTFweDtcXG4gICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBmb250LXNpemU6IDEycHg7XFxufVwiLCBcIlwiXSk7XG5cbiIsImltcG9ydCB7d3JpdGVEYXRhfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRXZlbnQgKGV2ZW50cykge1xuICAgIC8vIENyZWF0ZSBuZXcgc3RhdGUuXG4gICAgbGV0IG5ld0VsZW1lbnRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSkuY29tcG9uZW50cztcbiAgICBsZXQgc2VsZWN0ZWRDb21wb25lbnQgPSBuZXdFbGVtZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PXRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQubmFtZSlcblxuICAgIHNlbGVjdGVkQ29tcG9uZW50LmV2ZW50cyA9IGV2ZW50cztcblxuICAgIC8vIFNldCBzdGF0ZSB0byB0aGUgbmV3IHN0YXRlLlxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlbGVtZW50czogbmV3RWxlbWVudHNcbiAgICB9KTtcblxuICAgIHdyaXRlRGF0YShcInVpLWVkaXRvclwiLCBuZXdFbGVtZW50cylcblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDb25maWcoY29uZmlnKXtcbiAgICBcbiAgICBsZXQgbmV3RWxlbWVudHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlKS5jb21wb25lbnRzO1xuICAgIFxuICAgIGxldCBwYXJlbnQgPSBuZXdFbGVtZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PWNvbmZpZy5wYXJlbnROYW1lKTtcbiAgICBsZXQgY2hpbGQgPSBuZXdFbGVtZW50cy5maW5kKGVsZW1lbnQ9PmVsZW1lbnQubmFtZT09PWNvbmZpZy5jaGlsZE5hbWUpO1xuXG4gICAgcGFyZW50LnN0YXRlID0gSlNPTi5wYXJzZShwYXJlbnQuc3RhdGUpO1xuXG4gICAgaWYocGFyZW50LmNvbmZpZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgcGFyZW50LmNvbmZpZyA9IHt9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGFyZW50LmNvbmZpZyA9IEpTT04ucGFyc2UocGFyZW50LmNvbmZpZyk7XG4gICAgfVxuICAgIHBhcmVudC5jb25maWdbY2hpbGQubmFtZV0gPSBjb25maWcuY29uZmlnO1xuICAgIGlmKHBhcmVudC5jb25maWdbY2hpbGQubmFtZV0ub3ZlcnJpZGUpIHsgICAgXG4gICAgICAgIHBhcmVudC5zdGF0ZVtjaGlsZC5uYW1lXSA9IFtKU09OLnBhcnNlKGNoaWxkLnN0YXRlKV07XG4gICAgfSBcbiAgICBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHBhcmVudC5zdGF0ZVtjaGlsZC5uYW1lXTtcbiAgICB9XG5cblxuICAgIHBhcmVudC5zdGF0ZSA9IEpTT04uc3RyaW5naWZ5KHBhcmVudC5zdGF0ZSlcbiAgICBwYXJlbnQuY29uZmlnPSBKU09OLnN0cmluZ2lmeShwYXJlbnQuY29uZmlnKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGVsZW1lbnRzOiBuZXdFbGVtZW50c1xuICAgIH0pXG5cbiAgICB3cml0ZURhdGEoXCJ1aS1lZGl0b3JcIiwgbmV3RWxlbWVudHMpXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVFbGVtZW50IChlbGVtZW50KSB7XG4gICAgbGV0IGNvbXBvbmVudHMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGUuY29tcG9uZW50cyk7XG4gICAgbGV0IG5ld0VsZW1lbnQ7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBleGlzdC5cbiAgICBsZXQgZWxlbWVudEV4aXN0ID0gY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1lbGVtZW50Lm5hbWUpO1xuICAgIGxldCBzZWxlY3RlZENvbXBvbmVudCA9IGNvbXBvbmVudHMuZmluZChjb21wb25lbnQ9PmNvbXBvbmVudC5uYW1lPT09dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudC5uYW1lKTtcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IGNvbXBvbmVudHMuZmluZEluZGV4KGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT10aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50Lm5hbWUpO1xuICAgIGlmKGVsZW1lbnRFeGlzdCl7XG4gICAgICAgIC8vIEZpbmQgdGhlIGVsZW1lbnQuXG4gICAgICAgIGxldCBlbGVtZW50VW5kZXJFZGl0ID0gc2VsZWN0ZWRDb21wb25lbnQ7XG5cbiAgICAgICAgLy8gTWVyZ2UuXG4gICAgICAgIGVsZW1lbnRVbmRlckVkaXQgPSBPYmplY3QuYXNzaWduKGVsZW1lbnRVbmRlckVkaXQsIGVsZW1lbnQpXG5cbiAgICAgICAgLy8gUHVzaCBpdCB0byBvcmlnaW5hbCBsaXN0LlxuICAgICAgICBjb21wb25lbnRzW3NlbGVjdGVkSW5kZXhdID0gZWxlbWVudFVuZGVyRWRpdDtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgICAgbmV3RWxlbWVudCA9IHtcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogZWxlbWVudC5tYXJrdXAsXG4gICAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgICAgc3RhdGU6IGVsZW1lbnQuc3RhdGUgfHwgXCJ7fVwiLFxuICAgICAgICAgICAgc3R5bGU6IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBpZDogTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkqMTAwMCksXG4gICAgICAgICAgICBjb25maWc6XCJ7fVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgY29tcG9uZW50cy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gY29tcG9uZW50cy5sZW5ndGgtMTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZWxlbWVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgIG1hcmt1cDogZWxlbWVudC5tYXJrdXAsXG4gICAgICAgICAgICBzdHlsZTogZWxlbWVudC5zdHlsZSxcbiAgICAgICAgICAgIHN0YXRlOiBlbGVtZW50LnN0YXRlLFxuICAgICAgICAgICAgZXZlbnRzOiBlbGVtZW50LmV2ZW50cyB8fCBbXVxuICAgICAgICB9LFxuICAgICAgICBzaG93RWRpdG9yOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgd3JpdGVEYXRhKFwidWktZWRpdG9yXCIsIGNvbXBvbmVudHMpXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGVkQ29tcG9uZW50IChlKSB7XG4gICAgbGV0IGNvbXBvbmVudE5hbWUgPSBlLmN1cnJlbnRUYXJnZXQuaW5uZXJUZXh0LnNwbGl0KFwiXFxuXCIpWzBdO1xuICAgIC8vIEZpbmQgdGhlIGVsZW1lbnQgZnJvbSBzdGF0ZSB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbGVtZW50LlxuICAgIGxldCBzZWxlY3RlZENvbXBvbmVudCA9IHRoaXMuc3RhdGUuY29tcG9uZW50cy5maW5kKGNvbXBvbmVudD0+Y29tcG9uZW50Lm5hbWU9PT1jb21wb25lbnROYW1lKTtcblxuICAgIHdpbmRvdy5zZWxlY3RlZGNvbXBvbmVudG5hbWUgPSBzZWxlY3RlZENvbXBvbmVudC5uYW1lO1xuICAgIC8vIFVwZGF0ZSB0aGUgc3RhdGUgd2l0aCBzZWxlY3RlZEVsZW1lbnQuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkQ29tcG9uZW50XG4gICAgfSlcbn1cbiIsIi8vIExpYnJhcmllcy5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcblxuLy8gRGVwZW5kZW5jaWVzLlxuaW1wb3J0IFwiLi9JbmRleC9pbmRleC5jc3NcIjtcblxuLy8gQ29tcG9uZW50cy5cblxuaW1wb3J0IENvbXBvbmVudHMgZnJvbSBcIi4vQ29tcG9uZW50c1wiO1xuaW1wb3J0IEVkaXRvciBmcm9tIFwiLi9FZGl0b3JcIjtcbmltcG9ydCBFdmVudHMgZnJvbSBcIi4vRXZlbnRzXCI7XG5pbXBvcnQgUHJldmlldyBmcm9tIFwiLi9QcmV2aWV3XCI7XG5pbXBvcnQgQXNzZXRzIGZyb20gXCIuL0Fzc2V0c1wiO1xuaW1wb3J0IEV4cG9ydCBmcm9tIFwiLi9FeHBvcnRcIjtcbmltcG9ydCBIaXN0b3J5IGZyb20gXCIuL0hpc3RvcnlcIjtcblxuLy8gQmVoYXZpb3VyIGNvbXBvbmVudHNcblxuaW1wb3J0IENlbnRlciBmcm9tIFwiLi9VdGlsaXRpZXMvQ29tcG9uZW50cy9DZW50ZXJcIjtcbmltcG9ydCBCb3R0b20gZnJvbSBcIi4vVXRpbGl0aWVzL0NvbXBvbmVudHMvQm90dG9tXCI7XG5pbXBvcnQgTGVmdCBmcm9tIFwiLi9VdGlsaXRpZXMvQ29tcG9uZW50cy9MZWZ0XCI7XG5pbXBvcnQgUmlnaHQgZnJvbSBcIi4vVXRpbGl0aWVzL0NvbXBvbmVudHMvUmlnaHRcIjtcblxuLy8gUmVkdWNlcnMuXG5pbXBvcnQgeyB1cGRhdGVFdmVudCwgdXBkYXRlQ29uZmlnLCBzYXZlRWxlbWVudCwgdXBkYXRlU2VsZWN0ZWRDb21wb25lbnQgfSBmcm9tIFwiLi9JbmRleC9SZWR1Y2VyXCI7XG5cbi8vIFV0aWxzXG5pbXBvcnQgeyByZWFkRGF0YSwgd3JpdGVEYXRhIH0gZnJvbSBcIi4vdXRpbGl0aWVzL1N0b3JhZ2VcIjtcblxuY2xhc3MgSW5kZXggZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudHMgPSByZWFkRGF0YShcInVpLWVkaXRvclwiKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgICAgICBzZWxlY3RlZFRhZzogXCJcIixcbiAgICAgICAgICAgIGNvbXBvbmVudDoge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgbWFya3VwOiBcIlwiLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBcIlwiLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBcInsgfVwiLFxuICAgICAgICAgICAgICAgIGV2ZW50czogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3RlZENvbXBvbmVudDogXCJcIixcbiAgICAgICAgICAgIGZvbGRlcnM6IHJlYWREYXRhKFwiZm9sZGVyc1wiKSxcbiAgICAgICAgICAgIHNob3dFZGl0b3I6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVDb25maWcgPSB1cGRhdGVDb25maWcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVFdmVudCA9IHVwZGF0ZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2F2ZUVsZW1lbnQgPSBzYXZlRWxlbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkQ29tcG9uZW50ID0gdXBkYXRlU2VsZWN0ZWRDb21wb25lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgZG9jdW1lbnQub25rZXlkb3duID0gZnVuY3Rpb24ga2V5ZG93bihlKXtcbiAgICAgICAgICAgIGlmKGUuYWx0S2V5ICYmIGUua2V5Q29kZT09NjkpIHsgLy8gQWx0ICsgRVxuICAgICAgICAgICAgICAgIC8vIE9wZW4vY2xvc2UgZWRpdG9yIGlmIGFueSBjb21wb25lbnQgaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0VkaXRvcjogIXRoaXMuc3RhdGUuc2hvd0VkaXRvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQcmV2aWV3KGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwcmV2aWV3Q29tcG9uZW50OiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUZvbGRlcnMoZm9sZGVycykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvbGRlcnM6IGZvbGRlcnNcbiAgICAgICAgfSlcbiAgICAgICAgd3JpdGVEYXRhKFwiZm9sZGVyc1wiLCBmb2xkZXJzKVxuICAgIH1cblxuICAgIG9wZW5FZGl0b3IoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd0VkaXRvcjogdHJ1ZVxuICAgICAgICB9KVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ29tcG9uZW50ID0gdGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCB8fCB0aGlzLnN0YXRlLmNvbXBvbmVudDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPExlZnQ+XG4gICAgICAgICAgICAgICAgICAgIDxDb21wb25lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzPXt0aGlzLnN0YXRlLmNvbXBvbmVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJzPXt0aGlzLnN0YXRlLmZvbGRlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvbXBvbmVudD17dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQ29tcG9uZW50c1wiXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlbkVkaXRvcj17dGhpcy5vcGVuRWRpdG9yLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbj17dGhpcy51cGRhdGVTZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRm9sZGVyc1VwZGF0ZT17dGhpcy51cGRhdGVGb2xkZXJzLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9MZWZ0PlxuICAgICAgICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICAgICAgICAgIDxQcmV2aWV3XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e3NlbGVjdGVkQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJQcmV2aWV3XCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8L1ByZXZpZXc+XG4gICAgICAgICAgICAgICAgPC9DZW50ZXI+XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCA/XG4gICAgICAgICAgICAgICAgICAgIDxSaWdodD5cbiAgICAgICAgICAgICAgICAgICAgICAgICA8RXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17c2VsZWN0ZWRDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWc9e3RoaXMuc3RhdGUuc2VsZWN0ZWRUYWd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cz17dGhpcy5zdGF0ZS5jb21wb25lbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXZlbnRzVXBkYXRlPXt0aGlzLnVwZGF0ZUV2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29uZmlnVXBkYXRlPXt0aGlzLnVwZGF0ZUNvbmZpZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkV2ZW50c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEhpc3RvcnkgdGl0bGU9XCJIaXN0b3J5XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFzc2V0cyB0aXRsZT1cIkFzc2V0c1wiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFeHBvcnQgdGl0bGU9XCJFeHBvcnRcIi8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmlnaHQ+XG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbH1cblxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dFZGl0b3IgP1xuICAgICAgICAgICAgICAgICAgICA8Qm90dG9tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17TWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PXtzZWxlY3RlZENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtzZWxlY3RlZENvbXBvbmVudC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmt1cD17c2VsZWN0ZWRDb21wb25lbnQubWFya3VwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzZWxlY3RlZENvbXBvbmVudC5zdHlsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZT17c2VsZWN0ZWRDb21wb25lbnQuc3RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJFZGl0b3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZT17dGhpcy5zYXZlRWxlbWVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm90dG9tPlxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgPEJvdHRvbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2VudGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic2hvd0VkaXRvclwib25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNob3dFZGl0b3I6IHRydWUgfSl9Pk9wZW4gRWRpdG9yPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DZW50ZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JvdHRvbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuUmVhY3RET00ucmVuZGVyKDxJbmRleCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbmRleFwiKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==